
f446re-DAWG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009314  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  080094e4  080094e4  0000a4e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009710  08009710  0000b078  2**0
                  CONTENTS
  4 .ARM          00000008  08009710  08009710  0000a710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009718  08009718  0000b078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009718  08009718  0000a718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800971c  0800971c  0000a71c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08009720  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c14  20000078  08009798  0000b078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c8c  08009798  0000bc8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bf3d  00000000  00000000  0000b0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c9a  00000000  00000000  00026fe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018e8  00000000  00000000  0002ac80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000137d  00000000  00000000  0002c568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000531e  00000000  00000000  0002d8e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d01a  00000000  00000000  00032c03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e06f2  00000000  00000000  0004fc1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013030f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072e4  00000000  00000000  00130354  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  00137638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080094cc 	.word	0x080094cc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	080094cc 	.word	0x080094cc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <writeServoVal>:
const int16_t PWM_MAX = 512;
float degree_to_PWM = (float)(PWM_MAX - PWM_MIN)/ 180.0;


void writeServoVal(int channel, float angle)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	ed87 0a00 	vstr	s0, [r7]
	 int16_t toset = PWM_MIN + angle * degree_to_PWM;
 80005ac:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80005e8 <writeServoVal+0x48>
 80005b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80005b4:	4b0d      	ldr	r3, [pc, #52]	@ (80005ec <writeServoVal+0x4c>)
 80005b6:	edd3 6a00 	vldr	s13, [r3]
 80005ba:	edd7 7a00 	vldr	s15, [r7]
 80005be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80005c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80005ca:	ee17 3a90 	vmov	r3, s15
 80005ce:	81fb      	strh	r3, [r7, #14]
	 pca9685_set_channel_pwm_times(&handlePCA, channel, 0, toset);
 80005d0:	6879      	ldr	r1, [r7, #4]
 80005d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80005d6:	2200      	movs	r2, #0
 80005d8:	4805      	ldr	r0, [pc, #20]	@ (80005f0 <writeServoVal+0x50>)
 80005da:	f000 fc8b 	bl	8000ef4 <pca9685_set_channel_pwm_times>
}
 80005de:	bf00      	nop
 80005e0:	3710      	adds	r7, #16
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	00000066 	.word	0x00000066
 80005ec:	20000008 	.word	0x20000008
 80005f0:	20000000 	.word	0x20000000

080005f4 <blue_button_clicked>:

void blue_button_clicked()
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
	// HAL_UART_Transmit (&huart2, data, sizeof (data), 10);
	writeServoVal(15, 90.);
 80005f8:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8000608 <blue_button_clicked+0x14>
 80005fc:	200f      	movs	r0, #15
 80005fe:	f7ff ffcf 	bl	80005a0 <writeServoVal>
}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	42b40000 	.word	0x42b40000

0800060c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B1_Pin)
 8000616:	88fb      	ldrh	r3, [r7, #6]
 8000618:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800061c:	d101      	bne.n	8000622 <HAL_GPIO_EXTI_Callback+0x16>
	{
		blue_button_clicked();
 800061e:	f7ff ffe9 	bl	80005f4 <blue_button_clicked>
	}
}
 8000622:	bf00      	nop
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
	...

0800062c <TransmitByte>:

void TransmitByte(uint8_t byte)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2, &byte, 1, 2000);
 8000636:	1df9      	adds	r1, r7, #7
 8000638:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800063c:	2201      	movs	r2, #1
 800063e:	4803      	ldr	r0, [pc, #12]	@ (800064c <TransmitByte+0x20>)
 8000640:	f003 ff72 	bl	8004528 <HAL_UART_Transmit>
}
 8000644:	bf00      	nop
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	200000e8 	.word	0x200000e8

08000650 <HAL_UART_RxCpltCallback>:
{
	HAL_UART_Transmit(&huart2, msg, size, 2000);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	// HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,1);
	BaseType_t xHigherPriorityTaskWoken;

	CURR_BYTE = USART_RX_BUFFER[0];
 8000658:	4b11      	ldr	r3, [pc, #68]	@ (80006a0 <HAL_UART_RxCpltCallback+0x50>)
 800065a:	781a      	ldrb	r2, [r3, #0]
 800065c:	4b11      	ldr	r3, [pc, #68]	@ (80006a4 <HAL_UART_RxCpltCallback+0x54>)
 800065e:	701a      	strb	r2, [r3, #0]
	int txStatus = xQueueSendToBackFromISR(RX_queueHandle, &CURR_BYTE, &xHigherPriorityTaskWoken);
 8000660:	4b11      	ldr	r3, [pc, #68]	@ (80006a8 <HAL_UART_RxCpltCallback+0x58>)
 8000662:	6818      	ldr	r0, [r3, #0]
 8000664:	f107 0208 	add.w	r2, r7, #8
 8000668:	2300      	movs	r3, #0
 800066a:	490e      	ldr	r1, [pc, #56]	@ (80006a4 <HAL_UART_RxCpltCallback+0x54>)
 800066c:	f005 fdd2 	bl	8006214 <xQueueGenericSendFromISR>
 8000670:	60f8      	str	r0, [r7, #12]

	if (txStatus == 0)
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d00a      	beq.n	800068e <HAL_UART_RxCpltCallback+0x3e>
	{
		// something went wrong
	}
	else
	{
		portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d007      	beq.n	800068e <HAL_UART_RxCpltCallback+0x3e>
 800067e:	4b0b      	ldr	r3, [pc, #44]	@ (80006ac <HAL_UART_RxCpltCallback+0x5c>)
 8000680:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	f3bf 8f4f 	dsb	sy
 800068a:	f3bf 8f6f 	isb	sy
	}

	// start polling again
    HAL_UART_Receive_DMA (&huart2, USART_RX_BUFFER, 1);
 800068e:	2201      	movs	r2, #1
 8000690:	4903      	ldr	r1, [pc, #12]	@ (80006a0 <HAL_UART_RxCpltCallback+0x50>)
 8000692:	4807      	ldr	r0, [pc, #28]	@ (80006b0 <HAL_UART_RxCpltCallback+0x60>)
 8000694:	f003 ffd3 	bl	800463e <HAL_UART_Receive_DMA>
}
 8000698:	bf00      	nop
 800069a:	3710      	adds	r7, #16
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	2000019c 	.word	0x2000019c
 80006a4:	2000019d 	.word	0x2000019d
 80006a8:	20000198 	.word	0x20000198
 80006ac:	e000ed04 	.word	0xe000ed04
 80006b0:	200000e8 	.word	0x200000e8

080006b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b8:	f000 ff20 	bl	80014fc <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006bc:	f000 f84e 	bl	800075c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c0:	f000 f930 	bl	8000924 <MX_GPIO_Init>
  MX_DMA_Init();
 80006c4:	f000 f90e 	bl	80008e4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80006c8:	f000 f8e2 	bl	8000890 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 80006cc:	f000 f8b2 	bl	8000834 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA (&huart2, USART_RX_BUFFER, 1);
 80006d0:	2201      	movs	r2, #1
 80006d2:	4916      	ldr	r1, [pc, #88]	@ (800072c <main+0x78>)
 80006d4:	4816      	ldr	r0, [pc, #88]	@ (8000730 <main+0x7c>)
 80006d6:	f003 ffb2 	bl	800463e <HAL_UART_Receive_DMA>

  pca9685_init(&handlePCA);
 80006da:	4816      	ldr	r0, [pc, #88]	@ (8000734 <main+0x80>)
 80006dc:	f000 fa52 	bl	8000b84 <pca9685_init>
  pca9685_wakeup(&handlePCA);
 80006e0:	4814      	ldr	r0, [pc, #80]	@ (8000734 <main+0x80>)
 80006e2:	f000 fb1d 	bl	8000d20 <pca9685_wakeup>
  pca9685_set_pwm_frequency(&handlePCA, 50.0f);
 80006e6:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8000738 <main+0x84>
 80006ea:	4812      	ldr	r0, [pc, #72]	@ (8000734 <main+0x80>)
 80006ec:	f000 fb6e 	bl	8000dcc <pca9685_set_pwm_frequency>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006f0:	f005 f8f6 	bl	80058e0 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of RX_queue */
  RX_queueHandle = osMessageQueueNew (64, sizeof(uint8_t), &RX_queue_attributes);
 80006f4:	4a11      	ldr	r2, [pc, #68]	@ (800073c <main+0x88>)
 80006f6:	2101      	movs	r1, #1
 80006f8:	2040      	movs	r0, #64	@ 0x40
 80006fa:	f005 f9e8 	bl	8005ace <osMessageQueueNew>
 80006fe:	4603      	mov	r3, r0
 8000700:	4a0f      	ldr	r2, [pc, #60]	@ (8000740 <main+0x8c>)
 8000702:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of heartbeat */
  heartbeatHandle = osThreadNew(heartbeatTask, NULL, &heartbeat_attributes);
 8000704:	4a0f      	ldr	r2, [pc, #60]	@ (8000744 <main+0x90>)
 8000706:	2100      	movs	r1, #0
 8000708:	480f      	ldr	r0, [pc, #60]	@ (8000748 <main+0x94>)
 800070a:	f005 f933 	bl	8005974 <osThreadNew>
 800070e:	4603      	mov	r3, r0
 8000710:	4a0e      	ldr	r2, [pc, #56]	@ (800074c <main+0x98>)
 8000712:	6013      	str	r3, [r2, #0]

  /* creation of RX_USART */
  RX_USARTHandle = osThreadNew(RX_decode_msg, NULL, &RX_USART_attributes);
 8000714:	4a0e      	ldr	r2, [pc, #56]	@ (8000750 <main+0x9c>)
 8000716:	2100      	movs	r1, #0
 8000718:	480e      	ldr	r0, [pc, #56]	@ (8000754 <main+0xa0>)
 800071a:	f005 f92b 	bl	8005974 <osThreadNew>
 800071e:	4603      	mov	r3, r0
 8000720:	4a0d      	ldr	r2, [pc, #52]	@ (8000758 <main+0xa4>)
 8000722:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000724:	f005 f900 	bl	8005928 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000728:	bf00      	nop
 800072a:	e7fd      	b.n	8000728 <main+0x74>
 800072c:	2000019c 	.word	0x2000019c
 8000730:	200000e8 	.word	0x200000e8
 8000734:	20000000 	.word	0x20000000
 8000738:	42480000 	.word	0x42480000
 800073c:	0800961c 	.word	0x0800961c
 8000740:	20000198 	.word	0x20000198
 8000744:	080095d4 	.word	0x080095d4
 8000748:	08000a11 	.word	0x08000a11
 800074c:	20000190 	.word	0x20000190
 8000750:	080095f8 	.word	0x080095f8
 8000754:	08000a21 	.word	0x08000a21
 8000758:	20000194 	.word	0x20000194

0800075c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b094      	sub	sp, #80	@ 0x50
 8000760:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000762:	f107 031c 	add.w	r3, r7, #28
 8000766:	2234      	movs	r2, #52	@ 0x34
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f008 f83d 	bl	80087ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000770:	f107 0308 	add.w	r3, r7, #8
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
 800077e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000780:	2300      	movs	r3, #0
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	4b29      	ldr	r3, [pc, #164]	@ (800082c <SystemClock_Config+0xd0>)
 8000786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000788:	4a28      	ldr	r2, [pc, #160]	@ (800082c <SystemClock_Config+0xd0>)
 800078a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800078e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000790:	4b26      	ldr	r3, [pc, #152]	@ (800082c <SystemClock_Config+0xd0>)
 8000792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000794:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800079c:	2300      	movs	r3, #0
 800079e:	603b      	str	r3, [r7, #0]
 80007a0:	4b23      	ldr	r3, [pc, #140]	@ (8000830 <SystemClock_Config+0xd4>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a22      	ldr	r2, [pc, #136]	@ (8000830 <SystemClock_Config+0xd4>)
 80007a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007aa:	6013      	str	r3, [r2, #0]
 80007ac:	4b20      	ldr	r3, [pc, #128]	@ (8000830 <SystemClock_Config+0xd4>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007b4:	603b      	str	r3, [r7, #0]
 80007b6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007b8:	2302      	movs	r3, #2
 80007ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007bc:	2301      	movs	r3, #1
 80007be:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007c0:	2310      	movs	r3, #16
 80007c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c4:	2302      	movs	r3, #2
 80007c6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007c8:	2300      	movs	r3, #0
 80007ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007cc:	2308      	movs	r3, #8
 80007ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 80007d0:	23a0      	movs	r3, #160	@ 0xa0
 80007d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d4:	2302      	movs	r3, #2
 80007d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007d8:	2302      	movs	r3, #2
 80007da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007dc:	2302      	movs	r3, #2
 80007de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e0:	f107 031c 	add.w	r3, r7, #28
 80007e4:	4618      	mov	r0, r3
 80007e6:	f003 f90f 	bl	8003a08 <HAL_RCC_OscConfig>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007f0:	f000 f944 	bl	8000a7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f4:	230f      	movs	r3, #15
 80007f6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f8:	2302      	movs	r3, #2
 80007fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000800:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000804:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000806:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800080a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800080c:	f107 0308 	add.w	r3, r7, #8
 8000810:	2105      	movs	r1, #5
 8000812:	4618      	mov	r0, r3
 8000814:	f002 fd7c 	bl	8003310 <HAL_RCC_ClockConfig>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800081e:	f000 f92d 	bl	8000a7c <Error_Handler>
  }
}
 8000822:	bf00      	nop
 8000824:	3750      	adds	r7, #80	@ 0x50
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40023800 	.word	0x40023800
 8000830:	40007000 	.word	0x40007000

08000834 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000838:	4b12      	ldr	r3, [pc, #72]	@ (8000884 <MX_I2C2_Init+0x50>)
 800083a:	4a13      	ldr	r2, [pc, #76]	@ (8000888 <MX_I2C2_Init+0x54>)
 800083c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800083e:	4b11      	ldr	r3, [pc, #68]	@ (8000884 <MX_I2C2_Init+0x50>)
 8000840:	4a12      	ldr	r2, [pc, #72]	@ (800088c <MX_I2C2_Init+0x58>)
 8000842:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000844:	4b0f      	ldr	r3, [pc, #60]	@ (8000884 <MX_I2C2_Init+0x50>)
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800084a:	4b0e      	ldr	r3, [pc, #56]	@ (8000884 <MX_I2C2_Init+0x50>)
 800084c:	2200      	movs	r2, #0
 800084e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000850:	4b0c      	ldr	r3, [pc, #48]	@ (8000884 <MX_I2C2_Init+0x50>)
 8000852:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000856:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000858:	4b0a      	ldr	r3, [pc, #40]	@ (8000884 <MX_I2C2_Init+0x50>)
 800085a:	2200      	movs	r2, #0
 800085c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800085e:	4b09      	ldr	r3, [pc, #36]	@ (8000884 <MX_I2C2_Init+0x50>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000864:	4b07      	ldr	r3, [pc, #28]	@ (8000884 <MX_I2C2_Init+0x50>)
 8000866:	2200      	movs	r2, #0
 8000868:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800086a:	4b06      	ldr	r3, [pc, #24]	@ (8000884 <MX_I2C2_Init+0x50>)
 800086c:	2200      	movs	r2, #0
 800086e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000870:	4804      	ldr	r0, [pc, #16]	@ (8000884 <MX_I2C2_Init+0x50>)
 8000872:	f001 fd53 	bl	800231c <HAL_I2C_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_I2C2_Init+0x4c>
  {

    Error_Handler();
 800087c:	f000 f8fe 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000094 	.word	0x20000094
 8000888:	40005800 	.word	0x40005800
 800088c:	000186a0 	.word	0x000186a0

08000890 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000894:	4b11      	ldr	r3, [pc, #68]	@ (80008dc <MX_USART2_UART_Init+0x4c>)
 8000896:	4a12      	ldr	r2, [pc, #72]	@ (80008e0 <MX_USART2_UART_Init+0x50>)
 8000898:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800089a:	4b10      	ldr	r3, [pc, #64]	@ (80008dc <MX_USART2_UART_Init+0x4c>)
 800089c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	@ (80008dc <MX_USART2_UART_Init+0x4c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	@ (80008dc <MX_USART2_UART_Init+0x4c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	@ (80008dc <MX_USART2_UART_Init+0x4c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008b4:	4b09      	ldr	r3, [pc, #36]	@ (80008dc <MX_USART2_UART_Init+0x4c>)
 80008b6:	220c      	movs	r2, #12
 80008b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ba:	4b08      	ldr	r3, [pc, #32]	@ (80008dc <MX_USART2_UART_Init+0x4c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c0:	4b06      	ldr	r3, [pc, #24]	@ (80008dc <MX_USART2_UART_Init+0x4c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008c6:	4805      	ldr	r0, [pc, #20]	@ (80008dc <MX_USART2_UART_Init+0x4c>)
 80008c8:	f003 fdde 	bl	8004488 <HAL_UART_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008d2:	f000 f8d3 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	200000e8 	.word	0x200000e8
 80008e0:	40004400 	.word	0x40004400

080008e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000920 <MX_DMA_Init+0x3c>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	4a0b      	ldr	r2, [pc, #44]	@ (8000920 <MX_DMA_Init+0x3c>)
 80008f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80008f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fa:	4b09      	ldr	r3, [pc, #36]	@ (8000920 <MX_DMA_Init+0x3c>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000906:	2200      	movs	r2, #0
 8000908:	2105      	movs	r1, #5
 800090a:	2010      	movs	r0, #16
 800090c:	f000 ff14 	bl	8001738 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000910:	2010      	movs	r0, #16
 8000912:	f000 ff2d 	bl	8001770 <HAL_NVIC_EnableIRQ>

}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40023800 	.word	0x40023800

08000924 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	@ 0x28
 8000928:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092a:	f107 0314 	add.w	r3, r7, #20
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]
 8000938:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	613b      	str	r3, [r7, #16]
 800093e:	4b31      	ldr	r3, [pc, #196]	@ (8000a04 <MX_GPIO_Init+0xe0>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	4a30      	ldr	r2, [pc, #192]	@ (8000a04 <MX_GPIO_Init+0xe0>)
 8000944:	f043 0304 	orr.w	r3, r3, #4
 8000948:	6313      	str	r3, [r2, #48]	@ 0x30
 800094a:	4b2e      	ldr	r3, [pc, #184]	@ (8000a04 <MX_GPIO_Init+0xe0>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	f003 0304 	and.w	r3, r3, #4
 8000952:	613b      	str	r3, [r7, #16]
 8000954:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	4b2a      	ldr	r3, [pc, #168]	@ (8000a04 <MX_GPIO_Init+0xe0>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	4a29      	ldr	r2, [pc, #164]	@ (8000a04 <MX_GPIO_Init+0xe0>)
 8000960:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000964:	6313      	str	r3, [r2, #48]	@ 0x30
 8000966:	4b27      	ldr	r3, [pc, #156]	@ (8000a04 <MX_GPIO_Init+0xe0>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	60bb      	str	r3, [r7, #8]
 8000976:	4b23      	ldr	r3, [pc, #140]	@ (8000a04 <MX_GPIO_Init+0xe0>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	4a22      	ldr	r2, [pc, #136]	@ (8000a04 <MX_GPIO_Init+0xe0>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	6313      	str	r3, [r2, #48]	@ 0x30
 8000982:	4b20      	ldr	r3, [pc, #128]	@ (8000a04 <MX_GPIO_Init+0xe0>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	60bb      	str	r3, [r7, #8]
 800098c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	4b1c      	ldr	r3, [pc, #112]	@ (8000a04 <MX_GPIO_Init+0xe0>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	4a1b      	ldr	r2, [pc, #108]	@ (8000a04 <MX_GPIO_Init+0xe0>)
 8000998:	f043 0302 	orr.w	r3, r3, #2
 800099c:	6313      	str	r3, [r2, #48]	@ 0x30
 800099e:	4b19      	ldr	r3, [pc, #100]	@ (8000a04 <MX_GPIO_Init+0xe0>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	f003 0302 	and.w	r3, r3, #2
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2120      	movs	r1, #32
 80009ae:	4816      	ldr	r0, [pc, #88]	@ (8000a08 <MX_GPIO_Init+0xe4>)
 80009b0:	f001 fc82 	bl	80022b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009ba:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80009be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	4619      	mov	r1, r3
 80009ca:	4810      	ldr	r0, [pc, #64]	@ (8000a0c <MX_GPIO_Init+0xe8>)
 80009cc:	f001 fae0 	bl	8001f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80009d0:	2320      	movs	r3, #32
 80009d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d4:	2301      	movs	r3, #1
 80009d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009dc:	2300      	movs	r3, #0
 80009de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	4619      	mov	r1, r3
 80009e6:	4808      	ldr	r0, [pc, #32]	@ (8000a08 <MX_GPIO_Init+0xe4>)
 80009e8:	f001 fad2 	bl	8001f90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80009ec:	2200      	movs	r2, #0
 80009ee:	2105      	movs	r1, #5
 80009f0:	2028      	movs	r0, #40	@ 0x28
 80009f2:	f000 fea1 	bl	8001738 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009f6:	2028      	movs	r0, #40	@ 0x28
 80009f8:	f000 feba 	bl	8001770 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009fc:	bf00      	nop
 80009fe:	3728      	adds	r7, #40	@ 0x28
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40020000 	.word	0x40020000
 8000a0c:	40020800 	.word	0x40020800

08000a10 <heartbeatTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_heartbeatTask */
void heartbeatTask(void *argument)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
	  //pca9685_init(&handlePCA);
	  //pca9685_set_pwm_frequency(&handlePCA, 50.0f);
	  //for (int i = 0; i < 16; ++i)
		//writeServoVal(i, 90.);

	  osDelay(100);
 8000a18:	2064      	movs	r0, #100	@ 0x64
 8000a1a:	f005 f83d 	bl	8005a98 <osDelay>
 8000a1e:	e7fb      	b.n	8000a18 <heartbeatTask+0x8>

08000a20 <RX_decode_msg>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RX_decode_msg */
void RX_decode_msg(void *argument)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
	uint8_t rxStatus;
	uint8_t byte;

  for(;;)
  {
	rxStatus = xQueueReceive(RX_queueHandle, &byte, 50);
 8000a28:	4b0a      	ldr	r3, [pc, #40]	@ (8000a54 <RX_decode_msg+0x34>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f107 010e 	add.w	r1, r7, #14
 8000a30:	2232      	movs	r2, #50	@ 0x32
 8000a32:	4618      	mov	r0, r3
 8000a34:	f005 fc8c 	bl	8006350 <xQueueReceive>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	73fb      	strb	r3, [r7, #15]
    if (rxStatus != 0)
 8000a3c:	7bfb      	ldrb	r3, [r7, #15]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d003      	beq.n	8000a4a <RX_decode_msg+0x2a>
    {
    	// decode byte
    	TransmitByte(byte);
 8000a42:	7bbb      	ldrb	r3, [r7, #14]
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff fdf1 	bl	800062c <TransmitByte>
    }
	osDelay(1);
 8000a4a:	2001      	movs	r0, #1
 8000a4c:	f005 f824 	bl	8005a98 <osDelay>
	rxStatus = xQueueReceive(RX_queueHandle, &byte, 50);
 8000a50:	e7ea      	b.n	8000a28 <RX_decode_msg+0x8>
 8000a52:	bf00      	nop
 8000a54:	20000198 	.word	0x20000198

08000a58 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a04      	ldr	r2, [pc, #16]	@ (8000a78 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d101      	bne.n	8000a6e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a6a:	f000 fd69 	bl	8001540 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40001000 	.word	0x40001000

08000a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a80:	b672      	cpsid	i
}
 8000a82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a84:	bf00      	nop
 8000a86:	e7fd      	b.n	8000a84 <Error_Handler+0x8>

08000a88 <pca9685_write_u8>:
		3248, 3284, 3320, 3356, 3393, 3430, 3467, 3504, 3542, 3579, 3617, 3656, 3694, 3733, 3773, 3812, 3852, 3892,
		3932, 3973, 4013, 4055, 4095
};

static bool pca9685_write_u8(pca9685_handle_t *handle, uint8_t address, uint8_t value)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af02      	add	r7, sp, #8
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	460b      	mov	r3, r1
 8000a92:	70fb      	strb	r3, [r7, #3]
 8000a94:	4613      	mov	r3, r2
 8000a96:	70bb      	strb	r3, [r7, #2]
	uint8_t data[] = {address, value};
 8000a98:	78fb      	ldrb	r3, [r7, #3]
 8000a9a:	733b      	strb	r3, [r7, #12]
 8000a9c:	78bb      	ldrb	r3, [r7, #2]
 8000a9e:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address, data, 2, PCA9685_I2C_TIMEOUT) == HAL_OK;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6818      	ldr	r0, [r3, #0]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	8899      	ldrh	r1, [r3, #4]
 8000aa8:	f107 020c 	add.w	r2, r7, #12
 8000aac:	2301      	movs	r3, #1
 8000aae:	9300      	str	r3, [sp, #0]
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	f001 fd77 	bl	80025a4 <HAL_I2C_Master_Transmit>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	bf0c      	ite	eq
 8000abc:	2301      	moveq	r3, #1
 8000abe:	2300      	movne	r3, #0
 8000ac0:	b2db      	uxtb	r3, r3
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3710      	adds	r7, #16
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}

08000aca <pca9685_write_data>:

static bool pca9685_write_data(pca9685_handle_t *handle, uint8_t address, uint8_t *data, size_t length)
{
 8000aca:	b590      	push	{r4, r7, lr}
 8000acc:	b089      	sub	sp, #36	@ 0x24
 8000ace:	af02      	add	r7, sp, #8
 8000ad0:	60f8      	str	r0, [r7, #12]
 8000ad2:	607a      	str	r2, [r7, #4]
 8000ad4:	603b      	str	r3, [r7, #0]
 8000ad6:	460b      	mov	r3, r1
 8000ad8:	72fb      	strb	r3, [r7, #11]
    if (length == 0 || length > 4) {
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d002      	beq.n	8000ae6 <pca9685_write_data+0x1c>
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	2b04      	cmp	r3, #4
 8000ae4:	d901      	bls.n	8000aea <pca9685_write_data+0x20>
        return false;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e01d      	b.n	8000b26 <pca9685_write_data+0x5c>
    }

    uint8_t transfer[5];
    transfer[0] = address;
 8000aea:	7afb      	ldrb	r3, [r7, #11]
 8000aec:	743b      	strb	r3, [r7, #16]

    memcpy(&transfer[1], data, length);
 8000aee:	f107 0310 	add.w	r3, r7, #16
 8000af2:	3301      	adds	r3, #1
 8000af4:	683a      	ldr	r2, [r7, #0]
 8000af6:	6879      	ldr	r1, [r7, #4]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f007 fef2 	bl	80088e2 <memcpy>

    return HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address, transfer, length + 1, PCA9685_I2C_TIMEOUT) == HAL_OK;
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	6818      	ldr	r0, [r3, #0]
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	8899      	ldrh	r1, [r3, #4]
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	b29b      	uxth	r3, r3
 8000b0e:	f107 0210 	add.w	r2, r7, #16
 8000b12:	2401      	movs	r4, #1
 8000b14:	9400      	str	r4, [sp, #0]
 8000b16:	f001 fd45 	bl	80025a4 <HAL_I2C_Master_Transmit>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	bf0c      	ite	eq
 8000b20:	2301      	moveq	r3, #1
 8000b22:	2300      	movne	r3, #0
 8000b24:	b2db      	uxtb	r3, r3
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	371c      	adds	r7, #28
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd90      	pop	{r4, r7, pc}

08000b2e <pca9685_read_u8>:

static bool pca9685_read_u8(pca9685_handle_t *handle, uint8_t address, uint8_t *dest)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b086      	sub	sp, #24
 8000b32:	af02      	add	r7, sp, #8
 8000b34:	60f8      	str	r0, [r7, #12]
 8000b36:	460b      	mov	r3, r1
 8000b38:	607a      	str	r2, [r7, #4]
 8000b3a:	72fb      	strb	r3, [r7, #11]
	if (HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address, &address, 1, PCA9685_I2C_TIMEOUT) != HAL_OK) {
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	6818      	ldr	r0, [r3, #0]
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	8899      	ldrh	r1, [r3, #4]
 8000b44:	f107 020b 	add.w	r2, r7, #11
 8000b48:	2301      	movs	r3, #1
 8000b4a:	9300      	str	r3, [sp, #0]
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	f001 fd29 	bl	80025a4 <HAL_I2C_Master_Transmit>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <pca9685_read_u8+0x2e>
		return false;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	e00f      	b.n	8000b7c <pca9685_read_u8+0x4e>
	}

	return HAL_I2C_Master_Receive(handle->i2c_handle, handle->device_address, dest, 1, PCA9685_I2C_TIMEOUT) == HAL_OK;
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	6818      	ldr	r0, [r3, #0]
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	8899      	ldrh	r1, [r3, #4]
 8000b64:	2301      	movs	r3, #1
 8000b66:	9300      	str	r3, [sp, #0]
 8000b68:	2301      	movs	r3, #1
 8000b6a:	687a      	ldr	r2, [r7, #4]
 8000b6c:	f001 fe18 	bl	80027a0 <HAL_I2C_Master_Receive>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	bf0c      	ite	eq
 8000b76:	2301      	moveq	r3, #1
 8000b78:	2300      	movne	r3, #0
 8000b7a:	b2db      	uxtb	r3, r3
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3710      	adds	r7, #16
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <pca9685_init>:

bool pca9685_init(pca9685_handle_t *handle)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
	assert(handle->i2c_handle != NULL);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d105      	bne.n	8000ba0 <pca9685_init+0x1c>
 8000b94:	4b31      	ldr	r3, [pc, #196]	@ (8000c5c <pca9685_init+0xd8>)
 8000b96:	4a32      	ldr	r2, [pc, #200]	@ (8000c60 <pca9685_init+0xdc>)
 8000b98:	2155      	movs	r1, #85	@ 0x55
 8000b9a:	4832      	ldr	r0, [pc, #200]	@ (8000c64 <pca9685_init+0xe0>)
 8000b9c:	f007 fcf0 	bl	8008580 <__assert_func>

	bool success = true;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	73bb      	strb	r3, [r7, #14]

	// Set mode registers to default values (Auto-Increment, Sleep, Open-Drain).
	uint8_t mode1_reg_default_value = 0b00110000u;
 8000ba4:	2330      	movs	r3, #48	@ 0x30
 8000ba6:	737b      	strb	r3, [r7, #13]
	uint8_t mode2_reg_default_value = 0b00000000u;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	73fb      	strb	r3, [r7, #15]

	if (handle->inverted) {
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	799b      	ldrb	r3, [r3, #6]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d003      	beq.n	8000bbc <pca9685_init+0x38>
		mode2_reg_default_value |= 0b00010000u;
 8000bb4:	7bfb      	ldrb	r3, [r7, #15]
 8000bb6:	f043 0310 	orr.w	r3, r3, #16
 8000bba:	73fb      	strb	r3, [r7, #15]
	}

	success &= pca9685_write_u8(handle, PCA9685_REGISTER_MODE1, mode1_reg_default_value);
 8000bbc:	7b7b      	ldrb	r3, [r7, #13]
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f7ff ff60 	bl	8000a88 <pca9685_write_u8>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	461a      	mov	r2, r3
 8000bcc:	7bbb      	ldrb	r3, [r7, #14]
 8000bce:	4013      	ands	r3, r2
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	bf14      	ite	ne
 8000bd4:	2301      	movne	r3, #1
 8000bd6:	2300      	moveq	r3, #0
 8000bd8:	73bb      	strb	r3, [r7, #14]
	success &= pca9685_write_u8(handle, PCA9685_REGISTER_MODE2, mode2_reg_default_value);
 8000bda:	7bfb      	ldrb	r3, [r7, #15]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	2101      	movs	r1, #1
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f7ff ff51 	bl	8000a88 <pca9685_write_u8>
 8000be6:	4603      	mov	r3, r0
 8000be8:	461a      	mov	r2, r3
 8000bea:	7bbb      	ldrb	r3, [r7, #14]
 8000bec:	4013      	ands	r3, r2
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	bf14      	ite	ne
 8000bf2:	2301      	movne	r3, #1
 8000bf4:	2300      	moveq	r3, #0
 8000bf6:	73bb      	strb	r3, [r7, #14]

    // Turn all channels off to begin with.
    uint8_t data[4] = { 0x00, 0x00, 0x00, 0x10 };
 8000bf8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000bfc:	60bb      	str	r3, [r7, #8]
    success &= pca9685_write_data(handle, PCA9685_REGISTER_ALL_LED_ON_L, data, 4);
 8000bfe:	f107 0208 	add.w	r2, r7, #8
 8000c02:	2304      	movs	r3, #4
 8000c04:	21fa      	movs	r1, #250	@ 0xfa
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	f7ff ff5f 	bl	8000aca <pca9685_write_data>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	461a      	mov	r2, r3
 8000c10:	7bbb      	ldrb	r3, [r7, #14]
 8000c12:	4013      	ands	r3, r2
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	bf14      	ite	ne
 8000c18:	2301      	movne	r3, #1
 8000c1a:	2300      	moveq	r3, #0
 8000c1c:	73bb      	strb	r3, [r7, #14]

	success &= pca9685_set_pwm_frequency(handle, 1000);
 8000c1e:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8000c68 <pca9685_init+0xe4>
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	f000 f8d2 	bl	8000dcc <pca9685_set_pwm_frequency>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	7bbb      	ldrb	r3, [r7, #14]
 8000c2e:	4013      	ands	r3, r2
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	bf14      	ite	ne
 8000c34:	2301      	movne	r3, #1
 8000c36:	2300      	moveq	r3, #0
 8000c38:	73bb      	strb	r3, [r7, #14]
	success &= pca9685_wakeup(handle);
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f000 f870 	bl	8000d20 <pca9685_wakeup>
 8000c40:	4603      	mov	r3, r0
 8000c42:	461a      	mov	r2, r3
 8000c44:	7bbb      	ldrb	r3, [r7, #14]
 8000c46:	4013      	ands	r3, r2
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	bf14      	ite	ne
 8000c4c:	2301      	movne	r3, #1
 8000c4e:	2300      	moveq	r3, #0
 8000c50:	73bb      	strb	r3, [r7, #14]

	return success;
 8000c52:	7bbb      	ldrb	r3, [r7, #14]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3710      	adds	r7, #16
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	08009508 	.word	0x08009508
 8000c60:	08009634 	.word	0x08009634
 8000c64:	08009524 	.word	0x08009524
 8000c68:	447a0000 	.word	0x447a0000

08000c6c <pca9685_is_sleeping>:

bool pca9685_is_sleeping(pca9685_handle_t *handle, bool *sleeping)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	6039      	str	r1, [r7, #0]
	bool success = true;
 8000c76:	2301      	movs	r3, #1
 8000c78:	73fb      	strb	r3, [r7, #15]

	// Read the current state of the mode 1 register.
	uint8_t mode1_reg;
	success &= pca9685_read_u8(handle, PCA9685_REGISTER_MODE1, &mode1_reg);
 8000c7a:	f107 030e 	add.w	r3, r7, #14
 8000c7e:	461a      	mov	r2, r3
 8000c80:	2100      	movs	r1, #0
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f7ff ff53 	bl	8000b2e <pca9685_read_u8>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	7bfb      	ldrb	r3, [r7, #15]
 8000c8e:	4013      	ands	r3, r2
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	bf14      	ite	ne
 8000c94:	2301      	movne	r3, #1
 8000c96:	2300      	moveq	r3, #0
 8000c98:	73fb      	strb	r3, [r7, #15]

	// Check if the sleeping bit is set.
	*sleeping = PCA9685_READ_BIT_MASK(mode1_reg, PCA9685_REGISTER_MODE1_SLEEP);
 8000c9a:	7bbb      	ldrb	r3, [r7, #14]
 8000c9c:	f003 0310 	and.w	r3, r3, #16
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	bf14      	ite	ne
 8000ca4:	2301      	movne	r3, #1
 8000ca6:	2300      	moveq	r3, #0
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	701a      	strb	r2, [r3, #0]

	return success;
 8000cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3710      	adds	r7, #16
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <pca9685_sleep>:

bool pca9685_sleep(pca9685_handle_t *handle)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
	bool success = true;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	73fb      	strb	r3, [r7, #15]

	// Read the current state of the mode 1 register.
	uint8_t mode1_reg;
	success &= pca9685_read_u8(handle, PCA9685_REGISTER_MODE1, &mode1_reg);
 8000cc4:	f107 030e 	add.w	r3, r7, #14
 8000cc8:	461a      	mov	r2, r3
 8000cca:	2100      	movs	r1, #0
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f7ff ff2e 	bl	8000b2e <pca9685_read_u8>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	7bfb      	ldrb	r3, [r7, #15]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	bf14      	ite	ne
 8000cde:	2301      	movne	r3, #1
 8000ce0:	2300      	moveq	r3, #0
 8000ce2:	73fb      	strb	r3, [r7, #15]

	// Don't write the restart bit back and set the sleep bit.
	PCA9685_CLEAR_BIT_MASK(mode1_reg, PCA9685_REGISTER_MODE1_RESTART);
 8000ce4:	7bbb      	ldrb	r3, [r7, #14]
 8000ce6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	73bb      	strb	r3, [r7, #14]
	PCA9685_SET_BIT_MASK(mode1_reg, PCA9685_REGISTER_MODE1_SLEEP);
 8000cee:	7bbb      	ldrb	r3, [r7, #14]
 8000cf0:	f043 0310 	orr.w	r3, r3, #16
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	73bb      	strb	r3, [r7, #14]
	success &= pca9685_write_u8(handle, PCA9685_REGISTER_MODE1, mode1_reg);
 8000cf8:	7bbb      	ldrb	r3, [r7, #14]
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	6878      	ldr	r0, [r7, #4]
 8000d00:	f7ff fec2 	bl	8000a88 <pca9685_write_u8>
 8000d04:	4603      	mov	r3, r0
 8000d06:	461a      	mov	r2, r3
 8000d08:	7bfb      	ldrb	r3, [r7, #15]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	bf14      	ite	ne
 8000d10:	2301      	movne	r3, #1
 8000d12:	2300      	moveq	r3, #0
 8000d14:	73fb      	strb	r3, [r7, #15]

	return success;
 8000d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3710      	adds	r7, #16
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <pca9685_wakeup>:

bool pca9685_wakeup(pca9685_handle_t *handle)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
	bool success = true;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	73fb      	strb	r3, [r7, #15]

	// Read the current state of the mode 1 register.
	uint8_t mode1_reg;
	success &= pca9685_read_u8(handle, PCA9685_REGISTER_MODE1, &mode1_reg);
 8000d2c:	f107 030d 	add.w	r3, r7, #13
 8000d30:	461a      	mov	r2, r3
 8000d32:	2100      	movs	r1, #0
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f7ff fefa 	bl	8000b2e <pca9685_read_u8>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	7bfb      	ldrb	r3, [r7, #15]
 8000d40:	4013      	ands	r3, r2
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	bf14      	ite	ne
 8000d46:	2301      	movne	r3, #1
 8000d48:	2300      	moveq	r3, #0
 8000d4a:	73fb      	strb	r3, [r7, #15]

	bool restart_required = PCA9685_READ_BIT_MASK(mode1_reg, PCA9685_REGISTER_MODE1_RESTART);
 8000d4c:	7b7b      	ldrb	r3, [r7, #13]
 8000d4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	bf14      	ite	ne
 8000d56:	2301      	movne	r3, #1
 8000d58:	2300      	moveq	r3, #0
 8000d5a:	73bb      	strb	r3, [r7, #14]

	// Clear the restart bit for now and clear the sleep bit.
	PCA9685_CLEAR_BIT_MASK(mode1_reg, PCA9685_REGISTER_MODE1_RESTART);
 8000d5c:	7b7b      	ldrb	r3, [r7, #13]
 8000d5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	737b      	strb	r3, [r7, #13]
	PCA9685_CLEAR_BIT_MASK(mode1_reg, PCA9685_REGISTER_MODE1_SLEEP);
 8000d66:	7b7b      	ldrb	r3, [r7, #13]
 8000d68:	f023 0310 	bic.w	r3, r3, #16
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	737b      	strb	r3, [r7, #13]
	success &= pca9685_write_u8(handle, PCA9685_REGISTER_MODE1, mode1_reg);
 8000d70:	7b7b      	ldrb	r3, [r7, #13]
 8000d72:	461a      	mov	r2, r3
 8000d74:	2100      	movs	r1, #0
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f7ff fe86 	bl	8000a88 <pca9685_write_u8>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	461a      	mov	r2, r3
 8000d80:	7bfb      	ldrb	r3, [r7, #15]
 8000d82:	4013      	ands	r3, r2
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	bf14      	ite	ne
 8000d88:	2301      	movne	r3, #1
 8000d8a:	2300      	moveq	r3, #0
 8000d8c:	73fb      	strb	r3, [r7, #15]

	if (restart_required) {
 8000d8e:	7bbb      	ldrb	r3, [r7, #14]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d016      	beq.n	8000dc2 <pca9685_wakeup+0xa2>

		// Oscillator requires at least 500us to stabilise, so wait 1ms.
		HAL_Delay(1);
 8000d94:	2001      	movs	r0, #1
 8000d96:	f000 fbf3 	bl	8001580 <HAL_Delay>

		PCA9685_SET_BIT_MASK(mode1_reg, PCA9685_REGISTER_MODE1_RESTART);
 8000d9a:	7b7b      	ldrb	r3, [r7, #13]
 8000d9c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	737b      	strb	r3, [r7, #13]
		success &= pca9685_write_u8(handle, PCA9685_REGISTER_MODE1, mode1_reg);
 8000da4:	7b7b      	ldrb	r3, [r7, #13]
 8000da6:	461a      	mov	r2, r3
 8000da8:	2100      	movs	r1, #0
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f7ff fe6c 	bl	8000a88 <pca9685_write_u8>
 8000db0:	4603      	mov	r3, r0
 8000db2:	461a      	mov	r2, r3
 8000db4:	7bfb      	ldrb	r3, [r7, #15]
 8000db6:	4013      	ands	r3, r2
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	bf14      	ite	ne
 8000dbc:	2301      	movne	r3, #1
 8000dbe:	2300      	moveq	r3, #0
 8000dc0:	73fb      	strb	r3, [r7, #15]
	}

	return success;
 8000dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <pca9685_set_pwm_frequency>:

bool pca9685_set_pwm_frequency(pca9685_handle_t *handle, float frequency)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	ed87 0a02 	vstr	s0, [r7, #8]
	assert(frequency >= 24);
 8000dd8:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ddc:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 8000de0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000de8:	da05      	bge.n	8000df6 <pca9685_set_pwm_frequency+0x2a>
 8000dea:	4b3b      	ldr	r3, [pc, #236]	@ (8000ed8 <pca9685_set_pwm_frequency+0x10c>)
 8000dec:	4a3b      	ldr	r2, [pc, #236]	@ (8000edc <pca9685_set_pwm_frequency+0x110>)
 8000dee:	21a9      	movs	r1, #169	@ 0xa9
 8000df0:	483b      	ldr	r0, [pc, #236]	@ (8000ee0 <pca9685_set_pwm_frequency+0x114>)
 8000df2:	f007 fbc5 	bl	8008580 <__assert_func>
	assert(frequency <= 1526);
 8000df6:	edd7 7a02 	vldr	s15, [r7, #8]
 8000dfa:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8000ee4 <pca9685_set_pwm_frequency+0x118>
 8000dfe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e06:	d905      	bls.n	8000e14 <pca9685_set_pwm_frequency+0x48>
 8000e08:	4b37      	ldr	r3, [pc, #220]	@ (8000ee8 <pca9685_set_pwm_frequency+0x11c>)
 8000e0a:	4a34      	ldr	r2, [pc, #208]	@ (8000edc <pca9685_set_pwm_frequency+0x110>)
 8000e0c:	21aa      	movs	r1, #170	@ 0xaa
 8000e0e:	4834      	ldr	r0, [pc, #208]	@ (8000ee0 <pca9685_set_pwm_frequency+0x114>)
 8000e10:	f007 fbb6 	bl	8008580 <__assert_func>

	bool success = true;
 8000e14:	2301      	movs	r3, #1
 8000e16:	75fb      	strb	r3, [r7, #23]

	// Calculate the prescaler value (see datasheet page 25)
	uint8_t prescaler = (uint8_t)roundf(25000000.0f / (4096 * frequency)) - 1;
 8000e18:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e1c:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8000eec <pca9685_set_pwm_frequency+0x120>
 8000e20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e24:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8000ef0 <pca9685_set_pwm_frequency+0x124>
 8000e28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000e2c:	eeb0 0a47 	vmov.f32	s0, s14
 8000e30:	f007 fb82 	bl	8008538 <roundf>
 8000e34:	eef0 7a40 	vmov.f32	s15, s0
 8000e38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e3c:	edc7 7a01 	vstr	s15, [r7, #4]
 8000e40:	793b      	ldrb	r3, [r7, #4]
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	3b01      	subs	r3, #1
 8000e46:	75bb      	strb	r3, [r7, #22]

	bool already_sleeping;
	success &= pca9685_is_sleeping(handle, &already_sleeping);
 8000e48:	f107 0315 	add.w	r3, r7, #21
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	68f8      	ldr	r0, [r7, #12]
 8000e50:	f7ff ff0c 	bl	8000c6c <pca9685_is_sleeping>
 8000e54:	4603      	mov	r3, r0
 8000e56:	461a      	mov	r2, r3
 8000e58:	7dfb      	ldrb	r3, [r7, #23]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	bf14      	ite	ne
 8000e60:	2301      	movne	r3, #1
 8000e62:	2300      	moveq	r3, #0
 8000e64:	75fb      	strb	r3, [r7, #23]

	// The prescaler can only be changed in sleep mode.
	if (!already_sleeping) {
 8000e66:	7d7b      	ldrb	r3, [r7, #21]
 8000e68:	f083 0301 	eor.w	r3, r3, #1
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d00b      	beq.n	8000e8a <pca9685_set_pwm_frequency+0xbe>
		success &= pca9685_sleep(handle);
 8000e72:	68f8      	ldr	r0, [r7, #12]
 8000e74:	f7ff ff20 	bl	8000cb8 <pca9685_sleep>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	7dfb      	ldrb	r3, [r7, #23]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	bf14      	ite	ne
 8000e84:	2301      	movne	r3, #1
 8000e86:	2300      	moveq	r3, #0
 8000e88:	75fb      	strb	r3, [r7, #23]
	}

	// Write the new prescaler value.
	success &= pca9685_write_u8(handle, PCA9685_REGISTER_PRESCALER, prescaler);
 8000e8a:	7dbb      	ldrb	r3, [r7, #22]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	21fe      	movs	r1, #254	@ 0xfe
 8000e90:	68f8      	ldr	r0, [r7, #12]
 8000e92:	f7ff fdf9 	bl	8000a88 <pca9685_write_u8>
 8000e96:	4603      	mov	r3, r0
 8000e98:	461a      	mov	r2, r3
 8000e9a:	7dfb      	ldrb	r3, [r7, #23]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	bf14      	ite	ne
 8000ea2:	2301      	movne	r3, #1
 8000ea4:	2300      	moveq	r3, #0
 8000ea6:	75fb      	strb	r3, [r7, #23]

	// If the device wasn't sleeping, return from sleep mode.
	if (!already_sleeping) {
 8000ea8:	7d7b      	ldrb	r3, [r7, #21]
 8000eaa:	f083 0301 	eor.w	r3, r3, #1
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d00b      	beq.n	8000ecc <pca9685_set_pwm_frequency+0x100>
		success &= pca9685_wakeup(handle);
 8000eb4:	68f8      	ldr	r0, [r7, #12]
 8000eb6:	f7ff ff33 	bl	8000d20 <pca9685_wakeup>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	7dfb      	ldrb	r3, [r7, #23]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	bf14      	ite	ne
 8000ec6:	2301      	movne	r3, #1
 8000ec8:	2300      	moveq	r3, #0
 8000eca:	75fb      	strb	r3, [r7, #23]
	}

	return success;
 8000ecc:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3718      	adds	r7, #24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	0800953c 	.word	0x0800953c
 8000edc:	08009644 	.word	0x08009644
 8000ee0:	08009524 	.word	0x08009524
 8000ee4:	44bec000 	.word	0x44bec000
 8000ee8:	0800954c 	.word	0x0800954c
 8000eec:	45800000 	.word	0x45800000
 8000ef0:	4bbebc20 	.word	0x4bbebc20

08000ef4 <pca9685_set_channel_pwm_times>:

bool pca9685_set_channel_pwm_times(pca9685_handle_t *handle, unsigned channel, unsigned on_time, unsigned off_time)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
 8000f00:	603b      	str	r3, [r7, #0]
	assert(channel >= 0);
	assert(channel < 16);
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	2b0f      	cmp	r3, #15
 8000f06:	d905      	bls.n	8000f14 <pca9685_set_channel_pwm_times+0x20>
 8000f08:	4b1c      	ldr	r3, [pc, #112]	@ (8000f7c <pca9685_set_channel_pwm_times+0x88>)
 8000f0a:	4a1d      	ldr	r2, [pc, #116]	@ (8000f80 <pca9685_set_channel_pwm_times+0x8c>)
 8000f0c:	21c7      	movs	r1, #199	@ 0xc7
 8000f0e:	481d      	ldr	r0, [pc, #116]	@ (8000f84 <pca9685_set_channel_pwm_times+0x90>)
 8000f10:	f007 fb36 	bl	8008580 <__assert_func>

	assert(on_time >= 0);
	assert(on_time <= 4096);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000f1a:	d905      	bls.n	8000f28 <pca9685_set_channel_pwm_times+0x34>
 8000f1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000f88 <pca9685_set_channel_pwm_times+0x94>)
 8000f1e:	4a18      	ldr	r2, [pc, #96]	@ (8000f80 <pca9685_set_channel_pwm_times+0x8c>)
 8000f20:	21ca      	movs	r1, #202	@ 0xca
 8000f22:	4818      	ldr	r0, [pc, #96]	@ (8000f84 <pca9685_set_channel_pwm_times+0x90>)
 8000f24:	f007 fb2c 	bl	8008580 <__assert_func>

	assert(off_time >= 0);
	assert(off_time <= 4096);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000f2e:	d905      	bls.n	8000f3c <pca9685_set_channel_pwm_times+0x48>
 8000f30:	4b16      	ldr	r3, [pc, #88]	@ (8000f8c <pca9685_set_channel_pwm_times+0x98>)
 8000f32:	4a13      	ldr	r2, [pc, #76]	@ (8000f80 <pca9685_set_channel_pwm_times+0x8c>)
 8000f34:	21cd      	movs	r1, #205	@ 0xcd
 8000f36:	4813      	ldr	r0, [pc, #76]	@ (8000f84 <pca9685_set_channel_pwm_times+0x90>)
 8000f38:	f007 fb22 	bl	8008580 <__assert_func>

	uint8_t data[4] = { on_time, on_time >> 8u, off_time, off_time >> 8u };
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	753b      	strb	r3, [r7, #20]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	0a1b      	lsrs	r3, r3, #8
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	757b      	strb	r3, [r7, #21]
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	75bb      	strb	r3, [r7, #22]
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	0a1b      	lsrs	r3, r3, #8
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	75fb      	strb	r3, [r7, #23]
	return pca9685_write_data(handle, PCA9685_REGISTER_LED0_ON_L + channel * 4, data, 4);
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	3306      	adds	r3, #6
 8000f62:	b2d9      	uxtb	r1, r3
 8000f64:	f107 0214 	add.w	r2, r7, #20
 8000f68:	2304      	movs	r3, #4
 8000f6a:	68f8      	ldr	r0, [r7, #12]
 8000f6c:	f7ff fdad 	bl	8000aca <pca9685_write_data>
 8000f70:	4603      	mov	r3, r0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3718      	adds	r7, #24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	08009560 	.word	0x08009560
 8000f80:	08009660 	.word	0x08009660
 8000f84:	08009524 	.word	0x08009524
 8000f88:	08009570 	.word	0x08009570
 8000f8c:	08009580 	.word	0x08009580

08000f90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	607b      	str	r3, [r7, #4]
 8000f9a:	4b12      	ldr	r3, [pc, #72]	@ (8000fe4 <HAL_MspInit+0x54>)
 8000f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f9e:	4a11      	ldr	r2, [pc, #68]	@ (8000fe4 <HAL_MspInit+0x54>)
 8000fa0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fa4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fa6:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe4 <HAL_MspInit+0x54>)
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000faa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	603b      	str	r3, [r7, #0]
 8000fb6:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe4 <HAL_MspInit+0x54>)
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fba:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe4 <HAL_MspInit+0x54>)
 8000fbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fc2:	4b08      	ldr	r3, [pc, #32]	@ (8000fe4 <HAL_MspInit+0x54>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fca:	603b      	str	r3, [r7, #0]
 8000fcc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	210f      	movs	r1, #15
 8000fd2:	f06f 0001 	mvn.w	r0, #1
 8000fd6:	f000 fbaf 	bl	8001738 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40023800 	.word	0x40023800

08000fe8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08a      	sub	sp, #40	@ 0x28
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a19      	ldr	r2, [pc, #100]	@ (800106c <HAL_I2C_MspInit+0x84>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d12c      	bne.n	8001064 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]
 800100e:	4b18      	ldr	r3, [pc, #96]	@ (8001070 <HAL_I2C_MspInit+0x88>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	4a17      	ldr	r2, [pc, #92]	@ (8001070 <HAL_I2C_MspInit+0x88>)
 8001014:	f043 0302 	orr.w	r3, r3, #2
 8001018:	6313      	str	r3, [r2, #48]	@ 0x30
 800101a:	4b15      	ldr	r3, [pc, #84]	@ (8001070 <HAL_I2C_MspInit+0x88>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8001026:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 800102a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800102c:	2312      	movs	r3, #18
 800102e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001034:	2303      	movs	r3, #3
 8001036:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001038:	2304      	movs	r3, #4
 800103a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	4619      	mov	r1, r3
 8001042:	480c      	ldr	r0, [pc, #48]	@ (8001074 <HAL_I2C_MspInit+0x8c>)
 8001044:	f000 ffa4 	bl	8001f90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001048:	2300      	movs	r3, #0
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	4b08      	ldr	r3, [pc, #32]	@ (8001070 <HAL_I2C_MspInit+0x88>)
 800104e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001050:	4a07      	ldr	r2, [pc, #28]	@ (8001070 <HAL_I2C_MspInit+0x88>)
 8001052:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001056:	6413      	str	r3, [r2, #64]	@ 0x40
 8001058:	4b05      	ldr	r3, [pc, #20]	@ (8001070 <HAL_I2C_MspInit+0x88>)
 800105a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001064:	bf00      	nop
 8001066:	3728      	adds	r7, #40	@ 0x28
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40005800 	.word	0x40005800
 8001070:	40023800 	.word	0x40023800
 8001074:	40020400 	.word	0x40020400

08001078 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08a      	sub	sp, #40	@ 0x28
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a34      	ldr	r2, [pc, #208]	@ (8001168 <HAL_UART_MspInit+0xf0>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d162      	bne.n	8001160 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	613b      	str	r3, [r7, #16]
 800109e:	4b33      	ldr	r3, [pc, #204]	@ (800116c <HAL_UART_MspInit+0xf4>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a2:	4a32      	ldr	r2, [pc, #200]	@ (800116c <HAL_UART_MspInit+0xf4>)
 80010a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80010aa:	4b30      	ldr	r3, [pc, #192]	@ (800116c <HAL_UART_MspInit+0xf4>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	4b2c      	ldr	r3, [pc, #176]	@ (800116c <HAL_UART_MspInit+0xf4>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010be:	4a2b      	ldr	r2, [pc, #172]	@ (800116c <HAL_UART_MspInit+0xf4>)
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c6:	4b29      	ldr	r3, [pc, #164]	@ (800116c <HAL_UART_MspInit+0xf4>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010d2:	230c      	movs	r3, #12
 80010d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d6:	2302      	movs	r3, #2
 80010d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010de:	2303      	movs	r3, #3
 80010e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010e2:	2307      	movs	r3, #7
 80010e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e6:	f107 0314 	add.w	r3, r7, #20
 80010ea:	4619      	mov	r1, r3
 80010ec:	4820      	ldr	r0, [pc, #128]	@ (8001170 <HAL_UART_MspInit+0xf8>)
 80010ee:	f000 ff4f 	bl	8001f90 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80010f2:	4b20      	ldr	r3, [pc, #128]	@ (8001174 <HAL_UART_MspInit+0xfc>)
 80010f4:	4a20      	ldr	r2, [pc, #128]	@ (8001178 <HAL_UART_MspInit+0x100>)
 80010f6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80010f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001174 <HAL_UART_MspInit+0xfc>)
 80010fa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80010fe:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001100:	4b1c      	ldr	r3, [pc, #112]	@ (8001174 <HAL_UART_MspInit+0xfc>)
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001106:	4b1b      	ldr	r3, [pc, #108]	@ (8001174 <HAL_UART_MspInit+0xfc>)
 8001108:	2200      	movs	r2, #0
 800110a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800110c:	4b19      	ldr	r3, [pc, #100]	@ (8001174 <HAL_UART_MspInit+0xfc>)
 800110e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001112:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001114:	4b17      	ldr	r3, [pc, #92]	@ (8001174 <HAL_UART_MspInit+0xfc>)
 8001116:	2200      	movs	r2, #0
 8001118:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800111a:	4b16      	ldr	r3, [pc, #88]	@ (8001174 <HAL_UART_MspInit+0xfc>)
 800111c:	2200      	movs	r2, #0
 800111e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001120:	4b14      	ldr	r3, [pc, #80]	@ (8001174 <HAL_UART_MspInit+0xfc>)
 8001122:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001126:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001128:	4b12      	ldr	r3, [pc, #72]	@ (8001174 <HAL_UART_MspInit+0xfc>)
 800112a:	2200      	movs	r2, #0
 800112c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800112e:	4b11      	ldr	r3, [pc, #68]	@ (8001174 <HAL_UART_MspInit+0xfc>)
 8001130:	2200      	movs	r2, #0
 8001132:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001134:	480f      	ldr	r0, [pc, #60]	@ (8001174 <HAL_UART_MspInit+0xfc>)
 8001136:	f000 fb29 	bl	800178c <HAL_DMA_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001140:	f7ff fc9c 	bl	8000a7c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4a0b      	ldr	r2, [pc, #44]	@ (8001174 <HAL_UART_MspInit+0xfc>)
 8001148:	63da      	str	r2, [r3, #60]	@ 0x3c
 800114a:	4a0a      	ldr	r2, [pc, #40]	@ (8001174 <HAL_UART_MspInit+0xfc>)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001150:	2200      	movs	r2, #0
 8001152:	2105      	movs	r1, #5
 8001154:	2026      	movs	r0, #38	@ 0x26
 8001156:	f000 faef 	bl	8001738 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800115a:	2026      	movs	r0, #38	@ 0x26
 800115c:	f000 fb08 	bl	8001770 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001160:	bf00      	nop
 8001162:	3728      	adds	r7, #40	@ 0x28
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40004400 	.word	0x40004400
 800116c:	40023800 	.word	0x40023800
 8001170:	40020000 	.word	0x40020000
 8001174:	20000130 	.word	0x20000130
 8001178:	40026088 	.word	0x40026088

0800117c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08e      	sub	sp, #56	@ 0x38
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001184:	2300      	movs	r3, #0
 8001186:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001188:	2300      	movs	r3, #0
 800118a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800118c:	2300      	movs	r3, #0
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	4b33      	ldr	r3, [pc, #204]	@ (8001260 <HAL_InitTick+0xe4>)
 8001192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001194:	4a32      	ldr	r2, [pc, #200]	@ (8001260 <HAL_InitTick+0xe4>)
 8001196:	f043 0310 	orr.w	r3, r3, #16
 800119a:	6413      	str	r3, [r2, #64]	@ 0x40
 800119c:	4b30      	ldr	r3, [pc, #192]	@ (8001260 <HAL_InitTick+0xe4>)
 800119e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a0:	f003 0310 	and.w	r3, r3, #16
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011a8:	f107 0210 	add.w	r2, r7, #16
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	4611      	mov	r1, r2
 80011b2:	4618      	mov	r0, r3
 80011b4:	f002 f9c6 	bl	8003544 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80011b8:	6a3b      	ldr	r3, [r7, #32]
 80011ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80011bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d103      	bne.n	80011ca <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80011c2:	f002 f997 	bl	80034f4 <HAL_RCC_GetPCLK1Freq>
 80011c6:	6378      	str	r0, [r7, #52]	@ 0x34
 80011c8:	e004      	b.n	80011d4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80011ca:	f002 f993 	bl	80034f4 <HAL_RCC_GetPCLK1Freq>
 80011ce:	4603      	mov	r3, r0
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011d6:	4a23      	ldr	r2, [pc, #140]	@ (8001264 <HAL_InitTick+0xe8>)
 80011d8:	fba2 2303 	umull	r2, r3, r2, r3
 80011dc:	0c9b      	lsrs	r3, r3, #18
 80011de:	3b01      	subs	r3, #1
 80011e0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80011e2:	4b21      	ldr	r3, [pc, #132]	@ (8001268 <HAL_InitTick+0xec>)
 80011e4:	4a21      	ldr	r2, [pc, #132]	@ (800126c <HAL_InitTick+0xf0>)
 80011e6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80011e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001268 <HAL_InitTick+0xec>)
 80011ea:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011ee:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80011f0:	4a1d      	ldr	r2, [pc, #116]	@ (8001268 <HAL_InitTick+0xec>)
 80011f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011f4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80011f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001268 <HAL_InitTick+0xec>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001268 <HAL_InitTick+0xec>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001202:	4b19      	ldr	r3, [pc, #100]	@ (8001268 <HAL_InitTick+0xec>)
 8001204:	2200      	movs	r2, #0
 8001206:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001208:	4817      	ldr	r0, [pc, #92]	@ (8001268 <HAL_InitTick+0xec>)
 800120a:	f002 fe9b 	bl	8003f44 <HAL_TIM_Base_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001214:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001218:	2b00      	cmp	r3, #0
 800121a:	d11b      	bne.n	8001254 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800121c:	4812      	ldr	r0, [pc, #72]	@ (8001268 <HAL_InitTick+0xec>)
 800121e:	f002 feeb 	bl	8003ff8 <HAL_TIM_Base_Start_IT>
 8001222:	4603      	mov	r3, r0
 8001224:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001228:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800122c:	2b00      	cmp	r3, #0
 800122e:	d111      	bne.n	8001254 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001230:	2036      	movs	r0, #54	@ 0x36
 8001232:	f000 fa9d 	bl	8001770 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2b0f      	cmp	r3, #15
 800123a:	d808      	bhi.n	800124e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800123c:	2200      	movs	r2, #0
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	2036      	movs	r0, #54	@ 0x36
 8001242:	f000 fa79 	bl	8001738 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001246:	4a0a      	ldr	r2, [pc, #40]	@ (8001270 <HAL_InitTick+0xf4>)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6013      	str	r3, [r2, #0]
 800124c:	e002      	b.n	8001254 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001254:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001258:	4618      	mov	r0, r3
 800125a:	3738      	adds	r7, #56	@ 0x38
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40023800 	.word	0x40023800
 8001264:	431bde83 	.word	0x431bde83
 8001268:	200001a0 	.word	0x200001a0
 800126c:	40001000 	.word	0x40001000
 8001270:	20000010 	.word	0x20000010

08001274 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001278:	bf00      	nop
 800127a:	e7fd      	b.n	8001278 <NMI_Handler+0x4>

0800127c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001280:	bf00      	nop
 8001282:	e7fd      	b.n	8001280 <HardFault_Handler+0x4>

08001284 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001288:	bf00      	nop
 800128a:	e7fd      	b.n	8001288 <MemManage_Handler+0x4>

0800128c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001290:	bf00      	nop
 8001292:	e7fd      	b.n	8001290 <BusFault_Handler+0x4>

08001294 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001298:	bf00      	nop
 800129a:	e7fd      	b.n	8001298 <UsageFault_Handler+0x4>

0800129c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
	...

080012ac <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80012b0:	4802      	ldr	r0, [pc, #8]	@ (80012bc <DMA1_Stream5_IRQHandler+0x10>)
 80012b2:	f000 fc03 	bl	8001abc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000130 	.word	0x20000130

080012c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012c4:	4802      	ldr	r0, [pc, #8]	@ (80012d0 <USART2_IRQHandler+0x10>)
 80012c6:	f003 f9df 	bl	8004688 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	200000e8 	.word	0x200000e8

080012d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80012d8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80012dc:	f001 f806 	bl	80022ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012e0:	bf00      	nop
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80012e8:	4802      	ldr	r0, [pc, #8]	@ (80012f4 <TIM6_DAC_IRQHandler+0x10>)
 80012ea:	f002 fef5 	bl	80040d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	200001a0 	.word	0x200001a0

080012f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  return 1;
 80012fc:	2301      	movs	r3, #1
}
 80012fe:	4618      	mov	r0, r3
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <_kill>:

int _kill(int pid, int sig)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001312:	f007 fab9 	bl	8008888 <__errno>
 8001316:	4603      	mov	r3, r0
 8001318:	2216      	movs	r2, #22
 800131a:	601a      	str	r2, [r3, #0]
  return -1;
 800131c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001320:	4618      	mov	r0, r3
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <_exit>:

void _exit (int status)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001330:	f04f 31ff 	mov.w	r1, #4294967295
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff ffe7 	bl	8001308 <_kill>
  while (1) {}    /* Make sure we hang here */
 800133a:	bf00      	nop
 800133c:	e7fd      	b.n	800133a <_exit+0x12>

0800133e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b086      	sub	sp, #24
 8001342:	af00      	add	r7, sp, #0
 8001344:	60f8      	str	r0, [r7, #12]
 8001346:	60b9      	str	r1, [r7, #8]
 8001348:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800134a:	2300      	movs	r3, #0
 800134c:	617b      	str	r3, [r7, #20]
 800134e:	e00a      	b.n	8001366 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001350:	f3af 8000 	nop.w
 8001354:	4601      	mov	r1, r0
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	1c5a      	adds	r2, r3, #1
 800135a:	60ba      	str	r2, [r7, #8]
 800135c:	b2ca      	uxtb	r2, r1
 800135e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	3301      	adds	r3, #1
 8001364:	617b      	str	r3, [r7, #20]
 8001366:	697a      	ldr	r2, [r7, #20]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	429a      	cmp	r2, r3
 800136c:	dbf0      	blt.n	8001350 <_read+0x12>
  }

  return len;
 800136e:	687b      	ldr	r3, [r7, #4]
}
 8001370:	4618      	mov	r0, r3
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]
 8001388:	e009      	b.n	800139e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	1c5a      	adds	r2, r3, #1
 800138e:	60ba      	str	r2, [r7, #8]
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	4618      	mov	r0, r3
 8001394:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	3301      	adds	r3, #1
 800139c:	617b      	str	r3, [r7, #20]
 800139e:	697a      	ldr	r2, [r7, #20]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	dbf1      	blt.n	800138a <_write+0x12>
  }
  return len;
 80013a6:	687b      	ldr	r3, [r7, #4]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3718      	adds	r7, #24
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <_close>:

int _close(int file)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013bc:	4618      	mov	r0, r3
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013d8:	605a      	str	r2, [r3, #4]
  return 0;
 80013da:	2300      	movs	r3, #0
}
 80013dc:	4618      	mov	r0, r3
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <_isatty>:

int _isatty(int file)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013f0:	2301      	movs	r3, #1
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr

080013fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013fe:	b480      	push	{r7}
 8001400:	b085      	sub	sp, #20
 8001402:	af00      	add	r7, sp, #0
 8001404:	60f8      	str	r0, [r7, #12]
 8001406:	60b9      	str	r1, [r7, #8]
 8001408:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800140a:	2300      	movs	r3, #0
}
 800140c:	4618      	mov	r0, r3
 800140e:	3714      	adds	r7, #20
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001420:	4a14      	ldr	r2, [pc, #80]	@ (8001474 <_sbrk+0x5c>)
 8001422:	4b15      	ldr	r3, [pc, #84]	@ (8001478 <_sbrk+0x60>)
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800142c:	4b13      	ldr	r3, [pc, #76]	@ (800147c <_sbrk+0x64>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d102      	bne.n	800143a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001434:	4b11      	ldr	r3, [pc, #68]	@ (800147c <_sbrk+0x64>)
 8001436:	4a12      	ldr	r2, [pc, #72]	@ (8001480 <_sbrk+0x68>)
 8001438:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800143a:	4b10      	ldr	r3, [pc, #64]	@ (800147c <_sbrk+0x64>)
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4413      	add	r3, r2
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	429a      	cmp	r2, r3
 8001446:	d207      	bcs.n	8001458 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001448:	f007 fa1e 	bl	8008888 <__errno>
 800144c:	4603      	mov	r3, r0
 800144e:	220c      	movs	r2, #12
 8001450:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001452:	f04f 33ff 	mov.w	r3, #4294967295
 8001456:	e009      	b.n	800146c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001458:	4b08      	ldr	r3, [pc, #32]	@ (800147c <_sbrk+0x64>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800145e:	4b07      	ldr	r3, [pc, #28]	@ (800147c <_sbrk+0x64>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4413      	add	r3, r2
 8001466:	4a05      	ldr	r2, [pc, #20]	@ (800147c <_sbrk+0x64>)
 8001468:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800146a:	68fb      	ldr	r3, [r7, #12]
}
 800146c:	4618      	mov	r0, r3
 800146e:	3718      	adds	r7, #24
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20020000 	.word	0x20020000
 8001478:	00000400 	.word	0x00000400
 800147c:	200001e8 	.word	0x200001e8
 8001480:	20004c90 	.word	0x20004c90

08001484 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001488:	4b06      	ldr	r3, [pc, #24]	@ (80014a4 <SystemInit+0x20>)
 800148a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800148e:	4a05      	ldr	r2, [pc, #20]	@ (80014a4 <SystemInit+0x20>)
 8001490:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001494:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014e0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80014ac:	f7ff ffea 	bl	8001484 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014b0:	480c      	ldr	r0, [pc, #48]	@ (80014e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014b2:	490d      	ldr	r1, [pc, #52]	@ (80014e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014b4:	4a0d      	ldr	r2, [pc, #52]	@ (80014ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014b8:	e002      	b.n	80014c0 <LoopCopyDataInit>

080014ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014be:	3304      	adds	r3, #4

080014c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014c4:	d3f9      	bcc.n	80014ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014c6:	4a0a      	ldr	r2, [pc, #40]	@ (80014f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014c8:	4c0a      	ldr	r4, [pc, #40]	@ (80014f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014cc:	e001      	b.n	80014d2 <LoopFillZerobss>

080014ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014d0:	3204      	adds	r2, #4

080014d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014d4:	d3fb      	bcc.n	80014ce <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80014d6:	f007 f9dd 	bl	8008894 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014da:	f7ff f8eb 	bl	80006b4 <main>
  bx  lr    
 80014de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014e8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80014ec:	08009720 	.word	0x08009720
  ldr r2, =_sbss
 80014f0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80014f4:	20004c8c 	.word	0x20004c8c

080014f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014f8:	e7fe      	b.n	80014f8 <ADC_IRQHandler>
	...

080014fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001500:	4b0e      	ldr	r3, [pc, #56]	@ (800153c <HAL_Init+0x40>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a0d      	ldr	r2, [pc, #52]	@ (800153c <HAL_Init+0x40>)
 8001506:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800150a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800150c:	4b0b      	ldr	r3, [pc, #44]	@ (800153c <HAL_Init+0x40>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a0a      	ldr	r2, [pc, #40]	@ (800153c <HAL_Init+0x40>)
 8001512:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001516:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001518:	4b08      	ldr	r3, [pc, #32]	@ (800153c <HAL_Init+0x40>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a07      	ldr	r2, [pc, #28]	@ (800153c <HAL_Init+0x40>)
 800151e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001522:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001524:	2003      	movs	r0, #3
 8001526:	f000 f8fc 	bl	8001722 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800152a:	200f      	movs	r0, #15
 800152c:	f7ff fe26 	bl	800117c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001530:	f7ff fd2e 	bl	8000f90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40023c00 	.word	0x40023c00

08001540 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001544:	4b06      	ldr	r3, [pc, #24]	@ (8001560 <HAL_IncTick+0x20>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	461a      	mov	r2, r3
 800154a:	4b06      	ldr	r3, [pc, #24]	@ (8001564 <HAL_IncTick+0x24>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4413      	add	r3, r2
 8001550:	4a04      	ldr	r2, [pc, #16]	@ (8001564 <HAL_IncTick+0x24>)
 8001552:	6013      	str	r3, [r2, #0]
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	20000014 	.word	0x20000014
 8001564:	200001ec 	.word	0x200001ec

08001568 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  return uwTick;
 800156c:	4b03      	ldr	r3, [pc, #12]	@ (800157c <HAL_GetTick+0x14>)
 800156e:	681b      	ldr	r3, [r3, #0]
}
 8001570:	4618      	mov	r0, r3
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	200001ec 	.word	0x200001ec

08001580 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001588:	f7ff ffee 	bl	8001568 <HAL_GetTick>
 800158c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001598:	d005      	beq.n	80015a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800159a:	4b0a      	ldr	r3, [pc, #40]	@ (80015c4 <HAL_Delay+0x44>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	461a      	mov	r2, r3
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	4413      	add	r3, r2
 80015a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015a6:	bf00      	nop
 80015a8:	f7ff ffde 	bl	8001568 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d8f7      	bhi.n	80015a8 <HAL_Delay+0x28>
  {
  }
}
 80015b8:	bf00      	nop
 80015ba:	bf00      	nop
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20000014 	.word	0x20000014

080015c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d8:	4b0c      	ldr	r3, [pc, #48]	@ (800160c <__NVIC_SetPriorityGrouping+0x44>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015de:	68ba      	ldr	r2, [r7, #8]
 80015e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015e4:	4013      	ands	r3, r2
 80015e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015fa:	4a04      	ldr	r2, [pc, #16]	@ (800160c <__NVIC_SetPriorityGrouping+0x44>)
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	60d3      	str	r3, [r2, #12]
}
 8001600:	bf00      	nop
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001614:	4b04      	ldr	r3, [pc, #16]	@ (8001628 <__NVIC_GetPriorityGrouping+0x18>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	0a1b      	lsrs	r3, r3, #8
 800161a:	f003 0307 	and.w	r3, r3, #7
}
 800161e:	4618      	mov	r0, r3
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163a:	2b00      	cmp	r3, #0
 800163c:	db0b      	blt.n	8001656 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	f003 021f 	and.w	r2, r3, #31
 8001644:	4907      	ldr	r1, [pc, #28]	@ (8001664 <__NVIC_EnableIRQ+0x38>)
 8001646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164a:	095b      	lsrs	r3, r3, #5
 800164c:	2001      	movs	r0, #1
 800164e:	fa00 f202 	lsl.w	r2, r0, r2
 8001652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	e000e100 	.word	0xe000e100

08001668 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	6039      	str	r1, [r7, #0]
 8001672:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001678:	2b00      	cmp	r3, #0
 800167a:	db0a      	blt.n	8001692 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	b2da      	uxtb	r2, r3
 8001680:	490c      	ldr	r1, [pc, #48]	@ (80016b4 <__NVIC_SetPriority+0x4c>)
 8001682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001686:	0112      	lsls	r2, r2, #4
 8001688:	b2d2      	uxtb	r2, r2
 800168a:	440b      	add	r3, r1
 800168c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001690:	e00a      	b.n	80016a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	b2da      	uxtb	r2, r3
 8001696:	4908      	ldr	r1, [pc, #32]	@ (80016b8 <__NVIC_SetPriority+0x50>)
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	f003 030f 	and.w	r3, r3, #15
 800169e:	3b04      	subs	r3, #4
 80016a0:	0112      	lsls	r2, r2, #4
 80016a2:	b2d2      	uxtb	r2, r2
 80016a4:	440b      	add	r3, r1
 80016a6:	761a      	strb	r2, [r3, #24]
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	e000e100 	.word	0xe000e100
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016bc:	b480      	push	{r7}
 80016be:	b089      	sub	sp, #36	@ 0x24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	f1c3 0307 	rsb	r3, r3, #7
 80016d6:	2b04      	cmp	r3, #4
 80016d8:	bf28      	it	cs
 80016da:	2304      	movcs	r3, #4
 80016dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	3304      	adds	r3, #4
 80016e2:	2b06      	cmp	r3, #6
 80016e4:	d902      	bls.n	80016ec <NVIC_EncodePriority+0x30>
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	3b03      	subs	r3, #3
 80016ea:	e000      	b.n	80016ee <NVIC_EncodePriority+0x32>
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f0:	f04f 32ff 	mov.w	r2, #4294967295
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43da      	mvns	r2, r3
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	401a      	ands	r2, r3
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001704:	f04f 31ff 	mov.w	r1, #4294967295
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	fa01 f303 	lsl.w	r3, r1, r3
 800170e:	43d9      	mvns	r1, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001714:	4313      	orrs	r3, r2
         );
}
 8001716:	4618      	mov	r0, r3
 8001718:	3724      	adds	r7, #36	@ 0x24
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f7ff ff4c 	bl	80015c8 <__NVIC_SetPriorityGrouping>
}
 8001730:	bf00      	nop
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
 8001744:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800174a:	f7ff ff61 	bl	8001610 <__NVIC_GetPriorityGrouping>
 800174e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	68b9      	ldr	r1, [r7, #8]
 8001754:	6978      	ldr	r0, [r7, #20]
 8001756:	f7ff ffb1 	bl	80016bc <NVIC_EncodePriority>
 800175a:	4602      	mov	r2, r0
 800175c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001760:	4611      	mov	r1, r2
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff ff80 	bl	8001668 <__NVIC_SetPriority>
}
 8001768:	bf00      	nop
 800176a:	3718      	adds	r7, #24
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800177a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff ff54 	bl	800162c <__NVIC_EnableIRQ>
}
 8001784:	bf00      	nop
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001798:	f7ff fee6 	bl	8001568 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d101      	bne.n	80017a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e099      	b.n	80018dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2202      	movs	r2, #2
 80017ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f022 0201 	bic.w	r2, r2, #1
 80017c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017c8:	e00f      	b.n	80017ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017ca:	f7ff fecd 	bl	8001568 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b05      	cmp	r3, #5
 80017d6:	d908      	bls.n	80017ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2220      	movs	r2, #32
 80017dc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2203      	movs	r2, #3
 80017e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e078      	b.n	80018dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d1e8      	bne.n	80017ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001800:	697a      	ldr	r2, [r7, #20]
 8001802:	4b38      	ldr	r3, [pc, #224]	@ (80018e4 <HAL_DMA_Init+0x158>)
 8001804:	4013      	ands	r3, r2
 8001806:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685a      	ldr	r2, [r3, #4]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001816:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	691b      	ldr	r3, [r3, #16]
 800181c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001822:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800182e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a1b      	ldr	r3, [r3, #32]
 8001834:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001836:	697a      	ldr	r2, [r7, #20]
 8001838:	4313      	orrs	r3, r2
 800183a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001840:	2b04      	cmp	r3, #4
 8001842:	d107      	bne.n	8001854 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184c:	4313      	orrs	r3, r2
 800184e:	697a      	ldr	r2, [r7, #20]
 8001850:	4313      	orrs	r3, r2
 8001852:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	697a      	ldr	r2, [r7, #20]
 800185a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	f023 0307 	bic.w	r3, r3, #7
 800186a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001870:	697a      	ldr	r2, [r7, #20]
 8001872:	4313      	orrs	r3, r2
 8001874:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187a:	2b04      	cmp	r3, #4
 800187c:	d117      	bne.n	80018ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001882:	697a      	ldr	r2, [r7, #20]
 8001884:	4313      	orrs	r3, r2
 8001886:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800188c:	2b00      	cmp	r3, #0
 800188e:	d00e      	beq.n	80018ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f000 fb01 	bl	8001e98 <DMA_CheckFifoParam>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d008      	beq.n	80018ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2240      	movs	r2, #64	@ 0x40
 80018a0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2201      	movs	r2, #1
 80018a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80018aa:	2301      	movs	r3, #1
 80018ac:	e016      	b.n	80018dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	697a      	ldr	r2, [r7, #20]
 80018b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f000 fab8 	bl	8001e2c <DMA_CalcBaseAndBitshift>
 80018bc:	4603      	mov	r3, r0
 80018be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018c4:	223f      	movs	r2, #63	@ 0x3f
 80018c6:	409a      	lsls	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2201      	movs	r2, #1
 80018d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80018da:	2300      	movs	r3, #0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3718      	adds	r7, #24
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	f010803f 	.word	0xf010803f

080018e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
 80018f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018f6:	2300      	movs	r3, #0
 80018f8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018fe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001906:	2b01      	cmp	r3, #1
 8001908:	d101      	bne.n	800190e <HAL_DMA_Start_IT+0x26>
 800190a:	2302      	movs	r3, #2
 800190c:	e040      	b.n	8001990 <HAL_DMA_Start_IT+0xa8>
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2201      	movs	r2, #1
 8001912:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b01      	cmp	r3, #1
 8001920:	d12f      	bne.n	8001982 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2202      	movs	r2, #2
 8001926:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2200      	movs	r2, #0
 800192e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	68b9      	ldr	r1, [r7, #8]
 8001936:	68f8      	ldr	r0, [r7, #12]
 8001938:	f000 fa4a 	bl	8001dd0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001940:	223f      	movs	r2, #63	@ 0x3f
 8001942:	409a      	lsls	r2, r3
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f042 0216 	orr.w	r2, r2, #22
 8001956:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195c:	2b00      	cmp	r3, #0
 800195e:	d007      	beq.n	8001970 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f042 0208 	orr.w	r2, r2, #8
 800196e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f042 0201 	orr.w	r2, r2, #1
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	e005      	b.n	800198e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800198a:	2302      	movs	r3, #2
 800198c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800198e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3718      	adds	r7, #24
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80019a6:	f7ff fddf 	bl	8001568 <HAL_GetTick>
 80019aa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d008      	beq.n	80019ca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2280      	movs	r2, #128	@ 0x80
 80019bc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e052      	b.n	8001a70 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f022 0216 	bic.w	r2, r2, #22
 80019d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	695a      	ldr	r2, [r3, #20]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80019e8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d103      	bne.n	80019fa <HAL_DMA_Abort+0x62>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d007      	beq.n	8001a0a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f022 0208 	bic.w	r2, r2, #8
 8001a08:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f022 0201 	bic.w	r2, r2, #1
 8001a18:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a1a:	e013      	b.n	8001a44 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a1c:	f7ff fda4 	bl	8001568 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b05      	cmp	r3, #5
 8001a28:	d90c      	bls.n	8001a44 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2220      	movs	r2, #32
 8001a2e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2203      	movs	r2, #3
 8001a34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e015      	b.n	8001a70 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1e4      	bne.n	8001a1c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a56:	223f      	movs	r2, #63	@ 0x3f
 8001a58:	409a      	lsls	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2201      	movs	r2, #1
 8001a62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3710      	adds	r7, #16
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d004      	beq.n	8001a96 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2280      	movs	r2, #128	@ 0x80
 8001a90:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e00c      	b.n	8001ab0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2205      	movs	r2, #5
 8001a9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f022 0201 	bic.w	r2, r2, #1
 8001aac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ac8:	4b8e      	ldr	r3, [pc, #568]	@ (8001d04 <HAL_DMA_IRQHandler+0x248>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a8e      	ldr	r2, [pc, #568]	@ (8001d08 <HAL_DMA_IRQHandler+0x24c>)
 8001ace:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad2:	0a9b      	lsrs	r3, r3, #10
 8001ad4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ada:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ae6:	2208      	movs	r2, #8
 8001ae8:	409a      	lsls	r2, r3
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	4013      	ands	r3, r2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d01a      	beq.n	8001b28 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d013      	beq.n	8001b28 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f022 0204 	bic.w	r2, r2, #4
 8001b0e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b14:	2208      	movs	r2, #8
 8001b16:	409a      	lsls	r2, r3
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b20:	f043 0201 	orr.w	r2, r3, #1
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	409a      	lsls	r2, r3
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	4013      	ands	r3, r2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d012      	beq.n	8001b5e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	695b      	ldr	r3, [r3, #20]
 8001b3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d00b      	beq.n	8001b5e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	409a      	lsls	r2, r3
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b56:	f043 0202 	orr.w	r2, r3, #2
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b62:	2204      	movs	r2, #4
 8001b64:	409a      	lsls	r2, r3
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d012      	beq.n	8001b94 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d00b      	beq.n	8001b94 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b80:	2204      	movs	r2, #4
 8001b82:	409a      	lsls	r2, r3
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b8c:	f043 0204 	orr.w	r2, r3, #4
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b98:	2210      	movs	r2, #16
 8001b9a:	409a      	lsls	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d043      	beq.n	8001c2c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0308 	and.w	r3, r3, #8
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d03c      	beq.n	8001c2c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bb6:	2210      	movs	r2, #16
 8001bb8:	409a      	lsls	r2, r3
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d018      	beq.n	8001bfe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d108      	bne.n	8001bec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d024      	beq.n	8001c2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	4798      	blx	r3
 8001bea:	e01f      	b.n	8001c2c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d01b      	beq.n	8001c2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	4798      	blx	r3
 8001bfc:	e016      	b.n	8001c2c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d107      	bne.n	8001c1c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f022 0208 	bic.w	r2, r2, #8
 8001c1a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d003      	beq.n	8001c2c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c30:	2220      	movs	r2, #32
 8001c32:	409a      	lsls	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	4013      	ands	r3, r2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f000 808f 	beq.w	8001d5c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0310 	and.w	r3, r3, #16
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	f000 8087 	beq.w	8001d5c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c52:	2220      	movs	r2, #32
 8001c54:	409a      	lsls	r2, r3
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b05      	cmp	r3, #5
 8001c64:	d136      	bne.n	8001cd4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f022 0216 	bic.w	r2, r2, #22
 8001c74:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	695a      	ldr	r2, [r3, #20]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c84:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d103      	bne.n	8001c96 <HAL_DMA_IRQHandler+0x1da>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d007      	beq.n	8001ca6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f022 0208 	bic.w	r2, r2, #8
 8001ca4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001caa:	223f      	movs	r2, #63	@ 0x3f
 8001cac:	409a      	lsls	r2, r3
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d07e      	beq.n	8001dc8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	4798      	blx	r3
        }
        return;
 8001cd2:	e079      	b.n	8001dc8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d01d      	beq.n	8001d1e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d10d      	bne.n	8001d0c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d031      	beq.n	8001d5c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	4798      	blx	r3
 8001d00:	e02c      	b.n	8001d5c <HAL_DMA_IRQHandler+0x2a0>
 8001d02:	bf00      	nop
 8001d04:	2000000c 	.word	0x2000000c
 8001d08:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d023      	beq.n	8001d5c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	4798      	blx	r3
 8001d1c:	e01e      	b.n	8001d5c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d10f      	bne.n	8001d4c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 0210 	bic.w	r2, r2, #16
 8001d3a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d003      	beq.n	8001d5c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d032      	beq.n	8001dca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d68:	f003 0301 	and.w	r3, r3, #1
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d022      	beq.n	8001db6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2205      	movs	r2, #5
 8001d74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 0201 	bic.w	r2, r2, #1
 8001d86:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d307      	bcc.n	8001da4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f2      	bne.n	8001d88 <HAL_DMA_IRQHandler+0x2cc>
 8001da2:	e000      	b.n	8001da6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001da4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2201      	movs	r2, #1
 8001daa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d005      	beq.n	8001dca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	4798      	blx	r3
 8001dc6:	e000      	b.n	8001dca <HAL_DMA_IRQHandler+0x30e>
        return;
 8001dc8:	bf00      	nop
    }
  }
}
 8001dca:	3718      	adds	r7, #24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
 8001ddc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001dec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	2b40      	cmp	r3, #64	@ 0x40
 8001dfc:	d108      	bne.n	8001e10 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68ba      	ldr	r2, [r7, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001e0e:	e007      	b.n	8001e20 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68ba      	ldr	r2, [r7, #8]
 8001e16:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	60da      	str	r2, [r3, #12]
}
 8001e20:	bf00      	nop
 8001e22:	3714      	adds	r7, #20
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	3b10      	subs	r3, #16
 8001e3c:	4a14      	ldr	r2, [pc, #80]	@ (8001e90 <DMA_CalcBaseAndBitshift+0x64>)
 8001e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e42:	091b      	lsrs	r3, r3, #4
 8001e44:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e46:	4a13      	ldr	r2, [pc, #76]	@ (8001e94 <DMA_CalcBaseAndBitshift+0x68>)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2b03      	cmp	r3, #3
 8001e58:	d909      	bls.n	8001e6e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001e62:	f023 0303 	bic.w	r3, r3, #3
 8001e66:	1d1a      	adds	r2, r3, #4
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	659a      	str	r2, [r3, #88]	@ 0x58
 8001e6c:	e007      	b.n	8001e7e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001e76:	f023 0303 	bic.w	r3, r3, #3
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	aaaaaaab 	.word	0xaaaaaaab
 8001e94:	08009698 	.word	0x08009698

08001e98 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ea8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d11f      	bne.n	8001ef2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	2b03      	cmp	r3, #3
 8001eb6:	d856      	bhi.n	8001f66 <DMA_CheckFifoParam+0xce>
 8001eb8:	a201      	add	r2, pc, #4	@ (adr r2, 8001ec0 <DMA_CheckFifoParam+0x28>)
 8001eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ebe:	bf00      	nop
 8001ec0:	08001ed1 	.word	0x08001ed1
 8001ec4:	08001ee3 	.word	0x08001ee3
 8001ec8:	08001ed1 	.word	0x08001ed1
 8001ecc:	08001f67 	.word	0x08001f67
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d046      	beq.n	8001f6a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ee0:	e043      	b.n	8001f6a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ee6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001eea:	d140      	bne.n	8001f6e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ef0:	e03d      	b.n	8001f6e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001efa:	d121      	bne.n	8001f40 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	2b03      	cmp	r3, #3
 8001f00:	d837      	bhi.n	8001f72 <DMA_CheckFifoParam+0xda>
 8001f02:	a201      	add	r2, pc, #4	@ (adr r2, 8001f08 <DMA_CheckFifoParam+0x70>)
 8001f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f08:	08001f19 	.word	0x08001f19
 8001f0c:	08001f1f 	.word	0x08001f1f
 8001f10:	08001f19 	.word	0x08001f19
 8001f14:	08001f31 	.word	0x08001f31
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	73fb      	strb	r3, [r7, #15]
      break;
 8001f1c:	e030      	b.n	8001f80 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f22:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d025      	beq.n	8001f76 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f2e:	e022      	b.n	8001f76 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f34:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001f38:	d11f      	bne.n	8001f7a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f3e:	e01c      	b.n	8001f7a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d903      	bls.n	8001f4e <DMA_CheckFifoParam+0xb6>
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	2b03      	cmp	r3, #3
 8001f4a:	d003      	beq.n	8001f54 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f4c:	e018      	b.n	8001f80 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	73fb      	strb	r3, [r7, #15]
      break;
 8001f52:	e015      	b.n	8001f80 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f58:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d00e      	beq.n	8001f7e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	73fb      	strb	r3, [r7, #15]
      break;
 8001f64:	e00b      	b.n	8001f7e <DMA_CheckFifoParam+0xe6>
      break;
 8001f66:	bf00      	nop
 8001f68:	e00a      	b.n	8001f80 <DMA_CheckFifoParam+0xe8>
      break;
 8001f6a:	bf00      	nop
 8001f6c:	e008      	b.n	8001f80 <DMA_CheckFifoParam+0xe8>
      break;
 8001f6e:	bf00      	nop
 8001f70:	e006      	b.n	8001f80 <DMA_CheckFifoParam+0xe8>
      break;
 8001f72:	bf00      	nop
 8001f74:	e004      	b.n	8001f80 <DMA_CheckFifoParam+0xe8>
      break;
 8001f76:	bf00      	nop
 8001f78:	e002      	b.n	8001f80 <DMA_CheckFifoParam+0xe8>
      break;   
 8001f7a:	bf00      	nop
 8001f7c:	e000      	b.n	8001f80 <DMA_CheckFifoParam+0xe8>
      break;
 8001f7e:	bf00      	nop
    }
  } 
  
  return status; 
 8001f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3714      	adds	r7, #20
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop

08001f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b089      	sub	sp, #36	@ 0x24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61fb      	str	r3, [r7, #28]
 8001faa:	e165      	b.n	8002278 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fac:	2201      	movs	r2, #1
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	f040 8154 	bne.w	8002272 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f003 0303 	and.w	r3, r3, #3
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d005      	beq.n	8001fe2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d130      	bne.n	8002044 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	2203      	movs	r2, #3
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	68da      	ldr	r2, [r3, #12]
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	4313      	orrs	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002018:	2201      	movs	r2, #1
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4013      	ands	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	091b      	lsrs	r3, r3, #4
 800202e:	f003 0201 	and.w	r2, r3, #1
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4313      	orrs	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f003 0303 	and.w	r3, r3, #3
 800204c:	2b03      	cmp	r3, #3
 800204e:	d017      	beq.n	8002080 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	2203      	movs	r2, #3
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4013      	ands	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 0303 	and.w	r3, r3, #3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d123      	bne.n	80020d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	08da      	lsrs	r2, r3, #3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3208      	adds	r2, #8
 8002094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002098:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	f003 0307 	and.w	r3, r3, #7
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	220f      	movs	r2, #15
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4013      	ands	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	691a      	ldr	r2, [r3, #16]
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	08da      	lsrs	r2, r3, #3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	3208      	adds	r2, #8
 80020ce:	69b9      	ldr	r1, [r7, #24]
 80020d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	2203      	movs	r2, #3
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	43db      	mvns	r3, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4013      	ands	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 0203 	and.w	r2, r3, #3
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4313      	orrs	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002110:	2b00      	cmp	r3, #0
 8002112:	f000 80ae 	beq.w	8002272 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	4b5d      	ldr	r3, [pc, #372]	@ (8002290 <HAL_GPIO_Init+0x300>)
 800211c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800211e:	4a5c      	ldr	r2, [pc, #368]	@ (8002290 <HAL_GPIO_Init+0x300>)
 8002120:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002124:	6453      	str	r3, [r2, #68]	@ 0x44
 8002126:	4b5a      	ldr	r3, [pc, #360]	@ (8002290 <HAL_GPIO_Init+0x300>)
 8002128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800212a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002132:	4a58      	ldr	r2, [pc, #352]	@ (8002294 <HAL_GPIO_Init+0x304>)
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	089b      	lsrs	r3, r3, #2
 8002138:	3302      	adds	r3, #2
 800213a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800213e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	f003 0303 	and.w	r3, r3, #3
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	220f      	movs	r2, #15
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	43db      	mvns	r3, r3
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4013      	ands	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a4f      	ldr	r2, [pc, #316]	@ (8002298 <HAL_GPIO_Init+0x308>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d025      	beq.n	80021aa <HAL_GPIO_Init+0x21a>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a4e      	ldr	r2, [pc, #312]	@ (800229c <HAL_GPIO_Init+0x30c>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d01f      	beq.n	80021a6 <HAL_GPIO_Init+0x216>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a4d      	ldr	r2, [pc, #308]	@ (80022a0 <HAL_GPIO_Init+0x310>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d019      	beq.n	80021a2 <HAL_GPIO_Init+0x212>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a4c      	ldr	r2, [pc, #304]	@ (80022a4 <HAL_GPIO_Init+0x314>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d013      	beq.n	800219e <HAL_GPIO_Init+0x20e>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a4b      	ldr	r2, [pc, #300]	@ (80022a8 <HAL_GPIO_Init+0x318>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d00d      	beq.n	800219a <HAL_GPIO_Init+0x20a>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a4a      	ldr	r2, [pc, #296]	@ (80022ac <HAL_GPIO_Init+0x31c>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d007      	beq.n	8002196 <HAL_GPIO_Init+0x206>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a49      	ldr	r2, [pc, #292]	@ (80022b0 <HAL_GPIO_Init+0x320>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d101      	bne.n	8002192 <HAL_GPIO_Init+0x202>
 800218e:	2306      	movs	r3, #6
 8002190:	e00c      	b.n	80021ac <HAL_GPIO_Init+0x21c>
 8002192:	2307      	movs	r3, #7
 8002194:	e00a      	b.n	80021ac <HAL_GPIO_Init+0x21c>
 8002196:	2305      	movs	r3, #5
 8002198:	e008      	b.n	80021ac <HAL_GPIO_Init+0x21c>
 800219a:	2304      	movs	r3, #4
 800219c:	e006      	b.n	80021ac <HAL_GPIO_Init+0x21c>
 800219e:	2303      	movs	r3, #3
 80021a0:	e004      	b.n	80021ac <HAL_GPIO_Init+0x21c>
 80021a2:	2302      	movs	r3, #2
 80021a4:	e002      	b.n	80021ac <HAL_GPIO_Init+0x21c>
 80021a6:	2301      	movs	r3, #1
 80021a8:	e000      	b.n	80021ac <HAL_GPIO_Init+0x21c>
 80021aa:	2300      	movs	r3, #0
 80021ac:	69fa      	ldr	r2, [r7, #28]
 80021ae:	f002 0203 	and.w	r2, r2, #3
 80021b2:	0092      	lsls	r2, r2, #2
 80021b4:	4093      	lsls	r3, r2
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021bc:	4935      	ldr	r1, [pc, #212]	@ (8002294 <HAL_GPIO_Init+0x304>)
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	089b      	lsrs	r3, r3, #2
 80021c2:	3302      	adds	r3, #2
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021ca:	4b3a      	ldr	r3, [pc, #232]	@ (80022b4 <HAL_GPIO_Init+0x324>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	43db      	mvns	r3, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4013      	ands	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021ee:	4a31      	ldr	r2, [pc, #196]	@ (80022b4 <HAL_GPIO_Init+0x324>)
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021f4:	4b2f      	ldr	r3, [pc, #188]	@ (80022b4 <HAL_GPIO_Init+0x324>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	43db      	mvns	r3, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4013      	ands	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d003      	beq.n	8002218 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	4313      	orrs	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002218:	4a26      	ldr	r2, [pc, #152]	@ (80022b4 <HAL_GPIO_Init+0x324>)
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800221e:	4b25      	ldr	r3, [pc, #148]	@ (80022b4 <HAL_GPIO_Init+0x324>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	43db      	mvns	r3, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4013      	ands	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	4313      	orrs	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002242:	4a1c      	ldr	r2, [pc, #112]	@ (80022b4 <HAL_GPIO_Init+0x324>)
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002248:	4b1a      	ldr	r3, [pc, #104]	@ (80022b4 <HAL_GPIO_Init+0x324>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	43db      	mvns	r3, r3
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4013      	ands	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d003      	beq.n	800226c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4313      	orrs	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800226c:	4a11      	ldr	r2, [pc, #68]	@ (80022b4 <HAL_GPIO_Init+0x324>)
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	3301      	adds	r3, #1
 8002276:	61fb      	str	r3, [r7, #28]
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	2b0f      	cmp	r3, #15
 800227c:	f67f ae96 	bls.w	8001fac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002280:	bf00      	nop
 8002282:	bf00      	nop
 8002284:	3724      	adds	r7, #36	@ 0x24
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	40023800 	.word	0x40023800
 8002294:	40013800 	.word	0x40013800
 8002298:	40020000 	.word	0x40020000
 800229c:	40020400 	.word	0x40020400
 80022a0:	40020800 	.word	0x40020800
 80022a4:	40020c00 	.word	0x40020c00
 80022a8:	40021000 	.word	0x40021000
 80022ac:	40021400 	.word	0x40021400
 80022b0:	40021800 	.word	0x40021800
 80022b4:	40013c00 	.word	0x40013c00

080022b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	460b      	mov	r3, r1
 80022c2:	807b      	strh	r3, [r7, #2]
 80022c4:	4613      	mov	r3, r2
 80022c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022c8:	787b      	ldrb	r3, [r7, #1]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022ce:	887a      	ldrh	r2, [r7, #2]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022d4:	e003      	b.n	80022de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022d6:	887b      	ldrh	r3, [r7, #2]
 80022d8:	041a      	lsls	r2, r3, #16
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	619a      	str	r2, [r3, #24]
}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
	...

080022ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80022f6:	4b08      	ldr	r3, [pc, #32]	@ (8002318 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022f8:	695a      	ldr	r2, [r3, #20]
 80022fa:	88fb      	ldrh	r3, [r7, #6]
 80022fc:	4013      	ands	r3, r2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d006      	beq.n	8002310 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002302:	4a05      	ldr	r2, [pc, #20]	@ (8002318 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002304:	88fb      	ldrh	r3, [r7, #6]
 8002306:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002308:	88fb      	ldrh	r3, [r7, #6]
 800230a:	4618      	mov	r0, r3
 800230c:	f7fe f97e 	bl	800060c <HAL_GPIO_EXTI_Callback>
  }
}
 8002310:	bf00      	nop
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40013c00 	.word	0x40013c00

0800231c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e12b      	b.n	8002586 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	d106      	bne.n	8002348 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7fe fe50 	bl	8000fe8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2224      	movs	r2, #36	@ 0x24
 800234c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f022 0201 	bic.w	r2, r2, #1
 800235e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800236e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800237e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002380:	f001 f8b8 	bl	80034f4 <HAL_RCC_GetPCLK1Freq>
 8002384:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	4a81      	ldr	r2, [pc, #516]	@ (8002590 <HAL_I2C_Init+0x274>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d807      	bhi.n	80023a0 <HAL_I2C_Init+0x84>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	4a80      	ldr	r2, [pc, #512]	@ (8002594 <HAL_I2C_Init+0x278>)
 8002394:	4293      	cmp	r3, r2
 8002396:	bf94      	ite	ls
 8002398:	2301      	movls	r3, #1
 800239a:	2300      	movhi	r3, #0
 800239c:	b2db      	uxtb	r3, r3
 800239e:	e006      	b.n	80023ae <HAL_I2C_Init+0x92>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	4a7d      	ldr	r2, [pc, #500]	@ (8002598 <HAL_I2C_Init+0x27c>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	bf94      	ite	ls
 80023a8:	2301      	movls	r3, #1
 80023aa:	2300      	movhi	r3, #0
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e0e7      	b.n	8002586 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	4a78      	ldr	r2, [pc, #480]	@ (800259c <HAL_I2C_Init+0x280>)
 80023ba:	fba2 2303 	umull	r2, r3, r2, r3
 80023be:	0c9b      	lsrs	r3, r3, #18
 80023c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68ba      	ldr	r2, [r7, #8]
 80023d2:	430a      	orrs	r2, r1
 80023d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	4a6a      	ldr	r2, [pc, #424]	@ (8002590 <HAL_I2C_Init+0x274>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d802      	bhi.n	80023f0 <HAL_I2C_Init+0xd4>
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	3301      	adds	r3, #1
 80023ee:	e009      	b.n	8002404 <HAL_I2C_Init+0xe8>
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80023f6:	fb02 f303 	mul.w	r3, r2, r3
 80023fa:	4a69      	ldr	r2, [pc, #420]	@ (80025a0 <HAL_I2C_Init+0x284>)
 80023fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002400:	099b      	lsrs	r3, r3, #6
 8002402:	3301      	adds	r3, #1
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	6812      	ldr	r2, [r2, #0]
 8002408:	430b      	orrs	r3, r1
 800240a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002416:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	495c      	ldr	r1, [pc, #368]	@ (8002590 <HAL_I2C_Init+0x274>)
 8002420:	428b      	cmp	r3, r1
 8002422:	d819      	bhi.n	8002458 <HAL_I2C_Init+0x13c>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	1e59      	subs	r1, r3, #1
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002432:	1c59      	adds	r1, r3, #1
 8002434:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002438:	400b      	ands	r3, r1
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00a      	beq.n	8002454 <HAL_I2C_Init+0x138>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	1e59      	subs	r1, r3, #1
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	fbb1 f3f3 	udiv	r3, r1, r3
 800244c:	3301      	adds	r3, #1
 800244e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002452:	e051      	b.n	80024f8 <HAL_I2C_Init+0x1dc>
 8002454:	2304      	movs	r3, #4
 8002456:	e04f      	b.n	80024f8 <HAL_I2C_Init+0x1dc>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d111      	bne.n	8002484 <HAL_I2C_Init+0x168>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	1e58      	subs	r0, r3, #1
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6859      	ldr	r1, [r3, #4]
 8002468:	460b      	mov	r3, r1
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	440b      	add	r3, r1
 800246e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002472:	3301      	adds	r3, #1
 8002474:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002478:	2b00      	cmp	r3, #0
 800247a:	bf0c      	ite	eq
 800247c:	2301      	moveq	r3, #1
 800247e:	2300      	movne	r3, #0
 8002480:	b2db      	uxtb	r3, r3
 8002482:	e012      	b.n	80024aa <HAL_I2C_Init+0x18e>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	1e58      	subs	r0, r3, #1
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6859      	ldr	r1, [r3, #4]
 800248c:	460b      	mov	r3, r1
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	440b      	add	r3, r1
 8002492:	0099      	lsls	r1, r3, #2
 8002494:	440b      	add	r3, r1
 8002496:	fbb0 f3f3 	udiv	r3, r0, r3
 800249a:	3301      	adds	r3, #1
 800249c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	bf0c      	ite	eq
 80024a4:	2301      	moveq	r3, #1
 80024a6:	2300      	movne	r3, #0
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <HAL_I2C_Init+0x196>
 80024ae:	2301      	movs	r3, #1
 80024b0:	e022      	b.n	80024f8 <HAL_I2C_Init+0x1dc>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10e      	bne.n	80024d8 <HAL_I2C_Init+0x1bc>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	1e58      	subs	r0, r3, #1
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6859      	ldr	r1, [r3, #4]
 80024c2:	460b      	mov	r3, r1
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	440b      	add	r3, r1
 80024c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80024cc:	3301      	adds	r3, #1
 80024ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024d6:	e00f      	b.n	80024f8 <HAL_I2C_Init+0x1dc>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	1e58      	subs	r0, r3, #1
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6859      	ldr	r1, [r3, #4]
 80024e0:	460b      	mov	r3, r1
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	440b      	add	r3, r1
 80024e6:	0099      	lsls	r1, r3, #2
 80024e8:	440b      	add	r3, r1
 80024ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80024ee:	3301      	adds	r3, #1
 80024f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	6809      	ldr	r1, [r1, #0]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	69da      	ldr	r2, [r3, #28]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	431a      	orrs	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	430a      	orrs	r2, r1
 800251a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002526:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	6911      	ldr	r1, [r2, #16]
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	68d2      	ldr	r2, [r2, #12]
 8002532:	4311      	orrs	r1, r2
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6812      	ldr	r2, [r2, #0]
 8002538:	430b      	orrs	r3, r1
 800253a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	695a      	ldr	r2, [r3, #20]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	431a      	orrs	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	430a      	orrs	r2, r1
 8002556:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f042 0201 	orr.w	r2, r2, #1
 8002566:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2220      	movs	r2, #32
 8002572:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	000186a0 	.word	0x000186a0
 8002594:	001e847f 	.word	0x001e847f
 8002598:	003d08ff 	.word	0x003d08ff
 800259c:	431bde83 	.word	0x431bde83
 80025a0:	10624dd3 	.word	0x10624dd3

080025a4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b088      	sub	sp, #32
 80025a8:	af02      	add	r7, sp, #8
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	607a      	str	r2, [r7, #4]
 80025ae:	461a      	mov	r2, r3
 80025b0:	460b      	mov	r3, r1
 80025b2:	817b      	strh	r3, [r7, #10]
 80025b4:	4613      	mov	r3, r2
 80025b6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025b8:	f7fe ffd6 	bl	8001568 <HAL_GetTick>
 80025bc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b20      	cmp	r3, #32
 80025c8:	f040 80e0 	bne.w	800278c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	9300      	str	r3, [sp, #0]
 80025d0:	2319      	movs	r3, #25
 80025d2:	2201      	movs	r2, #1
 80025d4:	4970      	ldr	r1, [pc, #448]	@ (8002798 <HAL_I2C_Master_Transmit+0x1f4>)
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f000 fc64 	bl	8002ea4 <I2C_WaitOnFlagUntilTimeout>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80025e2:	2302      	movs	r3, #2
 80025e4:	e0d3      	b.n	800278e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d101      	bne.n	80025f4 <HAL_I2C_Master_Transmit+0x50>
 80025f0:	2302      	movs	r3, #2
 80025f2:	e0cc      	b.n	800278e <HAL_I2C_Master_Transmit+0x1ea>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b01      	cmp	r3, #1
 8002608:	d007      	beq.n	800261a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f042 0201 	orr.w	r2, r2, #1
 8002618:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002628:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2221      	movs	r2, #33	@ 0x21
 800262e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2210      	movs	r2, #16
 8002636:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2200      	movs	r2, #0
 800263e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	893a      	ldrh	r2, [r7, #8]
 800264a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002650:	b29a      	uxth	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	4a50      	ldr	r2, [pc, #320]	@ (800279c <HAL_I2C_Master_Transmit+0x1f8>)
 800265a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800265c:	8979      	ldrh	r1, [r7, #10]
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	6a3a      	ldr	r2, [r7, #32]
 8002662:	68f8      	ldr	r0, [r7, #12]
 8002664:	f000 face 	bl	8002c04 <I2C_MasterRequestWrite>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e08d      	b.n	800278e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002672:	2300      	movs	r3, #0
 8002674:	613b      	str	r3, [r7, #16]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	613b      	str	r3, [r7, #16]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	613b      	str	r3, [r7, #16]
 8002686:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002688:	e066      	b.n	8002758 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	6a39      	ldr	r1, [r7, #32]
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f000 fd22 	bl	80030d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00d      	beq.n	80026b6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269e:	2b04      	cmp	r3, #4
 80026a0:	d107      	bne.n	80026b2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e06b      	b.n	800278e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ba:	781a      	ldrb	r2, [r3, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c6:	1c5a      	adds	r2, r3, #1
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	3b01      	subs	r3, #1
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026de:	3b01      	subs	r3, #1
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	f003 0304 	and.w	r3, r3, #4
 80026f0:	2b04      	cmp	r3, #4
 80026f2:	d11b      	bne.n	800272c <HAL_I2C_Master_Transmit+0x188>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d017      	beq.n	800272c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002700:	781a      	ldrb	r2, [r3, #0]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800270c:	1c5a      	adds	r2, r3, #1
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002716:	b29b      	uxth	r3, r3
 8002718:	3b01      	subs	r3, #1
 800271a:	b29a      	uxth	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002724:	3b01      	subs	r3, #1
 8002726:	b29a      	uxth	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	6a39      	ldr	r1, [r7, #32]
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f000 fd19 	bl	8003168 <I2C_WaitOnBTFFlagUntilTimeout>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d00d      	beq.n	8002758 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002740:	2b04      	cmp	r3, #4
 8002742:	d107      	bne.n	8002754 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002752:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e01a      	b.n	800278e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800275c:	2b00      	cmp	r3, #0
 800275e:	d194      	bne.n	800268a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800276e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2220      	movs	r2, #32
 8002774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002788:	2300      	movs	r3, #0
 800278a:	e000      	b.n	800278e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800278c:	2302      	movs	r3, #2
  }
}
 800278e:	4618      	mov	r0, r3
 8002790:	3718      	adds	r7, #24
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	00100002 	.word	0x00100002
 800279c:	ffff0000 	.word	0xffff0000

080027a0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b08c      	sub	sp, #48	@ 0x30
 80027a4:	af02      	add	r7, sp, #8
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	607a      	str	r2, [r7, #4]
 80027aa:	461a      	mov	r2, r3
 80027ac:	460b      	mov	r3, r1
 80027ae:	817b      	strh	r3, [r7, #10]
 80027b0:	4613      	mov	r3, r2
 80027b2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027b4:	f7fe fed8 	bl	8001568 <HAL_GetTick>
 80027b8:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b20      	cmp	r3, #32
 80027c4:	f040 8217 	bne.w	8002bf6 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ca:	9300      	str	r3, [sp, #0]
 80027cc:	2319      	movs	r3, #25
 80027ce:	2201      	movs	r2, #1
 80027d0:	497c      	ldr	r1, [pc, #496]	@ (80029c4 <HAL_I2C_Master_Receive+0x224>)
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f000 fb66 	bl	8002ea4 <I2C_WaitOnFlagUntilTimeout>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80027de:	2302      	movs	r3, #2
 80027e0:	e20a      	b.n	8002bf8 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d101      	bne.n	80027f0 <HAL_I2C_Master_Receive+0x50>
 80027ec:	2302      	movs	r3, #2
 80027ee:	e203      	b.n	8002bf8 <HAL_I2C_Master_Receive+0x458>
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b01      	cmp	r3, #1
 8002804:	d007      	beq.n	8002816 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f042 0201 	orr.w	r2, r2, #1
 8002814:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002824:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2222      	movs	r2, #34	@ 0x22
 800282a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2210      	movs	r2, #16
 8002832:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	893a      	ldrh	r2, [r7, #8]
 8002846:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800284c:	b29a      	uxth	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	4a5c      	ldr	r2, [pc, #368]	@ (80029c8 <HAL_I2C_Master_Receive+0x228>)
 8002856:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002858:	8979      	ldrh	r1, [r7, #10]
 800285a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800285c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	f000 fa52 	bl	8002d08 <I2C_MasterRequestRead>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e1c4      	b.n	8002bf8 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002872:	2b00      	cmp	r3, #0
 8002874:	d113      	bne.n	800289e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002876:	2300      	movs	r3, #0
 8002878:	623b      	str	r3, [r7, #32]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	695b      	ldr	r3, [r3, #20]
 8002880:	623b      	str	r3, [r7, #32]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	623b      	str	r3, [r7, #32]
 800288a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	e198      	b.n	8002bd0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d11b      	bne.n	80028de <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028b6:	2300      	movs	r3, #0
 80028b8:	61fb      	str	r3, [r7, #28]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	695b      	ldr	r3, [r3, #20]
 80028c0:	61fb      	str	r3, [r7, #28]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	61fb      	str	r3, [r7, #28]
 80028ca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	e178      	b.n	8002bd0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d11b      	bne.n	800291e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028f4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002904:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002906:	2300      	movs	r3, #0
 8002908:	61bb      	str	r3, [r7, #24]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	61bb      	str	r3, [r7, #24]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	61bb      	str	r3, [r7, #24]
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	e158      	b.n	8002bd0 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800292c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800292e:	2300      	movs	r3, #0
 8002930:	617b      	str	r3, [r7, #20]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	695b      	ldr	r3, [r3, #20]
 8002938:	617b      	str	r3, [r7, #20]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	617b      	str	r3, [r7, #20]
 8002942:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002944:	e144      	b.n	8002bd0 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800294a:	2b03      	cmp	r3, #3
 800294c:	f200 80f1 	bhi.w	8002b32 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002954:	2b01      	cmp	r3, #1
 8002956:	d123      	bne.n	80029a0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002958:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800295a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800295c:	68f8      	ldr	r0, [r7, #12]
 800295e:	f000 fc4b 	bl	80031f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e145      	b.n	8002bf8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	691a      	ldr	r2, [r3, #16]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002976:	b2d2      	uxtb	r2, r2
 8002978:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800297e:	1c5a      	adds	r2, r3, #1
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002988:	3b01      	subs	r3, #1
 800298a:	b29a      	uxth	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002994:	b29b      	uxth	r3, r3
 8002996:	3b01      	subs	r3, #1
 8002998:	b29a      	uxth	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800299e:	e117      	b.n	8002bd0 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d14e      	bne.n	8002a46 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ae:	2200      	movs	r2, #0
 80029b0:	4906      	ldr	r1, [pc, #24]	@ (80029cc <HAL_I2C_Master_Receive+0x22c>)
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f000 fa76 	bl	8002ea4 <I2C_WaitOnFlagUntilTimeout>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d008      	beq.n	80029d0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e11a      	b.n	8002bf8 <HAL_I2C_Master_Receive+0x458>
 80029c2:	bf00      	nop
 80029c4:	00100002 	.word	0x00100002
 80029c8:	ffff0000 	.word	0xffff0000
 80029cc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	691a      	ldr	r2, [r3, #16]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ea:	b2d2      	uxtb	r2, r2
 80029ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f2:	1c5a      	adds	r2, r3, #1
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029fc:	3b01      	subs	r3, #1
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	691a      	ldr	r2, [r3, #16]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a1c:	b2d2      	uxtb	r2, r2
 8002a1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a24:	1c5a      	adds	r2, r3, #1
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002a44:	e0c4      	b.n	8002bd0 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a48:	9300      	str	r3, [sp, #0]
 8002a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	496c      	ldr	r1, [pc, #432]	@ (8002c00 <HAL_I2C_Master_Receive+0x460>)
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f000 fa27 	bl	8002ea4 <I2C_WaitOnFlagUntilTimeout>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e0cb      	b.n	8002bf8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	691a      	ldr	r2, [r3, #16]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a7a:	b2d2      	uxtb	r2, r2
 8002a7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a82:	1c5a      	adds	r2, r3, #1
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	4955      	ldr	r1, [pc, #340]	@ (8002c00 <HAL_I2C_Master_Receive+0x460>)
 8002aac:	68f8      	ldr	r0, [r7, #12]
 8002aae:	f000 f9f9 	bl	8002ea4 <I2C_WaitOnFlagUntilTimeout>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e09d      	b.n	8002bf8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002aca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	691a      	ldr	r2, [r3, #16]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad6:	b2d2      	uxtb	r2, r2
 8002ad8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ade:	1c5a      	adds	r2, r3, #1
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	3b01      	subs	r3, #1
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	691a      	ldr	r2, [r3, #16]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b08:	b2d2      	uxtb	r2, r2
 8002b0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b10:	1c5a      	adds	r2, r3, #1
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002b30:	e04e      	b.n	8002bd0 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b34:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002b36:	68f8      	ldr	r0, [r7, #12]
 8002b38:	f000 fb5e 	bl	80031f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e058      	b.n	8002bf8 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	691a      	ldr	r2, [r3, #16]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b50:	b2d2      	uxtb	r2, r2
 8002b52:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b58:	1c5a      	adds	r2, r3, #1
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b62:	3b01      	subs	r3, #1
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	3b01      	subs	r3, #1
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	f003 0304 	and.w	r3, r3, #4
 8002b82:	2b04      	cmp	r3, #4
 8002b84:	d124      	bne.n	8002bd0 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b8a:	2b03      	cmp	r3, #3
 8002b8c:	d107      	bne.n	8002b9e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b9c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	691a      	ldr	r2, [r3, #16]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba8:	b2d2      	uxtb	r2, r2
 8002baa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb0:	1c5a      	adds	r2, r3, #1
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f47f aeb6 	bne.w	8002946 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2220      	movs	r2, #32
 8002bde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	e000      	b.n	8002bf8 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002bf6:	2302      	movs	r3, #2
  }
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3728      	adds	r7, #40	@ 0x28
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	00010004 	.word	0x00010004

08002c04 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b088      	sub	sp, #32
 8002c08:	af02      	add	r7, sp, #8
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	607a      	str	r2, [r7, #4]
 8002c0e:	603b      	str	r3, [r7, #0]
 8002c10:	460b      	mov	r3, r1
 8002c12:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c18:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	2b08      	cmp	r3, #8
 8002c1e:	d006      	beq.n	8002c2e <I2C_MasterRequestWrite+0x2a>
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d003      	beq.n	8002c2e <I2C_MasterRequestWrite+0x2a>
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002c2c:	d108      	bne.n	8002c40 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c3c:	601a      	str	r2, [r3, #0]
 8002c3e:	e00b      	b.n	8002c58 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c44:	2b12      	cmp	r3, #18
 8002c46:	d107      	bne.n	8002c58 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c56:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f000 f91d 	bl	8002ea4 <I2C_WaitOnFlagUntilTimeout>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00d      	beq.n	8002c8c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c7e:	d103      	bne.n	8002c88 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c86:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e035      	b.n	8002cf8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c94:	d108      	bne.n	8002ca8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c96:	897b      	ldrh	r3, [r7, #10]
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ca4:	611a      	str	r2, [r3, #16]
 8002ca6:	e01b      	b.n	8002ce0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ca8:	897b      	ldrh	r3, [r7, #10]
 8002caa:	11db      	asrs	r3, r3, #7
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	f003 0306 	and.w	r3, r3, #6
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	f063 030f 	orn	r3, r3, #15
 8002cb8:	b2da      	uxtb	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	490e      	ldr	r1, [pc, #56]	@ (8002d00 <I2C_MasterRequestWrite+0xfc>)
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f000 f966 	bl	8002f98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e010      	b.n	8002cf8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002cd6:	897b      	ldrh	r3, [r7, #10]
 8002cd8:	b2da      	uxtb	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	4907      	ldr	r1, [pc, #28]	@ (8002d04 <I2C_MasterRequestWrite+0x100>)
 8002ce6:	68f8      	ldr	r0, [r7, #12]
 8002ce8:	f000 f956 	bl	8002f98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3718      	adds	r7, #24
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	00010008 	.word	0x00010008
 8002d04:	00010002 	.word	0x00010002

08002d08 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b088      	sub	sp, #32
 8002d0c:	af02      	add	r7, sp, #8
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	607a      	str	r2, [r7, #4]
 8002d12:	603b      	str	r3, [r7, #0]
 8002d14:	460b      	mov	r3, r1
 8002d16:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d1c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002d2c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	2b08      	cmp	r3, #8
 8002d32:	d006      	beq.n	8002d42 <I2C_MasterRequestRead+0x3a>
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d003      	beq.n	8002d42 <I2C_MasterRequestRead+0x3a>
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002d40:	d108      	bne.n	8002d54 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	e00b      	b.n	8002d6c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d58:	2b11      	cmp	r3, #17
 8002d5a:	d107      	bne.n	8002d6c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d6a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	9300      	str	r3, [sp, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	f000 f893 	bl	8002ea4 <I2C_WaitOnFlagUntilTimeout>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00d      	beq.n	8002da0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d92:	d103      	bne.n	8002d9c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d9a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e079      	b.n	8002e94 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002da8:	d108      	bne.n	8002dbc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002daa:	897b      	ldrh	r3, [r7, #10]
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	f043 0301 	orr.w	r3, r3, #1
 8002db2:	b2da      	uxtb	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	611a      	str	r2, [r3, #16]
 8002dba:	e05f      	b.n	8002e7c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002dbc:	897b      	ldrh	r3, [r7, #10]
 8002dbe:	11db      	asrs	r3, r3, #7
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	f003 0306 	and.w	r3, r3, #6
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	f063 030f 	orn	r3, r3, #15
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	4930      	ldr	r1, [pc, #192]	@ (8002e9c <I2C_MasterRequestRead+0x194>)
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f000 f8dc 	bl	8002f98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e054      	b.n	8002e94 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002dea:	897b      	ldrh	r3, [r7, #10]
 8002dec:	b2da      	uxtb	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	4929      	ldr	r1, [pc, #164]	@ (8002ea0 <I2C_MasterRequestRead+0x198>)
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f000 f8cc 	bl	8002f98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e044      	b.n	8002e94 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	613b      	str	r3, [r7, #16]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	695b      	ldr	r3, [r3, #20]
 8002e14:	613b      	str	r3, [r7, #16]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	613b      	str	r3, [r7, #16]
 8002e1e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e2e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	9300      	str	r3, [sp, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	f000 f831 	bl	8002ea4 <I2C_WaitOnFlagUntilTimeout>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00d      	beq.n	8002e64 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e56:	d103      	bne.n	8002e60 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e5e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e017      	b.n	8002e94 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002e64:	897b      	ldrh	r3, [r7, #10]
 8002e66:	11db      	asrs	r3, r3, #7
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	f003 0306 	and.w	r3, r3, #6
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	f063 030e 	orn	r3, r3, #14
 8002e74:	b2da      	uxtb	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	4907      	ldr	r1, [pc, #28]	@ (8002ea0 <I2C_MasterRequestRead+0x198>)
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f000 f888 	bl	8002f98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e000      	b.n	8002e94 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3718      	adds	r7, #24
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	00010008 	.word	0x00010008
 8002ea0:	00010002 	.word	0x00010002

08002ea4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	603b      	str	r3, [r7, #0]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002eb4:	e048      	b.n	8002f48 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ebc:	d044      	beq.n	8002f48 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ebe:	f7fe fb53 	bl	8001568 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d302      	bcc.n	8002ed4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d139      	bne.n	8002f48 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	0c1b      	lsrs	r3, r3, #16
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d10d      	bne.n	8002efa <I2C_WaitOnFlagUntilTimeout+0x56>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	695b      	ldr	r3, [r3, #20]
 8002ee4:	43da      	mvns	r2, r3
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	bf0c      	ite	eq
 8002ef0:	2301      	moveq	r3, #1
 8002ef2:	2300      	movne	r3, #0
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	e00c      	b.n	8002f14 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	43da      	mvns	r2, r3
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	4013      	ands	r3, r2
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	bf0c      	ite	eq
 8002f0c:	2301      	moveq	r3, #1
 8002f0e:	2300      	movne	r3, #0
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	461a      	mov	r2, r3
 8002f14:	79fb      	ldrb	r3, [r7, #7]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d116      	bne.n	8002f48 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2220      	movs	r2, #32
 8002f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f34:	f043 0220 	orr.w	r2, r3, #32
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e023      	b.n	8002f90 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	0c1b      	lsrs	r3, r3, #16
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d10d      	bne.n	8002f6e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	43da      	mvns	r2, r3
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	bf0c      	ite	eq
 8002f64:	2301      	moveq	r3, #1
 8002f66:	2300      	movne	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	e00c      	b.n	8002f88 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	43da      	mvns	r2, r3
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	bf0c      	ite	eq
 8002f80:	2301      	moveq	r3, #1
 8002f82:	2300      	movne	r3, #0
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	461a      	mov	r2, r3
 8002f88:	79fb      	ldrb	r3, [r7, #7]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d093      	beq.n	8002eb6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
 8002fa4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fa6:	e071      	b.n	800308c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fb6:	d123      	bne.n	8003000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fc6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002fd0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2220      	movs	r2, #32
 8002fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fec:	f043 0204 	orr.w	r2, r3, #4
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e067      	b.n	80030d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003006:	d041      	beq.n	800308c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003008:	f7fe faae 	bl	8001568 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	429a      	cmp	r2, r3
 8003016:	d302      	bcc.n	800301e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d136      	bne.n	800308c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	0c1b      	lsrs	r3, r3, #16
 8003022:	b2db      	uxtb	r3, r3
 8003024:	2b01      	cmp	r3, #1
 8003026:	d10c      	bne.n	8003042 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	43da      	mvns	r2, r3
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	4013      	ands	r3, r2
 8003034:	b29b      	uxth	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	bf14      	ite	ne
 800303a:	2301      	movne	r3, #1
 800303c:	2300      	moveq	r3, #0
 800303e:	b2db      	uxtb	r3, r3
 8003040:	e00b      	b.n	800305a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	43da      	mvns	r2, r3
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	4013      	ands	r3, r2
 800304e:	b29b      	uxth	r3, r3
 8003050:	2b00      	cmp	r3, #0
 8003052:	bf14      	ite	ne
 8003054:	2301      	movne	r3, #1
 8003056:	2300      	moveq	r3, #0
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d016      	beq.n	800308c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2220      	movs	r2, #32
 8003068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003078:	f043 0220 	orr.w	r2, r3, #32
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e021      	b.n	80030d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	0c1b      	lsrs	r3, r3, #16
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b01      	cmp	r3, #1
 8003094:	d10c      	bne.n	80030b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	43da      	mvns	r2, r3
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	4013      	ands	r3, r2
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	bf14      	ite	ne
 80030a8:	2301      	movne	r3, #1
 80030aa:	2300      	moveq	r3, #0
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	e00b      	b.n	80030c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	43da      	mvns	r2, r3
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	4013      	ands	r3, r2
 80030bc:	b29b      	uxth	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	bf14      	ite	ne
 80030c2:	2301      	movne	r3, #1
 80030c4:	2300      	moveq	r3, #0
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f47f af6d 	bne.w	8002fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030e4:	e034      	b.n	8003150 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	f000 f8e3 	bl	80032b2 <I2C_IsAcknowledgeFailed>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e034      	b.n	8003160 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030fc:	d028      	beq.n	8003150 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030fe:	f7fe fa33 	bl	8001568 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	429a      	cmp	r2, r3
 800310c:	d302      	bcc.n	8003114 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d11d      	bne.n	8003150 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800311e:	2b80      	cmp	r3, #128	@ 0x80
 8003120:	d016      	beq.n	8003150 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2220      	movs	r2, #32
 800312c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313c:	f043 0220 	orr.w	r2, r3, #32
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e007      	b.n	8003160 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800315a:	2b80      	cmp	r3, #128	@ 0x80
 800315c:	d1c3      	bne.n	80030e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003174:	e034      	b.n	80031e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f000 f89b 	bl	80032b2 <I2C_IsAcknowledgeFailed>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e034      	b.n	80031f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800318c:	d028      	beq.n	80031e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800318e:	f7fe f9eb 	bl	8001568 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	68ba      	ldr	r2, [r7, #8]
 800319a:	429a      	cmp	r2, r3
 800319c:	d302      	bcc.n	80031a4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d11d      	bne.n	80031e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	f003 0304 	and.w	r3, r3, #4
 80031ae:	2b04      	cmp	r3, #4
 80031b0:	d016      	beq.n	80031e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2220      	movs	r2, #32
 80031bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031cc:	f043 0220 	orr.w	r2, r3, #32
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e007      	b.n	80031f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	f003 0304 	and.w	r3, r3, #4
 80031ea:	2b04      	cmp	r3, #4
 80031ec:	d1c3      	bne.n	8003176 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3710      	adds	r7, #16
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003204:	e049      	b.n	800329a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	695b      	ldr	r3, [r3, #20]
 800320c:	f003 0310 	and.w	r3, r3, #16
 8003210:	2b10      	cmp	r3, #16
 8003212:	d119      	bne.n	8003248 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f06f 0210 	mvn.w	r2, #16
 800321c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2220      	movs	r2, #32
 8003228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e030      	b.n	80032aa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003248:	f7fe f98e 	bl	8001568 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	429a      	cmp	r2, r3
 8003256:	d302      	bcc.n	800325e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d11d      	bne.n	800329a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003268:	2b40      	cmp	r3, #64	@ 0x40
 800326a:	d016      	beq.n	800329a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2220      	movs	r2, #32
 8003276:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003286:	f043 0220 	orr.w	r2, r3, #32
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e007      	b.n	80032aa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	695b      	ldr	r3, [r3, #20]
 80032a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032a4:	2b40      	cmp	r3, #64	@ 0x40
 80032a6:	d1ae      	bne.n	8003206 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032b2:	b480      	push	{r7}
 80032b4:	b083      	sub	sp, #12
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032c8:	d11b      	bne.n	8003302 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80032d2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2220      	movs	r2, #32
 80032de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ee:	f043 0204 	orr.w	r2, r3, #4
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e000      	b.n	8003304 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d101      	bne.n	8003324 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e0cc      	b.n	80034be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003324:	4b68      	ldr	r3, [pc, #416]	@ (80034c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 030f 	and.w	r3, r3, #15
 800332c:	683a      	ldr	r2, [r7, #0]
 800332e:	429a      	cmp	r2, r3
 8003330:	d90c      	bls.n	800334c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003332:	4b65      	ldr	r3, [pc, #404]	@ (80034c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	b2d2      	uxtb	r2, r2
 8003338:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800333a:	4b63      	ldr	r3, [pc, #396]	@ (80034c8 <HAL_RCC_ClockConfig+0x1b8>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 030f 	and.w	r3, r3, #15
 8003342:	683a      	ldr	r2, [r7, #0]
 8003344:	429a      	cmp	r2, r3
 8003346:	d001      	beq.n	800334c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e0b8      	b.n	80034be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d020      	beq.n	800339a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0304 	and.w	r3, r3, #4
 8003360:	2b00      	cmp	r3, #0
 8003362:	d005      	beq.n	8003370 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003364:	4b59      	ldr	r3, [pc, #356]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	4a58      	ldr	r2, [pc, #352]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 800336a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800336e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0308 	and.w	r3, r3, #8
 8003378:	2b00      	cmp	r3, #0
 800337a:	d005      	beq.n	8003388 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800337c:	4b53      	ldr	r3, [pc, #332]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	4a52      	ldr	r2, [pc, #328]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 8003382:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003386:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003388:	4b50      	ldr	r3, [pc, #320]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	494d      	ldr	r1, [pc, #308]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 8003396:	4313      	orrs	r3, r2
 8003398:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d044      	beq.n	8003430 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d107      	bne.n	80033be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ae:	4b47      	ldr	r3, [pc, #284]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d119      	bne.n	80033ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e07f      	b.n	80034be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d003      	beq.n	80033ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033ca:	2b03      	cmp	r3, #3
 80033cc:	d107      	bne.n	80033de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ce:	4b3f      	ldr	r3, [pc, #252]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d109      	bne.n	80033ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e06f      	b.n	80034be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033de:	4b3b      	ldr	r3, [pc, #236]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e067      	b.n	80034be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033ee:	4b37      	ldr	r3, [pc, #220]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f023 0203 	bic.w	r2, r3, #3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	4934      	ldr	r1, [pc, #208]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003400:	f7fe f8b2 	bl	8001568 <HAL_GetTick>
 8003404:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003406:	e00a      	b.n	800341e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003408:	f7fe f8ae 	bl	8001568 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003416:	4293      	cmp	r3, r2
 8003418:	d901      	bls.n	800341e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e04f      	b.n	80034be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800341e:	4b2b      	ldr	r3, [pc, #172]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 020c 	and.w	r2, r3, #12
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	429a      	cmp	r2, r3
 800342e:	d1eb      	bne.n	8003408 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003430:	4b25      	ldr	r3, [pc, #148]	@ (80034c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 030f 	and.w	r3, r3, #15
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	429a      	cmp	r2, r3
 800343c:	d20c      	bcs.n	8003458 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800343e:	4b22      	ldr	r3, [pc, #136]	@ (80034c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	b2d2      	uxtb	r2, r2
 8003444:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003446:	4b20      	ldr	r3, [pc, #128]	@ (80034c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 030f 	and.w	r3, r3, #15
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	429a      	cmp	r2, r3
 8003452:	d001      	beq.n	8003458 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e032      	b.n	80034be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0304 	and.w	r3, r3, #4
 8003460:	2b00      	cmp	r3, #0
 8003462:	d008      	beq.n	8003476 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003464:	4b19      	ldr	r3, [pc, #100]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	4916      	ldr	r1, [pc, #88]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 8003472:	4313      	orrs	r3, r2
 8003474:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0308 	and.w	r3, r3, #8
 800347e:	2b00      	cmp	r3, #0
 8003480:	d009      	beq.n	8003496 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003482:	4b12      	ldr	r3, [pc, #72]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	490e      	ldr	r1, [pc, #56]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 8003492:	4313      	orrs	r3, r2
 8003494:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003496:	f000 f887 	bl	80035a8 <HAL_RCC_GetSysClockFreq>
 800349a:	4602      	mov	r2, r0
 800349c:	4b0b      	ldr	r3, [pc, #44]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	091b      	lsrs	r3, r3, #4
 80034a2:	f003 030f 	and.w	r3, r3, #15
 80034a6:	490a      	ldr	r1, [pc, #40]	@ (80034d0 <HAL_RCC_ClockConfig+0x1c0>)
 80034a8:	5ccb      	ldrb	r3, [r1, r3]
 80034aa:	fa22 f303 	lsr.w	r3, r2, r3
 80034ae:	4a09      	ldr	r2, [pc, #36]	@ (80034d4 <HAL_RCC_ClockConfig+0x1c4>)
 80034b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034b2:	4b09      	ldr	r3, [pc, #36]	@ (80034d8 <HAL_RCC_ClockConfig+0x1c8>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7fd fe60 	bl	800117c <HAL_InitTick>

  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	40023c00 	.word	0x40023c00
 80034cc:	40023800 	.word	0x40023800
 80034d0:	08009680 	.word	0x08009680
 80034d4:	2000000c 	.word	0x2000000c
 80034d8:	20000010 	.word	0x20000010

080034dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034e0:	4b03      	ldr	r3, [pc, #12]	@ (80034f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80034e2:	681b      	ldr	r3, [r3, #0]
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	2000000c 	.word	0x2000000c

080034f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034f8:	f7ff fff0 	bl	80034dc <HAL_RCC_GetHCLKFreq>
 80034fc:	4602      	mov	r2, r0
 80034fe:	4b05      	ldr	r3, [pc, #20]	@ (8003514 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	0a9b      	lsrs	r3, r3, #10
 8003504:	f003 0307 	and.w	r3, r3, #7
 8003508:	4903      	ldr	r1, [pc, #12]	@ (8003518 <HAL_RCC_GetPCLK1Freq+0x24>)
 800350a:	5ccb      	ldrb	r3, [r1, r3]
 800350c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003510:	4618      	mov	r0, r3
 8003512:	bd80      	pop	{r7, pc}
 8003514:	40023800 	.word	0x40023800
 8003518:	08009690 	.word	0x08009690

0800351c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003520:	f7ff ffdc 	bl	80034dc <HAL_RCC_GetHCLKFreq>
 8003524:	4602      	mov	r2, r0
 8003526:	4b05      	ldr	r3, [pc, #20]	@ (800353c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	0b5b      	lsrs	r3, r3, #13
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	4903      	ldr	r1, [pc, #12]	@ (8003540 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003532:	5ccb      	ldrb	r3, [r1, r3]
 8003534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003538:	4618      	mov	r0, r3
 800353a:	bd80      	pop	{r7, pc}
 800353c:	40023800 	.word	0x40023800
 8003540:	08009690 	.word	0x08009690

08003544 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	220f      	movs	r2, #15
 8003552:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003554:	4b12      	ldr	r3, [pc, #72]	@ (80035a0 <HAL_RCC_GetClockConfig+0x5c>)
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f003 0203 	and.w	r2, r3, #3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003560:	4b0f      	ldr	r3, [pc, #60]	@ (80035a0 <HAL_RCC_GetClockConfig+0x5c>)
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800356c:	4b0c      	ldr	r3, [pc, #48]	@ (80035a0 <HAL_RCC_GetClockConfig+0x5c>)
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003578:	4b09      	ldr	r3, [pc, #36]	@ (80035a0 <HAL_RCC_GetClockConfig+0x5c>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	08db      	lsrs	r3, r3, #3
 800357e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003586:	4b07      	ldr	r3, [pc, #28]	@ (80035a4 <HAL_RCC_GetClockConfig+0x60>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 020f 	and.w	r2, r3, #15
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	601a      	str	r2, [r3, #0]
}
 8003592:	bf00      	nop
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	40023800 	.word	0x40023800
 80035a4:	40023c00 	.word	0x40023c00

080035a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035ac:	b0ae      	sub	sp, #184	@ 0xb8
 80035ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80035b0:	2300      	movs	r3, #0
 80035b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80035b6:	2300      	movs	r3, #0
 80035b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80035bc:	2300      	movs	r3, #0
 80035be:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80035c2:	2300      	movs	r3, #0
 80035c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80035c8:	2300      	movs	r3, #0
 80035ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035ce:	4bcb      	ldr	r3, [pc, #812]	@ (80038fc <HAL_RCC_GetSysClockFreq+0x354>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f003 030c 	and.w	r3, r3, #12
 80035d6:	2b0c      	cmp	r3, #12
 80035d8:	f200 8206 	bhi.w	80039e8 <HAL_RCC_GetSysClockFreq+0x440>
 80035dc:	a201      	add	r2, pc, #4	@ (adr r2, 80035e4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80035de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e2:	bf00      	nop
 80035e4:	08003619 	.word	0x08003619
 80035e8:	080039e9 	.word	0x080039e9
 80035ec:	080039e9 	.word	0x080039e9
 80035f0:	080039e9 	.word	0x080039e9
 80035f4:	08003621 	.word	0x08003621
 80035f8:	080039e9 	.word	0x080039e9
 80035fc:	080039e9 	.word	0x080039e9
 8003600:	080039e9 	.word	0x080039e9
 8003604:	08003629 	.word	0x08003629
 8003608:	080039e9 	.word	0x080039e9
 800360c:	080039e9 	.word	0x080039e9
 8003610:	080039e9 	.word	0x080039e9
 8003614:	08003819 	.word	0x08003819
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003618:	4bb9      	ldr	r3, [pc, #740]	@ (8003900 <HAL_RCC_GetSysClockFreq+0x358>)
 800361a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 800361e:	e1e7      	b.n	80039f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003620:	4bb8      	ldr	r3, [pc, #736]	@ (8003904 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003622:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003626:	e1e3      	b.n	80039f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003628:	4bb4      	ldr	r3, [pc, #720]	@ (80038fc <HAL_RCC_GetSysClockFreq+0x354>)
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003630:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003634:	4bb1      	ldr	r3, [pc, #708]	@ (80038fc <HAL_RCC_GetSysClockFreq+0x354>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d071      	beq.n	8003724 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003640:	4bae      	ldr	r3, [pc, #696]	@ (80038fc <HAL_RCC_GetSysClockFreq+0x354>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	099b      	lsrs	r3, r3, #6
 8003646:	2200      	movs	r2, #0
 8003648:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800364c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003650:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003654:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003658:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800365c:	2300      	movs	r3, #0
 800365e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003662:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003666:	4622      	mov	r2, r4
 8003668:	462b      	mov	r3, r5
 800366a:	f04f 0000 	mov.w	r0, #0
 800366e:	f04f 0100 	mov.w	r1, #0
 8003672:	0159      	lsls	r1, r3, #5
 8003674:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003678:	0150      	lsls	r0, r2, #5
 800367a:	4602      	mov	r2, r0
 800367c:	460b      	mov	r3, r1
 800367e:	4621      	mov	r1, r4
 8003680:	1a51      	subs	r1, r2, r1
 8003682:	6439      	str	r1, [r7, #64]	@ 0x40
 8003684:	4629      	mov	r1, r5
 8003686:	eb63 0301 	sbc.w	r3, r3, r1
 800368a:	647b      	str	r3, [r7, #68]	@ 0x44
 800368c:	f04f 0200 	mov.w	r2, #0
 8003690:	f04f 0300 	mov.w	r3, #0
 8003694:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003698:	4649      	mov	r1, r9
 800369a:	018b      	lsls	r3, r1, #6
 800369c:	4641      	mov	r1, r8
 800369e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036a2:	4641      	mov	r1, r8
 80036a4:	018a      	lsls	r2, r1, #6
 80036a6:	4641      	mov	r1, r8
 80036a8:	1a51      	subs	r1, r2, r1
 80036aa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80036ac:	4649      	mov	r1, r9
 80036ae:	eb63 0301 	sbc.w	r3, r3, r1
 80036b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036b4:	f04f 0200 	mov.w	r2, #0
 80036b8:	f04f 0300 	mov.w	r3, #0
 80036bc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80036c0:	4649      	mov	r1, r9
 80036c2:	00cb      	lsls	r3, r1, #3
 80036c4:	4641      	mov	r1, r8
 80036c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036ca:	4641      	mov	r1, r8
 80036cc:	00ca      	lsls	r2, r1, #3
 80036ce:	4610      	mov	r0, r2
 80036d0:	4619      	mov	r1, r3
 80036d2:	4603      	mov	r3, r0
 80036d4:	4622      	mov	r2, r4
 80036d6:	189b      	adds	r3, r3, r2
 80036d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80036da:	462b      	mov	r3, r5
 80036dc:	460a      	mov	r2, r1
 80036de:	eb42 0303 	adc.w	r3, r2, r3
 80036e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80036e4:	f04f 0200 	mov.w	r2, #0
 80036e8:	f04f 0300 	mov.w	r3, #0
 80036ec:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80036f0:	4629      	mov	r1, r5
 80036f2:	024b      	lsls	r3, r1, #9
 80036f4:	4621      	mov	r1, r4
 80036f6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80036fa:	4621      	mov	r1, r4
 80036fc:	024a      	lsls	r2, r1, #9
 80036fe:	4610      	mov	r0, r2
 8003700:	4619      	mov	r1, r3
 8003702:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003706:	2200      	movs	r2, #0
 8003708:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800370c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003710:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003714:	f7fc fdcc 	bl	80002b0 <__aeabi_uldivmod>
 8003718:	4602      	mov	r2, r0
 800371a:	460b      	mov	r3, r1
 800371c:	4613      	mov	r3, r2
 800371e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003722:	e067      	b.n	80037f4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003724:	4b75      	ldr	r3, [pc, #468]	@ (80038fc <HAL_RCC_GetSysClockFreq+0x354>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	099b      	lsrs	r3, r3, #6
 800372a:	2200      	movs	r2, #0
 800372c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003730:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003734:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800373c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800373e:	2300      	movs	r3, #0
 8003740:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003742:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003746:	4622      	mov	r2, r4
 8003748:	462b      	mov	r3, r5
 800374a:	f04f 0000 	mov.w	r0, #0
 800374e:	f04f 0100 	mov.w	r1, #0
 8003752:	0159      	lsls	r1, r3, #5
 8003754:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003758:	0150      	lsls	r0, r2, #5
 800375a:	4602      	mov	r2, r0
 800375c:	460b      	mov	r3, r1
 800375e:	4621      	mov	r1, r4
 8003760:	1a51      	subs	r1, r2, r1
 8003762:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003764:	4629      	mov	r1, r5
 8003766:	eb63 0301 	sbc.w	r3, r3, r1
 800376a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800376c:	f04f 0200 	mov.w	r2, #0
 8003770:	f04f 0300 	mov.w	r3, #0
 8003774:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003778:	4649      	mov	r1, r9
 800377a:	018b      	lsls	r3, r1, #6
 800377c:	4641      	mov	r1, r8
 800377e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003782:	4641      	mov	r1, r8
 8003784:	018a      	lsls	r2, r1, #6
 8003786:	4641      	mov	r1, r8
 8003788:	ebb2 0a01 	subs.w	sl, r2, r1
 800378c:	4649      	mov	r1, r9
 800378e:	eb63 0b01 	sbc.w	fp, r3, r1
 8003792:	f04f 0200 	mov.w	r2, #0
 8003796:	f04f 0300 	mov.w	r3, #0
 800379a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800379e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80037a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037a6:	4692      	mov	sl, r2
 80037a8:	469b      	mov	fp, r3
 80037aa:	4623      	mov	r3, r4
 80037ac:	eb1a 0303 	adds.w	r3, sl, r3
 80037b0:	623b      	str	r3, [r7, #32]
 80037b2:	462b      	mov	r3, r5
 80037b4:	eb4b 0303 	adc.w	r3, fp, r3
 80037b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80037ba:	f04f 0200 	mov.w	r2, #0
 80037be:	f04f 0300 	mov.w	r3, #0
 80037c2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80037c6:	4629      	mov	r1, r5
 80037c8:	028b      	lsls	r3, r1, #10
 80037ca:	4621      	mov	r1, r4
 80037cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037d0:	4621      	mov	r1, r4
 80037d2:	028a      	lsls	r2, r1, #10
 80037d4:	4610      	mov	r0, r2
 80037d6:	4619      	mov	r1, r3
 80037d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80037dc:	2200      	movs	r2, #0
 80037de:	673b      	str	r3, [r7, #112]	@ 0x70
 80037e0:	677a      	str	r2, [r7, #116]	@ 0x74
 80037e2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80037e6:	f7fc fd63 	bl	80002b0 <__aeabi_uldivmod>
 80037ea:	4602      	mov	r2, r0
 80037ec:	460b      	mov	r3, r1
 80037ee:	4613      	mov	r3, r2
 80037f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037f4:	4b41      	ldr	r3, [pc, #260]	@ (80038fc <HAL_RCC_GetSysClockFreq+0x354>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	0c1b      	lsrs	r3, r3, #16
 80037fa:	f003 0303 	and.w	r3, r3, #3
 80037fe:	3301      	adds	r3, #1
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8003806:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800380a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800380e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003812:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003816:	e0eb      	b.n	80039f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003818:	4b38      	ldr	r3, [pc, #224]	@ (80038fc <HAL_RCC_GetSysClockFreq+0x354>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003820:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003824:	4b35      	ldr	r3, [pc, #212]	@ (80038fc <HAL_RCC_GetSysClockFreq+0x354>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d06b      	beq.n	8003908 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003830:	4b32      	ldr	r3, [pc, #200]	@ (80038fc <HAL_RCC_GetSysClockFreq+0x354>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	099b      	lsrs	r3, r3, #6
 8003836:	2200      	movs	r2, #0
 8003838:	66bb      	str	r3, [r7, #104]	@ 0x68
 800383a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800383c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800383e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003842:	663b      	str	r3, [r7, #96]	@ 0x60
 8003844:	2300      	movs	r3, #0
 8003846:	667b      	str	r3, [r7, #100]	@ 0x64
 8003848:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800384c:	4622      	mov	r2, r4
 800384e:	462b      	mov	r3, r5
 8003850:	f04f 0000 	mov.w	r0, #0
 8003854:	f04f 0100 	mov.w	r1, #0
 8003858:	0159      	lsls	r1, r3, #5
 800385a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800385e:	0150      	lsls	r0, r2, #5
 8003860:	4602      	mov	r2, r0
 8003862:	460b      	mov	r3, r1
 8003864:	4621      	mov	r1, r4
 8003866:	1a51      	subs	r1, r2, r1
 8003868:	61b9      	str	r1, [r7, #24]
 800386a:	4629      	mov	r1, r5
 800386c:	eb63 0301 	sbc.w	r3, r3, r1
 8003870:	61fb      	str	r3, [r7, #28]
 8003872:	f04f 0200 	mov.w	r2, #0
 8003876:	f04f 0300 	mov.w	r3, #0
 800387a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800387e:	4659      	mov	r1, fp
 8003880:	018b      	lsls	r3, r1, #6
 8003882:	4651      	mov	r1, sl
 8003884:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003888:	4651      	mov	r1, sl
 800388a:	018a      	lsls	r2, r1, #6
 800388c:	4651      	mov	r1, sl
 800388e:	ebb2 0801 	subs.w	r8, r2, r1
 8003892:	4659      	mov	r1, fp
 8003894:	eb63 0901 	sbc.w	r9, r3, r1
 8003898:	f04f 0200 	mov.w	r2, #0
 800389c:	f04f 0300 	mov.w	r3, #0
 80038a0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038a4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038a8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038ac:	4690      	mov	r8, r2
 80038ae:	4699      	mov	r9, r3
 80038b0:	4623      	mov	r3, r4
 80038b2:	eb18 0303 	adds.w	r3, r8, r3
 80038b6:	613b      	str	r3, [r7, #16]
 80038b8:	462b      	mov	r3, r5
 80038ba:	eb49 0303 	adc.w	r3, r9, r3
 80038be:	617b      	str	r3, [r7, #20]
 80038c0:	f04f 0200 	mov.w	r2, #0
 80038c4:	f04f 0300 	mov.w	r3, #0
 80038c8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80038cc:	4629      	mov	r1, r5
 80038ce:	024b      	lsls	r3, r1, #9
 80038d0:	4621      	mov	r1, r4
 80038d2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80038d6:	4621      	mov	r1, r4
 80038d8:	024a      	lsls	r2, r1, #9
 80038da:	4610      	mov	r0, r2
 80038dc:	4619      	mov	r1, r3
 80038de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80038e2:	2200      	movs	r2, #0
 80038e4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80038e6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80038e8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80038ec:	f7fc fce0 	bl	80002b0 <__aeabi_uldivmod>
 80038f0:	4602      	mov	r2, r0
 80038f2:	460b      	mov	r3, r1
 80038f4:	4613      	mov	r3, r2
 80038f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80038fa:	e065      	b.n	80039c8 <HAL_RCC_GetSysClockFreq+0x420>
 80038fc:	40023800 	.word	0x40023800
 8003900:	00f42400 	.word	0x00f42400
 8003904:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003908:	4b3d      	ldr	r3, [pc, #244]	@ (8003a00 <HAL_RCC_GetSysClockFreq+0x458>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	099b      	lsrs	r3, r3, #6
 800390e:	2200      	movs	r2, #0
 8003910:	4618      	mov	r0, r3
 8003912:	4611      	mov	r1, r2
 8003914:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003918:	653b      	str	r3, [r7, #80]	@ 0x50
 800391a:	2300      	movs	r3, #0
 800391c:	657b      	str	r3, [r7, #84]	@ 0x54
 800391e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003922:	4642      	mov	r2, r8
 8003924:	464b      	mov	r3, r9
 8003926:	f04f 0000 	mov.w	r0, #0
 800392a:	f04f 0100 	mov.w	r1, #0
 800392e:	0159      	lsls	r1, r3, #5
 8003930:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003934:	0150      	lsls	r0, r2, #5
 8003936:	4602      	mov	r2, r0
 8003938:	460b      	mov	r3, r1
 800393a:	4641      	mov	r1, r8
 800393c:	1a51      	subs	r1, r2, r1
 800393e:	60b9      	str	r1, [r7, #8]
 8003940:	4649      	mov	r1, r9
 8003942:	eb63 0301 	sbc.w	r3, r3, r1
 8003946:	60fb      	str	r3, [r7, #12]
 8003948:	f04f 0200 	mov.w	r2, #0
 800394c:	f04f 0300 	mov.w	r3, #0
 8003950:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003954:	4659      	mov	r1, fp
 8003956:	018b      	lsls	r3, r1, #6
 8003958:	4651      	mov	r1, sl
 800395a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800395e:	4651      	mov	r1, sl
 8003960:	018a      	lsls	r2, r1, #6
 8003962:	4651      	mov	r1, sl
 8003964:	1a54      	subs	r4, r2, r1
 8003966:	4659      	mov	r1, fp
 8003968:	eb63 0501 	sbc.w	r5, r3, r1
 800396c:	f04f 0200 	mov.w	r2, #0
 8003970:	f04f 0300 	mov.w	r3, #0
 8003974:	00eb      	lsls	r3, r5, #3
 8003976:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800397a:	00e2      	lsls	r2, r4, #3
 800397c:	4614      	mov	r4, r2
 800397e:	461d      	mov	r5, r3
 8003980:	4643      	mov	r3, r8
 8003982:	18e3      	adds	r3, r4, r3
 8003984:	603b      	str	r3, [r7, #0]
 8003986:	464b      	mov	r3, r9
 8003988:	eb45 0303 	adc.w	r3, r5, r3
 800398c:	607b      	str	r3, [r7, #4]
 800398e:	f04f 0200 	mov.w	r2, #0
 8003992:	f04f 0300 	mov.w	r3, #0
 8003996:	e9d7 4500 	ldrd	r4, r5, [r7]
 800399a:	4629      	mov	r1, r5
 800399c:	028b      	lsls	r3, r1, #10
 800399e:	4621      	mov	r1, r4
 80039a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039a4:	4621      	mov	r1, r4
 80039a6:	028a      	lsls	r2, r1, #10
 80039a8:	4610      	mov	r0, r2
 80039aa:	4619      	mov	r1, r3
 80039ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80039b0:	2200      	movs	r2, #0
 80039b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039b4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80039b6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80039ba:	f7fc fc79 	bl	80002b0 <__aeabi_uldivmod>
 80039be:	4602      	mov	r2, r0
 80039c0:	460b      	mov	r3, r1
 80039c2:	4613      	mov	r3, r2
 80039c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80039c8:	4b0d      	ldr	r3, [pc, #52]	@ (8003a00 <HAL_RCC_GetSysClockFreq+0x458>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	0f1b      	lsrs	r3, r3, #28
 80039ce:	f003 0307 	and.w	r3, r3, #7
 80039d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80039d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80039da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80039de:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80039e6:	e003      	b.n	80039f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039e8:	4b06      	ldr	r3, [pc, #24]	@ (8003a04 <HAL_RCC_GetSysClockFreq+0x45c>)
 80039ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80039ee:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	37b8      	adds	r7, #184	@ 0xb8
 80039f8:	46bd      	mov	sp, r7
 80039fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039fe:	bf00      	nop
 8003a00:	40023800 	.word	0x40023800
 8003a04:	00f42400 	.word	0x00f42400

08003a08 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e28d      	b.n	8003f36 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 8083 	beq.w	8003b2e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003a28:	4b94      	ldr	r3, [pc, #592]	@ (8003c7c <HAL_RCC_OscConfig+0x274>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f003 030c 	and.w	r3, r3, #12
 8003a30:	2b04      	cmp	r3, #4
 8003a32:	d019      	beq.n	8003a68 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003a34:	4b91      	ldr	r3, [pc, #580]	@ (8003c7c <HAL_RCC_OscConfig+0x274>)
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003a3c:	2b08      	cmp	r3, #8
 8003a3e:	d106      	bne.n	8003a4e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003a40:	4b8e      	ldr	r3, [pc, #568]	@ (8003c7c <HAL_RCC_OscConfig+0x274>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a4c:	d00c      	beq.n	8003a68 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a4e:	4b8b      	ldr	r3, [pc, #556]	@ (8003c7c <HAL_RCC_OscConfig+0x274>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003a56:	2b0c      	cmp	r3, #12
 8003a58:	d112      	bne.n	8003a80 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a5a:	4b88      	ldr	r3, [pc, #544]	@ (8003c7c <HAL_RCC_OscConfig+0x274>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a66:	d10b      	bne.n	8003a80 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a68:	4b84      	ldr	r3, [pc, #528]	@ (8003c7c <HAL_RCC_OscConfig+0x274>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d05b      	beq.n	8003b2c <HAL_RCC_OscConfig+0x124>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d157      	bne.n	8003b2c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e25a      	b.n	8003f36 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a88:	d106      	bne.n	8003a98 <HAL_RCC_OscConfig+0x90>
 8003a8a:	4b7c      	ldr	r3, [pc, #496]	@ (8003c7c <HAL_RCC_OscConfig+0x274>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a7b      	ldr	r2, [pc, #492]	@ (8003c7c <HAL_RCC_OscConfig+0x274>)
 8003a90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a94:	6013      	str	r3, [r2, #0]
 8003a96:	e01d      	b.n	8003ad4 <HAL_RCC_OscConfig+0xcc>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003aa0:	d10c      	bne.n	8003abc <HAL_RCC_OscConfig+0xb4>
 8003aa2:	4b76      	ldr	r3, [pc, #472]	@ (8003c7c <HAL_RCC_OscConfig+0x274>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a75      	ldr	r2, [pc, #468]	@ (8003c7c <HAL_RCC_OscConfig+0x274>)
 8003aa8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003aac:	6013      	str	r3, [r2, #0]
 8003aae:	4b73      	ldr	r3, [pc, #460]	@ (8003c7c <HAL_RCC_OscConfig+0x274>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a72      	ldr	r2, [pc, #456]	@ (8003c7c <HAL_RCC_OscConfig+0x274>)
 8003ab4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ab8:	6013      	str	r3, [r2, #0]
 8003aba:	e00b      	b.n	8003ad4 <HAL_RCC_OscConfig+0xcc>
 8003abc:	4b6f      	ldr	r3, [pc, #444]	@ (8003c7c <HAL_RCC_OscConfig+0x274>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a6e      	ldr	r2, [pc, #440]	@ (8003c7c <HAL_RCC_OscConfig+0x274>)
 8003ac2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ac6:	6013      	str	r3, [r2, #0]
 8003ac8:	4b6c      	ldr	r3, [pc, #432]	@ (8003c7c <HAL_RCC_OscConfig+0x274>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a6b      	ldr	r2, [pc, #428]	@ (8003c7c <HAL_RCC_OscConfig+0x274>)
 8003ace:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ad2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d013      	beq.n	8003b04 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003adc:	f7fd fd44 	bl	8001568 <HAL_GetTick>
 8003ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ae2:	e008      	b.n	8003af6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ae4:	f7fd fd40 	bl	8001568 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b64      	cmp	r3, #100	@ 0x64
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e21f      	b.n	8003f36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003af6:	4b61      	ldr	r3, [pc, #388]	@ (8003c7c <HAL_RCC_OscConfig+0x274>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d0f0      	beq.n	8003ae4 <HAL_RCC_OscConfig+0xdc>
 8003b02:	e014      	b.n	8003b2e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b04:	f7fd fd30 	bl	8001568 <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b0c:	f7fd fd2c 	bl	8001568 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b64      	cmp	r3, #100	@ 0x64
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e20b      	b.n	8003f36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b1e:	4b57      	ldr	r3, [pc, #348]	@ (8003c7c <HAL_RCC_OscConfig+0x274>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1f0      	bne.n	8003b0c <HAL_RCC_OscConfig+0x104>
 8003b2a:	e000      	b.n	8003b2e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d06f      	beq.n	8003c1a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003b3a:	4b50      	ldr	r3, [pc, #320]	@ (8003c7c <HAL_RCC_OscConfig+0x274>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f003 030c 	and.w	r3, r3, #12
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d017      	beq.n	8003b76 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003b46:	4b4d      	ldr	r3, [pc, #308]	@ (8003c7c <HAL_RCC_OscConfig+0x274>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003b4e:	2b08      	cmp	r3, #8
 8003b50:	d105      	bne.n	8003b5e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003b52:	4b4a      	ldr	r3, [pc, #296]	@ (8003c7c <HAL_RCC_OscConfig+0x274>)
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00b      	beq.n	8003b76 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b5e:	4b47      	ldr	r3, [pc, #284]	@ (8003c7c <HAL_RCC_OscConfig+0x274>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003b66:	2b0c      	cmp	r3, #12
 8003b68:	d11c      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b6a:	4b44      	ldr	r3, [pc, #272]	@ (8003c7c <HAL_RCC_OscConfig+0x274>)
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d116      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b76:	4b41      	ldr	r3, [pc, #260]	@ (8003c7c <HAL_RCC_OscConfig+0x274>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d005      	beq.n	8003b8e <HAL_RCC_OscConfig+0x186>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d001      	beq.n	8003b8e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e1d3      	b.n	8003f36 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b8e:	4b3b      	ldr	r3, [pc, #236]	@ (8003c7c <HAL_RCC_OscConfig+0x274>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	4937      	ldr	r1, [pc, #220]	@ (8003c7c <HAL_RCC_OscConfig+0x274>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ba2:	e03a      	b.n	8003c1a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d020      	beq.n	8003bee <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bac:	4b34      	ldr	r3, [pc, #208]	@ (8003c80 <HAL_RCC_OscConfig+0x278>)
 8003bae:	2201      	movs	r2, #1
 8003bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb2:	f7fd fcd9 	bl	8001568 <HAL_GetTick>
 8003bb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bb8:	e008      	b.n	8003bcc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bba:	f7fd fcd5 	bl	8001568 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d901      	bls.n	8003bcc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e1b4      	b.n	8003f36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bcc:	4b2b      	ldr	r3, [pc, #172]	@ (8003c7c <HAL_RCC_OscConfig+0x274>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d0f0      	beq.n	8003bba <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bd8:	4b28      	ldr	r3, [pc, #160]	@ (8003c7c <HAL_RCC_OscConfig+0x274>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	00db      	lsls	r3, r3, #3
 8003be6:	4925      	ldr	r1, [pc, #148]	@ (8003c7c <HAL_RCC_OscConfig+0x274>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	600b      	str	r3, [r1, #0]
 8003bec:	e015      	b.n	8003c1a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bee:	4b24      	ldr	r3, [pc, #144]	@ (8003c80 <HAL_RCC_OscConfig+0x278>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf4:	f7fd fcb8 	bl	8001568 <HAL_GetTick>
 8003bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bfa:	e008      	b.n	8003c0e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bfc:	f7fd fcb4 	bl	8001568 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e193      	b.n	8003f36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c0e:	4b1b      	ldr	r3, [pc, #108]	@ (8003c7c <HAL_RCC_OscConfig+0x274>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1f0      	bne.n	8003bfc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0308 	and.w	r3, r3, #8
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d036      	beq.n	8003c94 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d016      	beq.n	8003c5c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c2e:	4b15      	ldr	r3, [pc, #84]	@ (8003c84 <HAL_RCC_OscConfig+0x27c>)
 8003c30:	2201      	movs	r2, #1
 8003c32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c34:	f7fd fc98 	bl	8001568 <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c3c:	f7fd fc94 	bl	8001568 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e173      	b.n	8003f36 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8003c7c <HAL_RCC_OscConfig+0x274>)
 8003c50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d0f0      	beq.n	8003c3c <HAL_RCC_OscConfig+0x234>
 8003c5a:	e01b      	b.n	8003c94 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c5c:	4b09      	ldr	r3, [pc, #36]	@ (8003c84 <HAL_RCC_OscConfig+0x27c>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c62:	f7fd fc81 	bl	8001568 <HAL_GetTick>
 8003c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c68:	e00e      	b.n	8003c88 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c6a:	f7fd fc7d 	bl	8001568 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d907      	bls.n	8003c88 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e15c      	b.n	8003f36 <HAL_RCC_OscConfig+0x52e>
 8003c7c:	40023800 	.word	0x40023800
 8003c80:	42470000 	.word	0x42470000
 8003c84:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c88:	4b8a      	ldr	r3, [pc, #552]	@ (8003eb4 <HAL_RCC_OscConfig+0x4ac>)
 8003c8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c8c:	f003 0302 	and.w	r3, r3, #2
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1ea      	bne.n	8003c6a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0304 	and.w	r3, r3, #4
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f000 8097 	beq.w	8003dd0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ca6:	4b83      	ldr	r3, [pc, #524]	@ (8003eb4 <HAL_RCC_OscConfig+0x4ac>)
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003caa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10f      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	60bb      	str	r3, [r7, #8]
 8003cb6:	4b7f      	ldr	r3, [pc, #508]	@ (8003eb4 <HAL_RCC_OscConfig+0x4ac>)
 8003cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cba:	4a7e      	ldr	r2, [pc, #504]	@ (8003eb4 <HAL_RCC_OscConfig+0x4ac>)
 8003cbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cc2:	4b7c      	ldr	r3, [pc, #496]	@ (8003eb4 <HAL_RCC_OscConfig+0x4ac>)
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cca:	60bb      	str	r3, [r7, #8]
 8003ccc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cd2:	4b79      	ldr	r3, [pc, #484]	@ (8003eb8 <HAL_RCC_OscConfig+0x4b0>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d118      	bne.n	8003d10 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cde:	4b76      	ldr	r3, [pc, #472]	@ (8003eb8 <HAL_RCC_OscConfig+0x4b0>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a75      	ldr	r2, [pc, #468]	@ (8003eb8 <HAL_RCC_OscConfig+0x4b0>)
 8003ce4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ce8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cea:	f7fd fc3d 	bl	8001568 <HAL_GetTick>
 8003cee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cf0:	e008      	b.n	8003d04 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cf2:	f7fd fc39 	bl	8001568 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d901      	bls.n	8003d04 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e118      	b.n	8003f36 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d04:	4b6c      	ldr	r3, [pc, #432]	@ (8003eb8 <HAL_RCC_OscConfig+0x4b0>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d0f0      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d106      	bne.n	8003d26 <HAL_RCC_OscConfig+0x31e>
 8003d18:	4b66      	ldr	r3, [pc, #408]	@ (8003eb4 <HAL_RCC_OscConfig+0x4ac>)
 8003d1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d1c:	4a65      	ldr	r2, [pc, #404]	@ (8003eb4 <HAL_RCC_OscConfig+0x4ac>)
 8003d1e:	f043 0301 	orr.w	r3, r3, #1
 8003d22:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d24:	e01c      	b.n	8003d60 <HAL_RCC_OscConfig+0x358>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	2b05      	cmp	r3, #5
 8003d2c:	d10c      	bne.n	8003d48 <HAL_RCC_OscConfig+0x340>
 8003d2e:	4b61      	ldr	r3, [pc, #388]	@ (8003eb4 <HAL_RCC_OscConfig+0x4ac>)
 8003d30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d32:	4a60      	ldr	r2, [pc, #384]	@ (8003eb4 <HAL_RCC_OscConfig+0x4ac>)
 8003d34:	f043 0304 	orr.w	r3, r3, #4
 8003d38:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d3a:	4b5e      	ldr	r3, [pc, #376]	@ (8003eb4 <HAL_RCC_OscConfig+0x4ac>)
 8003d3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d3e:	4a5d      	ldr	r2, [pc, #372]	@ (8003eb4 <HAL_RCC_OscConfig+0x4ac>)
 8003d40:	f043 0301 	orr.w	r3, r3, #1
 8003d44:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d46:	e00b      	b.n	8003d60 <HAL_RCC_OscConfig+0x358>
 8003d48:	4b5a      	ldr	r3, [pc, #360]	@ (8003eb4 <HAL_RCC_OscConfig+0x4ac>)
 8003d4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d4c:	4a59      	ldr	r2, [pc, #356]	@ (8003eb4 <HAL_RCC_OscConfig+0x4ac>)
 8003d4e:	f023 0301 	bic.w	r3, r3, #1
 8003d52:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d54:	4b57      	ldr	r3, [pc, #348]	@ (8003eb4 <HAL_RCC_OscConfig+0x4ac>)
 8003d56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d58:	4a56      	ldr	r2, [pc, #344]	@ (8003eb4 <HAL_RCC_OscConfig+0x4ac>)
 8003d5a:	f023 0304 	bic.w	r3, r3, #4
 8003d5e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d015      	beq.n	8003d94 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d68:	f7fd fbfe 	bl	8001568 <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d6e:	e00a      	b.n	8003d86 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d70:	f7fd fbfa 	bl	8001568 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e0d7      	b.n	8003f36 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d86:	4b4b      	ldr	r3, [pc, #300]	@ (8003eb4 <HAL_RCC_OscConfig+0x4ac>)
 8003d88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d0ee      	beq.n	8003d70 <HAL_RCC_OscConfig+0x368>
 8003d92:	e014      	b.n	8003dbe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d94:	f7fd fbe8 	bl	8001568 <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d9a:	e00a      	b.n	8003db2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d9c:	f7fd fbe4 	bl	8001568 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d901      	bls.n	8003db2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e0c1      	b.n	8003f36 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003db2:	4b40      	ldr	r3, [pc, #256]	@ (8003eb4 <HAL_RCC_OscConfig+0x4ac>)
 8003db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1ee      	bne.n	8003d9c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dbe:	7dfb      	ldrb	r3, [r7, #23]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d105      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dc4:	4b3b      	ldr	r3, [pc, #236]	@ (8003eb4 <HAL_RCC_OscConfig+0x4ac>)
 8003dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc8:	4a3a      	ldr	r2, [pc, #232]	@ (8003eb4 <HAL_RCC_OscConfig+0x4ac>)
 8003dca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f000 80ad 	beq.w	8003f34 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003dda:	4b36      	ldr	r3, [pc, #216]	@ (8003eb4 <HAL_RCC_OscConfig+0x4ac>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f003 030c 	and.w	r3, r3, #12
 8003de2:	2b08      	cmp	r3, #8
 8003de4:	d060      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d145      	bne.n	8003e7a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dee:	4b33      	ldr	r3, [pc, #204]	@ (8003ebc <HAL_RCC_OscConfig+0x4b4>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df4:	f7fd fbb8 	bl	8001568 <HAL_GetTick>
 8003df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dfa:	e008      	b.n	8003e0e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dfc:	f7fd fbb4 	bl	8001568 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e093      	b.n	8003f36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e0e:	4b29      	ldr	r3, [pc, #164]	@ (8003eb4 <HAL_RCC_OscConfig+0x4ac>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1f0      	bne.n	8003dfc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	69da      	ldr	r2, [r3, #28]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	431a      	orrs	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e28:	019b      	lsls	r3, r3, #6
 8003e2a:	431a      	orrs	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e30:	085b      	lsrs	r3, r3, #1
 8003e32:	3b01      	subs	r3, #1
 8003e34:	041b      	lsls	r3, r3, #16
 8003e36:	431a      	orrs	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e3c:	061b      	lsls	r3, r3, #24
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e44:	071b      	lsls	r3, r3, #28
 8003e46:	491b      	ldr	r1, [pc, #108]	@ (8003eb4 <HAL_RCC_OscConfig+0x4ac>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e4c:	4b1b      	ldr	r3, [pc, #108]	@ (8003ebc <HAL_RCC_OscConfig+0x4b4>)
 8003e4e:	2201      	movs	r2, #1
 8003e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e52:	f7fd fb89 	bl	8001568 <HAL_GetTick>
 8003e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e58:	e008      	b.n	8003e6c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e5a:	f7fd fb85 	bl	8001568 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d901      	bls.n	8003e6c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e064      	b.n	8003f36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e6c:	4b11      	ldr	r3, [pc, #68]	@ (8003eb4 <HAL_RCC_OscConfig+0x4ac>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d0f0      	beq.n	8003e5a <HAL_RCC_OscConfig+0x452>
 8003e78:	e05c      	b.n	8003f34 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e7a:	4b10      	ldr	r3, [pc, #64]	@ (8003ebc <HAL_RCC_OscConfig+0x4b4>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e80:	f7fd fb72 	bl	8001568 <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e86:	e008      	b.n	8003e9a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e88:	f7fd fb6e 	bl	8001568 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e04d      	b.n	8003f36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e9a:	4b06      	ldr	r3, [pc, #24]	@ (8003eb4 <HAL_RCC_OscConfig+0x4ac>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1f0      	bne.n	8003e88 <HAL_RCC_OscConfig+0x480>
 8003ea6:	e045      	b.n	8003f34 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d107      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e040      	b.n	8003f36 <HAL_RCC_OscConfig+0x52e>
 8003eb4:	40023800 	.word	0x40023800
 8003eb8:	40007000 	.word	0x40007000
 8003ebc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ec0:	4b1f      	ldr	r3, [pc, #124]	@ (8003f40 <HAL_RCC_OscConfig+0x538>)
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d030      	beq.n	8003f30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d129      	bne.n	8003f30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d122      	bne.n	8003f30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003ef6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d119      	bne.n	8003f30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f06:	085b      	lsrs	r3, r3, #1
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d10f      	bne.n	8003f30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d107      	bne.n	8003f30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f2a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d001      	beq.n	8003f34 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e000      	b.n	8003f36 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3718      	adds	r7, #24
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	40023800 	.word	0x40023800

08003f44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d101      	bne.n	8003f56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e041      	b.n	8003fda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d106      	bne.n	8003f70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f839 	bl	8003fe2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2202      	movs	r2, #2
 8003f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	3304      	adds	r3, #4
 8003f80:	4619      	mov	r1, r3
 8003f82:	4610      	mov	r0, r2
 8003f84:	f000 f9c0 	bl	8004308 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3708      	adds	r7, #8
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	b083      	sub	sp, #12
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003fea:	bf00      	nop
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
	...

08003ff8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b085      	sub	sp, #20
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004006:	b2db      	uxtb	r3, r3
 8004008:	2b01      	cmp	r3, #1
 800400a:	d001      	beq.n	8004010 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e04e      	b.n	80040ae <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2202      	movs	r2, #2
 8004014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68da      	ldr	r2, [r3, #12]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f042 0201 	orr.w	r2, r2, #1
 8004026:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a23      	ldr	r2, [pc, #140]	@ (80040bc <HAL_TIM_Base_Start_IT+0xc4>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d022      	beq.n	8004078 <HAL_TIM_Base_Start_IT+0x80>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800403a:	d01d      	beq.n	8004078 <HAL_TIM_Base_Start_IT+0x80>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a1f      	ldr	r2, [pc, #124]	@ (80040c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d018      	beq.n	8004078 <HAL_TIM_Base_Start_IT+0x80>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a1e      	ldr	r2, [pc, #120]	@ (80040c4 <HAL_TIM_Base_Start_IT+0xcc>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d013      	beq.n	8004078 <HAL_TIM_Base_Start_IT+0x80>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a1c      	ldr	r2, [pc, #112]	@ (80040c8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d00e      	beq.n	8004078 <HAL_TIM_Base_Start_IT+0x80>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a1b      	ldr	r2, [pc, #108]	@ (80040cc <HAL_TIM_Base_Start_IT+0xd4>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d009      	beq.n	8004078 <HAL_TIM_Base_Start_IT+0x80>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a19      	ldr	r2, [pc, #100]	@ (80040d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d004      	beq.n	8004078 <HAL_TIM_Base_Start_IT+0x80>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a18      	ldr	r2, [pc, #96]	@ (80040d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d111      	bne.n	800409c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f003 0307 	and.w	r3, r3, #7
 8004082:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2b06      	cmp	r3, #6
 8004088:	d010      	beq.n	80040ac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f042 0201 	orr.w	r2, r2, #1
 8004098:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800409a:	e007      	b.n	80040ac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f042 0201 	orr.w	r2, r2, #1
 80040aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3714      	adds	r7, #20
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	40010000 	.word	0x40010000
 80040c0:	40000400 	.word	0x40000400
 80040c4:	40000800 	.word	0x40000800
 80040c8:	40000c00 	.word	0x40000c00
 80040cc:	40010400 	.word	0x40010400
 80040d0:	40014000 	.word	0x40014000
 80040d4:	40001800 	.word	0x40001800

080040d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d020      	beq.n	800413c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d01b      	beq.n	800413c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f06f 0202 	mvn.w	r2, #2
 800410c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	f003 0303 	and.w	r3, r3, #3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d003      	beq.n	800412a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 f8d2 	bl	80042cc <HAL_TIM_IC_CaptureCallback>
 8004128:	e005      	b.n	8004136 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f8c4 	bl	80042b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 f8d5 	bl	80042e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	f003 0304 	and.w	r3, r3, #4
 8004142:	2b00      	cmp	r3, #0
 8004144:	d020      	beq.n	8004188 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f003 0304 	and.w	r3, r3, #4
 800414c:	2b00      	cmp	r3, #0
 800414e:	d01b      	beq.n	8004188 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f06f 0204 	mvn.w	r2, #4
 8004158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2202      	movs	r2, #2
 800415e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 f8ac 	bl	80042cc <HAL_TIM_IC_CaptureCallback>
 8004174:	e005      	b.n	8004182 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 f89e 	bl	80042b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 f8af 	bl	80042e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	f003 0308 	and.w	r3, r3, #8
 800418e:	2b00      	cmp	r3, #0
 8004190:	d020      	beq.n	80041d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f003 0308 	and.w	r3, r3, #8
 8004198:	2b00      	cmp	r3, #0
 800419a:	d01b      	beq.n	80041d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f06f 0208 	mvn.w	r2, #8
 80041a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2204      	movs	r2, #4
 80041aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	69db      	ldr	r3, [r3, #28]
 80041b2:	f003 0303 	and.w	r3, r3, #3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d003      	beq.n	80041c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f886 	bl	80042cc <HAL_TIM_IC_CaptureCallback>
 80041c0:	e005      	b.n	80041ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 f878 	bl	80042b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 f889 	bl	80042e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	f003 0310 	and.w	r3, r3, #16
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d020      	beq.n	8004220 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f003 0310 	and.w	r3, r3, #16
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d01b      	beq.n	8004220 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f06f 0210 	mvn.w	r2, #16
 80041f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2208      	movs	r2, #8
 80041f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	69db      	ldr	r3, [r3, #28]
 80041fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004202:	2b00      	cmp	r3, #0
 8004204:	d003      	beq.n	800420e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f860 	bl	80042cc <HAL_TIM_IC_CaptureCallback>
 800420c:	e005      	b.n	800421a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 f852 	bl	80042b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 f863 	bl	80042e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00c      	beq.n	8004244 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f003 0301 	and.w	r3, r3, #1
 8004230:	2b00      	cmp	r3, #0
 8004232:	d007      	beq.n	8004244 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f06f 0201 	mvn.w	r2, #1
 800423c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f7fc fc0a 	bl	8000a58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00c      	beq.n	8004268 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004254:	2b00      	cmp	r3, #0
 8004256:	d007      	beq.n	8004268 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 f906 	bl	8004474 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00c      	beq.n	800428c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004278:	2b00      	cmp	r3, #0
 800427a:	d007      	beq.n	800428c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 f834 	bl	80042f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	f003 0320 	and.w	r3, r3, #32
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00c      	beq.n	80042b0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f003 0320 	and.w	r3, r3, #32
 800429c:	2b00      	cmp	r3, #0
 800429e:	d007      	beq.n	80042b0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f06f 0220 	mvn.w	r2, #32
 80042a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 f8d8 	bl	8004460 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042b0:	bf00      	nop
 80042b2:	3710      	adds	r7, #16
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004308:	b480      	push	{r7}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a46      	ldr	r2, [pc, #280]	@ (8004434 <TIM_Base_SetConfig+0x12c>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d013      	beq.n	8004348 <TIM_Base_SetConfig+0x40>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004326:	d00f      	beq.n	8004348 <TIM_Base_SetConfig+0x40>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a43      	ldr	r2, [pc, #268]	@ (8004438 <TIM_Base_SetConfig+0x130>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d00b      	beq.n	8004348 <TIM_Base_SetConfig+0x40>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a42      	ldr	r2, [pc, #264]	@ (800443c <TIM_Base_SetConfig+0x134>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d007      	beq.n	8004348 <TIM_Base_SetConfig+0x40>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a41      	ldr	r2, [pc, #260]	@ (8004440 <TIM_Base_SetConfig+0x138>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d003      	beq.n	8004348 <TIM_Base_SetConfig+0x40>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a40      	ldr	r2, [pc, #256]	@ (8004444 <TIM_Base_SetConfig+0x13c>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d108      	bne.n	800435a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800434e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	4313      	orrs	r3, r2
 8004358:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a35      	ldr	r2, [pc, #212]	@ (8004434 <TIM_Base_SetConfig+0x12c>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d02b      	beq.n	80043ba <TIM_Base_SetConfig+0xb2>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004368:	d027      	beq.n	80043ba <TIM_Base_SetConfig+0xb2>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a32      	ldr	r2, [pc, #200]	@ (8004438 <TIM_Base_SetConfig+0x130>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d023      	beq.n	80043ba <TIM_Base_SetConfig+0xb2>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a31      	ldr	r2, [pc, #196]	@ (800443c <TIM_Base_SetConfig+0x134>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d01f      	beq.n	80043ba <TIM_Base_SetConfig+0xb2>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a30      	ldr	r2, [pc, #192]	@ (8004440 <TIM_Base_SetConfig+0x138>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d01b      	beq.n	80043ba <TIM_Base_SetConfig+0xb2>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a2f      	ldr	r2, [pc, #188]	@ (8004444 <TIM_Base_SetConfig+0x13c>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d017      	beq.n	80043ba <TIM_Base_SetConfig+0xb2>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a2e      	ldr	r2, [pc, #184]	@ (8004448 <TIM_Base_SetConfig+0x140>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d013      	beq.n	80043ba <TIM_Base_SetConfig+0xb2>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a2d      	ldr	r2, [pc, #180]	@ (800444c <TIM_Base_SetConfig+0x144>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d00f      	beq.n	80043ba <TIM_Base_SetConfig+0xb2>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a2c      	ldr	r2, [pc, #176]	@ (8004450 <TIM_Base_SetConfig+0x148>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d00b      	beq.n	80043ba <TIM_Base_SetConfig+0xb2>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a2b      	ldr	r2, [pc, #172]	@ (8004454 <TIM_Base_SetConfig+0x14c>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d007      	beq.n	80043ba <TIM_Base_SetConfig+0xb2>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a2a      	ldr	r2, [pc, #168]	@ (8004458 <TIM_Base_SetConfig+0x150>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d003      	beq.n	80043ba <TIM_Base_SetConfig+0xb2>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a29      	ldr	r2, [pc, #164]	@ (800445c <TIM_Base_SetConfig+0x154>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d108      	bne.n	80043cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	689a      	ldr	r2, [r3, #8]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a10      	ldr	r2, [pc, #64]	@ (8004434 <TIM_Base_SetConfig+0x12c>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d003      	beq.n	8004400 <TIM_Base_SetConfig+0xf8>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a12      	ldr	r2, [pc, #72]	@ (8004444 <TIM_Base_SetConfig+0x13c>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d103      	bne.n	8004408 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	691a      	ldr	r2, [r3, #16]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b01      	cmp	r3, #1
 8004418:	d105      	bne.n	8004426 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	f023 0201 	bic.w	r2, r3, #1
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	611a      	str	r2, [r3, #16]
  }
}
 8004426:	bf00      	nop
 8004428:	3714      	adds	r7, #20
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	40010000 	.word	0x40010000
 8004438:	40000400 	.word	0x40000400
 800443c:	40000800 	.word	0x40000800
 8004440:	40000c00 	.word	0x40000c00
 8004444:	40010400 	.word	0x40010400
 8004448:	40014000 	.word	0x40014000
 800444c:	40014400 	.word	0x40014400
 8004450:	40014800 	.word	0x40014800
 8004454:	40001800 	.word	0x40001800
 8004458:	40001c00 	.word	0x40001c00
 800445c:	40002000 	.word	0x40002000

08004460 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e042      	b.n	8004520 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d106      	bne.n	80044b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7fc fde2 	bl	8001078 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2224      	movs	r2, #36	@ 0x24
 80044b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68da      	ldr	r2, [r3, #12]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80044ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 ff4f 	bl	8005370 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	691a      	ldr	r2, [r3, #16]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80044e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	695a      	ldr	r2, [r3, #20]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80044f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68da      	ldr	r2, [r3, #12]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004500:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2220      	movs	r2, #32
 800450c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2220      	movs	r2, #32
 8004514:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3708      	adds	r7, #8
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b08a      	sub	sp, #40	@ 0x28
 800452c:	af02      	add	r7, sp, #8
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	603b      	str	r3, [r7, #0]
 8004534:	4613      	mov	r3, r2
 8004536:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004538:	2300      	movs	r3, #0
 800453a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004542:	b2db      	uxtb	r3, r3
 8004544:	2b20      	cmp	r3, #32
 8004546:	d175      	bne.n	8004634 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d002      	beq.n	8004554 <HAL_UART_Transmit+0x2c>
 800454e:	88fb      	ldrh	r3, [r7, #6]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d101      	bne.n	8004558 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e06e      	b.n	8004636 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2221      	movs	r2, #33	@ 0x21
 8004562:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004566:	f7fc ffff 	bl	8001568 <HAL_GetTick>
 800456a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	88fa      	ldrh	r2, [r7, #6]
 8004570:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	88fa      	ldrh	r2, [r7, #6]
 8004576:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004580:	d108      	bne.n	8004594 <HAL_UART_Transmit+0x6c>
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d104      	bne.n	8004594 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800458a:	2300      	movs	r3, #0
 800458c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	61bb      	str	r3, [r7, #24]
 8004592:	e003      	b.n	800459c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004598:	2300      	movs	r3, #0
 800459a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800459c:	e02e      	b.n	80045fc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	9300      	str	r3, [sp, #0]
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	2200      	movs	r2, #0
 80045a6:	2180      	movs	r1, #128	@ 0x80
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f000 fc27 	bl	8004dfc <UART_WaitOnFlagUntilTimeout>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d005      	beq.n	80045c0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2220      	movs	r2, #32
 80045b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e03a      	b.n	8004636 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d10b      	bne.n	80045de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	881b      	ldrh	r3, [r3, #0]
 80045ca:	461a      	mov	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	3302      	adds	r3, #2
 80045da:	61bb      	str	r3, [r7, #24]
 80045dc:	e007      	b.n	80045ee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	781a      	ldrb	r2, [r3, #0]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	3301      	adds	r3, #1
 80045ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	3b01      	subs	r3, #1
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004600:	b29b      	uxth	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1cb      	bne.n	800459e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	9300      	str	r3, [sp, #0]
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	2200      	movs	r2, #0
 800460e:	2140      	movs	r1, #64	@ 0x40
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f000 fbf3 	bl	8004dfc <UART_WaitOnFlagUntilTimeout>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d005      	beq.n	8004628 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2220      	movs	r2, #32
 8004620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e006      	b.n	8004636 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2220      	movs	r2, #32
 800462c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004630:	2300      	movs	r3, #0
 8004632:	e000      	b.n	8004636 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004634:	2302      	movs	r3, #2
  }
}
 8004636:	4618      	mov	r0, r3
 8004638:	3720      	adds	r7, #32
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800463e:	b580      	push	{r7, lr}
 8004640:	b084      	sub	sp, #16
 8004642:	af00      	add	r7, sp, #0
 8004644:	60f8      	str	r0, [r7, #12]
 8004646:	60b9      	str	r1, [r7, #8]
 8004648:	4613      	mov	r3, r2
 800464a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004652:	b2db      	uxtb	r3, r3
 8004654:	2b20      	cmp	r3, #32
 8004656:	d112      	bne.n	800467e <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d002      	beq.n	8004664 <HAL_UART_Receive_DMA+0x26>
 800465e:	88fb      	ldrh	r3, [r7, #6]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d101      	bne.n	8004668 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e00b      	b.n	8004680 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800466e:	88fb      	ldrh	r3, [r7, #6]
 8004670:	461a      	mov	r2, r3
 8004672:	68b9      	ldr	r1, [r7, #8]
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f000 fc1b 	bl	8004eb0 <UART_Start_Receive_DMA>
 800467a:	4603      	mov	r3, r0
 800467c:	e000      	b.n	8004680 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800467e:	2302      	movs	r3, #2
  }
}
 8004680:	4618      	mov	r0, r3
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b0ba      	sub	sp, #232	@ 0xe8
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	695b      	ldr	r3, [r3, #20]
 80046aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80046ae:	2300      	movs	r3, #0
 80046b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80046b4:	2300      	movs	r3, #0
 80046b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80046ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046be:	f003 030f 	and.w	r3, r3, #15
 80046c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80046c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d10f      	bne.n	80046ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046d2:	f003 0320 	and.w	r3, r3, #32
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d009      	beq.n	80046ee <HAL_UART_IRQHandler+0x66>
 80046da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046de:	f003 0320 	and.w	r3, r3, #32
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d003      	beq.n	80046ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 fd83 	bl	80051f2 <UART_Receive_IT>
      return;
 80046ec:	e25b      	b.n	8004ba6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80046ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f000 80de 	beq.w	80048b4 <HAL_UART_IRQHandler+0x22c>
 80046f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046fc:	f003 0301 	and.w	r3, r3, #1
 8004700:	2b00      	cmp	r3, #0
 8004702:	d106      	bne.n	8004712 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004708:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800470c:	2b00      	cmp	r3, #0
 800470e:	f000 80d1 	beq.w	80048b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00b      	beq.n	8004736 <HAL_UART_IRQHandler+0xae>
 800471e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004722:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004726:	2b00      	cmp	r3, #0
 8004728:	d005      	beq.n	8004736 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800472e:	f043 0201 	orr.w	r2, r3, #1
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800473a:	f003 0304 	and.w	r3, r3, #4
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00b      	beq.n	800475a <HAL_UART_IRQHandler+0xd2>
 8004742:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b00      	cmp	r3, #0
 800474c:	d005      	beq.n	800475a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004752:	f043 0202 	orr.w	r2, r3, #2
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800475a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00b      	beq.n	800477e <HAL_UART_IRQHandler+0xf6>
 8004766:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800476a:	f003 0301 	and.w	r3, r3, #1
 800476e:	2b00      	cmp	r3, #0
 8004770:	d005      	beq.n	800477e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004776:	f043 0204 	orr.w	r2, r3, #4
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800477e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004782:	f003 0308 	and.w	r3, r3, #8
 8004786:	2b00      	cmp	r3, #0
 8004788:	d011      	beq.n	80047ae <HAL_UART_IRQHandler+0x126>
 800478a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800478e:	f003 0320 	and.w	r3, r3, #32
 8004792:	2b00      	cmp	r3, #0
 8004794:	d105      	bne.n	80047a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004796:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d005      	beq.n	80047ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047a6:	f043 0208 	orr.w	r2, r3, #8
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	f000 81f2 	beq.w	8004b9c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047bc:	f003 0320 	and.w	r3, r3, #32
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d008      	beq.n	80047d6 <HAL_UART_IRQHandler+0x14e>
 80047c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047c8:	f003 0320 	and.w	r3, r3, #32
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d002      	beq.n	80047d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f000 fd0e 	bl	80051f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047e0:	2b40      	cmp	r3, #64	@ 0x40
 80047e2:	bf0c      	ite	eq
 80047e4:	2301      	moveq	r3, #1
 80047e6:	2300      	movne	r3, #0
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047f2:	f003 0308 	and.w	r3, r3, #8
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d103      	bne.n	8004802 <HAL_UART_IRQHandler+0x17a>
 80047fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d04f      	beq.n	80048a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 fc16 	bl	8005034 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004812:	2b40      	cmp	r3, #64	@ 0x40
 8004814:	d141      	bne.n	800489a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	3314      	adds	r3, #20
 800481c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004820:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004824:	e853 3f00 	ldrex	r3, [r3]
 8004828:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800482c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004830:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004834:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	3314      	adds	r3, #20
 800483e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004842:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004846:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800484a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800484e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004852:	e841 2300 	strex	r3, r2, [r1]
 8004856:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800485a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d1d9      	bne.n	8004816 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004866:	2b00      	cmp	r3, #0
 8004868:	d013      	beq.n	8004892 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800486e:	4a7e      	ldr	r2, [pc, #504]	@ (8004a68 <HAL_UART_IRQHandler+0x3e0>)
 8004870:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004876:	4618      	mov	r0, r3
 8004878:	f7fd f8fe 	bl	8001a78 <HAL_DMA_Abort_IT>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d016      	beq.n	80048b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004886:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800488c:	4610      	mov	r0, r2
 800488e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004890:	e00e      	b.n	80048b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 f99e 	bl	8004bd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004898:	e00a      	b.n	80048b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 f99a 	bl	8004bd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048a0:	e006      	b.n	80048b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f996 	bl	8004bd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80048ae:	e175      	b.n	8004b9c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048b0:	bf00      	nop
    return;
 80048b2:	e173      	b.n	8004b9c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	f040 814f 	bne.w	8004b5c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80048be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048c2:	f003 0310 	and.w	r3, r3, #16
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f000 8148 	beq.w	8004b5c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80048cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048d0:	f003 0310 	and.w	r3, r3, #16
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	f000 8141 	beq.w	8004b5c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048da:	2300      	movs	r3, #0
 80048dc:	60bb      	str	r3, [r7, #8]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	60bb      	str	r3, [r7, #8]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	60bb      	str	r3, [r7, #8]
 80048ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048fa:	2b40      	cmp	r3, #64	@ 0x40
 80048fc:	f040 80b6 	bne.w	8004a6c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800490c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004910:	2b00      	cmp	r3, #0
 8004912:	f000 8145 	beq.w	8004ba0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800491a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800491e:	429a      	cmp	r2, r3
 8004920:	f080 813e 	bcs.w	8004ba0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800492a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004930:	69db      	ldr	r3, [r3, #28]
 8004932:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004936:	f000 8088 	beq.w	8004a4a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	330c      	adds	r3, #12
 8004940:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004944:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004948:	e853 3f00 	ldrex	r3, [r3]
 800494c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004950:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004954:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004958:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	330c      	adds	r3, #12
 8004962:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004966:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800496a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004972:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004976:	e841 2300 	strex	r3, r2, [r1]
 800497a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800497e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1d9      	bne.n	800493a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	3314      	adds	r3, #20
 800498c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004990:	e853 3f00 	ldrex	r3, [r3]
 8004994:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004996:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004998:	f023 0301 	bic.w	r3, r3, #1
 800499c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	3314      	adds	r3, #20
 80049a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80049aa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80049ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80049b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80049b6:	e841 2300 	strex	r3, r2, [r1]
 80049ba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80049bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1e1      	bne.n	8004986 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	3314      	adds	r3, #20
 80049c8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80049cc:	e853 3f00 	ldrex	r3, [r3]
 80049d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80049d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	3314      	adds	r3, #20
 80049e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80049e6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80049e8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80049ec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80049ee:	e841 2300 	strex	r3, r2, [r1]
 80049f2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80049f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1e3      	bne.n	80049c2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2220      	movs	r2, #32
 80049fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	330c      	adds	r3, #12
 8004a0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a12:	e853 3f00 	ldrex	r3, [r3]
 8004a16:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004a18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a1a:	f023 0310 	bic.w	r3, r3, #16
 8004a1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	330c      	adds	r3, #12
 8004a28:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004a2c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004a2e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a30:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004a32:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004a34:	e841 2300 	strex	r3, r2, [r1]
 8004a38:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004a3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d1e3      	bne.n	8004a08 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a44:	4618      	mov	r0, r3
 8004a46:	f7fc ffa7 	bl	8001998 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2202      	movs	r2, #2
 8004a4e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	4619      	mov	r1, r3
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 f8c1 	bl	8004be8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a66:	e09b      	b.n	8004ba0 <HAL_UART_IRQHandler+0x518>
 8004a68:	080050fb 	.word	0x080050fb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	f000 808e 	beq.w	8004ba4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004a88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f000 8089 	beq.w	8004ba4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	330c      	adds	r3, #12
 8004a98:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a9c:	e853 3f00 	ldrex	r3, [r3]
 8004aa0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004aa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aa4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004aa8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	330c      	adds	r3, #12
 8004ab2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004ab6:	647a      	str	r2, [r7, #68]	@ 0x44
 8004ab8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004abc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004abe:	e841 2300 	strex	r3, r2, [r1]
 8004ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ac4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d1e3      	bne.n	8004a92 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	3314      	adds	r3, #20
 8004ad0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad4:	e853 3f00 	ldrex	r3, [r3]
 8004ad8:	623b      	str	r3, [r7, #32]
   return(result);
 8004ada:	6a3b      	ldr	r3, [r7, #32]
 8004adc:	f023 0301 	bic.w	r3, r3, #1
 8004ae0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	3314      	adds	r3, #20
 8004aea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004aee:	633a      	str	r2, [r7, #48]	@ 0x30
 8004af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004af4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004af6:	e841 2300 	strex	r3, r2, [r1]
 8004afa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1e3      	bne.n	8004aca <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2220      	movs	r2, #32
 8004b06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	330c      	adds	r3, #12
 8004b16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	e853 3f00 	ldrex	r3, [r3]
 8004b1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f023 0310 	bic.w	r3, r3, #16
 8004b26:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	330c      	adds	r3, #12
 8004b30:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004b34:	61fa      	str	r2, [r7, #28]
 8004b36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b38:	69b9      	ldr	r1, [r7, #24]
 8004b3a:	69fa      	ldr	r2, [r7, #28]
 8004b3c:	e841 2300 	strex	r3, r2, [r1]
 8004b40:	617b      	str	r3, [r7, #20]
   return(result);
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1e3      	bne.n	8004b10 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b4e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004b52:	4619      	mov	r1, r3
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 f847 	bl	8004be8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b5a:	e023      	b.n	8004ba4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d009      	beq.n	8004b7c <HAL_UART_IRQHandler+0x4f4>
 8004b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d003      	beq.n	8004b7c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 fad4 	bl	8005122 <UART_Transmit_IT>
    return;
 8004b7a:	e014      	b.n	8004ba6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d00e      	beq.n	8004ba6 <HAL_UART_IRQHandler+0x51e>
 8004b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d008      	beq.n	8004ba6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 fb14 	bl	80051c2 <UART_EndTransmit_IT>
    return;
 8004b9a:	e004      	b.n	8004ba6 <HAL_UART_IRQHandler+0x51e>
    return;
 8004b9c:	bf00      	nop
 8004b9e:	e002      	b.n	8004ba6 <HAL_UART_IRQHandler+0x51e>
      return;
 8004ba0:	bf00      	nop
 8004ba2:	e000      	b.n	8004ba6 <HAL_UART_IRQHandler+0x51e>
      return;
 8004ba4:	bf00      	nop
  }
}
 8004ba6:	37e8      	adds	r7, #232	@ 0xe8
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b09c      	sub	sp, #112	@ 0x70
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c0c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d172      	bne.n	8004d02 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004c1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c1e:	2200      	movs	r2, #0
 8004c20:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	330c      	adds	r3, #12
 8004c28:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c2c:	e853 3f00 	ldrex	r3, [r3]
 8004c30:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004c32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	330c      	adds	r3, #12
 8004c40:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004c42:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004c44:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c46:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004c48:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004c4a:	e841 2300 	strex	r3, r2, [r1]
 8004c4e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004c50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1e5      	bne.n	8004c22 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	3314      	adds	r3, #20
 8004c5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c60:	e853 3f00 	ldrex	r3, [r3]
 8004c64:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c68:	f023 0301 	bic.w	r3, r3, #1
 8004c6c:	667b      	str	r3, [r7, #100]	@ 0x64
 8004c6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	3314      	adds	r3, #20
 8004c74:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004c76:	647a      	str	r2, [r7, #68]	@ 0x44
 8004c78:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c7a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c7e:	e841 2300 	strex	r3, r2, [r1]
 8004c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1e5      	bne.n	8004c56 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	3314      	adds	r3, #20
 8004c90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c94:	e853 3f00 	ldrex	r3, [r3]
 8004c98:	623b      	str	r3, [r7, #32]
   return(result);
 8004c9a:	6a3b      	ldr	r3, [r7, #32]
 8004c9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ca0:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ca2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	3314      	adds	r3, #20
 8004ca8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004caa:	633a      	str	r2, [r7, #48]	@ 0x30
 8004cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004cb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cb2:	e841 2300 	strex	r3, r2, [r1]
 8004cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1e5      	bne.n	8004c8a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004cbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cc0:	2220      	movs	r2, #32
 8004cc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d119      	bne.n	8004d02 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	330c      	adds	r3, #12
 8004cd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	e853 3f00 	ldrex	r3, [r3]
 8004cdc:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f023 0310 	bic.w	r3, r3, #16
 8004ce4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ce6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	330c      	adds	r3, #12
 8004cec:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004cee:	61fa      	str	r2, [r7, #28]
 8004cf0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf2:	69b9      	ldr	r1, [r7, #24]
 8004cf4:	69fa      	ldr	r2, [r7, #28]
 8004cf6:	e841 2300 	strex	r3, r2, [r1]
 8004cfa:	617b      	str	r3, [r7, #20]
   return(result);
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1e5      	bne.n	8004cce <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d04:	2200      	movs	r2, #0
 8004d06:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d106      	bne.n	8004d1e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d12:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004d14:	4619      	mov	r1, r3
 8004d16:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004d18:	f7ff ff66 	bl	8004be8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004d1c:	e002      	b.n	8004d24 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004d1e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004d20:	f7fb fc96 	bl	8000650 <HAL_UART_RxCpltCallback>
}
 8004d24:	bf00      	nop
 8004d26:	3770      	adds	r7, #112	@ 0x70
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d38:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d108      	bne.n	8004d5a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004d4c:	085b      	lsrs	r3, r3, #1
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	4619      	mov	r1, r3
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f7ff ff48 	bl	8004be8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004d58:	e002      	b.n	8004d60 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004d5a:	68f8      	ldr	r0, [r7, #12]
 8004d5c:	f7ff ff30 	bl	8004bc0 <HAL_UART_RxHalfCpltCallback>
}
 8004d60:	bf00      	nop
 8004d62:	3710      	adds	r7, #16
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004d70:	2300      	movs	r3, #0
 8004d72:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d78:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	695b      	ldr	r3, [r3, #20]
 8004d80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d84:	2b80      	cmp	r3, #128	@ 0x80
 8004d86:	bf0c      	ite	eq
 8004d88:	2301      	moveq	r3, #1
 8004d8a:	2300      	movne	r3, #0
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	2b21      	cmp	r3, #33	@ 0x21
 8004d9a:	d108      	bne.n	8004dae <UART_DMAError+0x46>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d005      	beq.n	8004dae <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	2200      	movs	r2, #0
 8004da6:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004da8:	68b8      	ldr	r0, [r7, #8]
 8004daa:	f000 f91b 	bl	8004fe4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	695b      	ldr	r3, [r3, #20]
 8004db4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004db8:	2b40      	cmp	r3, #64	@ 0x40
 8004dba:	bf0c      	ite	eq
 8004dbc:	2301      	moveq	r3, #1
 8004dbe:	2300      	movne	r3, #0
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	2b22      	cmp	r3, #34	@ 0x22
 8004dce:	d108      	bne.n	8004de2 <UART_DMAError+0x7a>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d005      	beq.n	8004de2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004ddc:	68b8      	ldr	r0, [r7, #8]
 8004dde:	f000 f929 	bl	8005034 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004de6:	f043 0210 	orr.w	r2, r3, #16
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004dee:	68b8      	ldr	r0, [r7, #8]
 8004df0:	f7ff fef0 	bl	8004bd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004df4:	bf00      	nop
 8004df6:	3710      	adds	r7, #16
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b086      	sub	sp, #24
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	603b      	str	r3, [r7, #0]
 8004e08:	4613      	mov	r3, r2
 8004e0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e0c:	e03b      	b.n	8004e86 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e0e:	6a3b      	ldr	r3, [r7, #32]
 8004e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e14:	d037      	beq.n	8004e86 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e16:	f7fc fba7 	bl	8001568 <HAL_GetTick>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	6a3a      	ldr	r2, [r7, #32]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d302      	bcc.n	8004e2c <UART_WaitOnFlagUntilTimeout+0x30>
 8004e26:	6a3b      	ldr	r3, [r7, #32]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d101      	bne.n	8004e30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e03a      	b.n	8004ea6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	f003 0304 	and.w	r3, r3, #4
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d023      	beq.n	8004e86 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	2b80      	cmp	r3, #128	@ 0x80
 8004e42:	d020      	beq.n	8004e86 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	2b40      	cmp	r3, #64	@ 0x40
 8004e48:	d01d      	beq.n	8004e86 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0308 	and.w	r3, r3, #8
 8004e54:	2b08      	cmp	r3, #8
 8004e56:	d116      	bne.n	8004e86 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004e58:	2300      	movs	r3, #0
 8004e5a:	617b      	str	r3, [r7, #20]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	617b      	str	r3, [r7, #20]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	617b      	str	r3, [r7, #20]
 8004e6c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	f000 f8e0 	bl	8005034 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2208      	movs	r2, #8
 8004e78:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e00f      	b.n	8004ea6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	4013      	ands	r3, r2
 8004e90:	68ba      	ldr	r2, [r7, #8]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	bf0c      	ite	eq
 8004e96:	2301      	moveq	r3, #1
 8004e98:	2300      	movne	r3, #0
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	79fb      	ldrb	r3, [r7, #7]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d0b4      	beq.n	8004e0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3718      	adds	r7, #24
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
	...

08004eb0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b098      	sub	sp, #96	@ 0x60
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	4613      	mov	r3, r2
 8004ebc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004ebe:	68ba      	ldr	r2, [r7, #8]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	88fa      	ldrh	r2, [r7, #6]
 8004ec8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2222      	movs	r2, #34	@ 0x22
 8004ed4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004edc:	4a3e      	ldr	r2, [pc, #248]	@ (8004fd8 <UART_Start_Receive_DMA+0x128>)
 8004ede:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ee4:	4a3d      	ldr	r2, [pc, #244]	@ (8004fdc <UART_Start_Receive_DMA+0x12c>)
 8004ee6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eec:	4a3c      	ldr	r2, [pc, #240]	@ (8004fe0 <UART_Start_Receive_DMA+0x130>)
 8004eee:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004ef8:	f107 0308 	add.w	r3, r7, #8
 8004efc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	3304      	adds	r3, #4
 8004f08:	4619      	mov	r1, r3
 8004f0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	88fb      	ldrh	r3, [r7, #6]
 8004f10:	f7fc fcea 	bl	80018e8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004f14:	2300      	movs	r3, #0
 8004f16:	613b      	str	r3, [r7, #16]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	613b      	str	r3, [r7, #16]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	613b      	str	r3, [r7, #16]
 8004f28:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d019      	beq.n	8004f66 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	330c      	adds	r3, #12
 8004f38:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f3c:	e853 3f00 	ldrex	r3, [r3]
 8004f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004f42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f48:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	330c      	adds	r3, #12
 8004f50:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004f52:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004f54:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f56:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004f58:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f5a:	e841 2300 	strex	r3, r2, [r1]
 8004f5e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004f60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1e5      	bne.n	8004f32 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	3314      	adds	r3, #20
 8004f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f70:	e853 3f00 	ldrex	r3, [r3]
 8004f74:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f78:	f043 0301 	orr.w	r3, r3, #1
 8004f7c:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	3314      	adds	r3, #20
 8004f84:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004f86:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004f88:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004f8c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004f8e:	e841 2300 	strex	r3, r2, [r1]
 8004f92:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d1e5      	bne.n	8004f66 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	3314      	adds	r3, #20
 8004fa0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	e853 3f00 	ldrex	r3, [r3]
 8004fa8:	617b      	str	r3, [r7, #20]
   return(result);
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004fb0:	653b      	str	r3, [r7, #80]	@ 0x50
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	3314      	adds	r3, #20
 8004fb8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004fba:	627a      	str	r2, [r7, #36]	@ 0x24
 8004fbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fbe:	6a39      	ldr	r1, [r7, #32]
 8004fc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fc2:	e841 2300 	strex	r3, r2, [r1]
 8004fc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1e5      	bne.n	8004f9a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004fce:	2300      	movs	r3, #0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3760      	adds	r7, #96	@ 0x60
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	08004c01 	.word	0x08004c01
 8004fdc:	08004d2d 	.word	0x08004d2d
 8004fe0:	08004d69 	.word	0x08004d69

08004fe4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b089      	sub	sp, #36	@ 0x24
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	330c      	adds	r3, #12
 8004ff2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	e853 3f00 	ldrex	r3, [r3]
 8004ffa:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005002:	61fb      	str	r3, [r7, #28]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	330c      	adds	r3, #12
 800500a:	69fa      	ldr	r2, [r7, #28]
 800500c:	61ba      	str	r2, [r7, #24]
 800500e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005010:	6979      	ldr	r1, [r7, #20]
 8005012:	69ba      	ldr	r2, [r7, #24]
 8005014:	e841 2300 	strex	r3, r2, [r1]
 8005018:	613b      	str	r3, [r7, #16]
   return(result);
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1e5      	bne.n	8004fec <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2220      	movs	r2, #32
 8005024:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005028:	bf00      	nop
 800502a:	3724      	adds	r7, #36	@ 0x24
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005034:	b480      	push	{r7}
 8005036:	b095      	sub	sp, #84	@ 0x54
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	330c      	adds	r3, #12
 8005042:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005046:	e853 3f00 	ldrex	r3, [r3]
 800504a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800504c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800504e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005052:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	330c      	adds	r3, #12
 800505a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800505c:	643a      	str	r2, [r7, #64]	@ 0x40
 800505e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005060:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005062:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005064:	e841 2300 	strex	r3, r2, [r1]
 8005068:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800506a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800506c:	2b00      	cmp	r3, #0
 800506e:	d1e5      	bne.n	800503c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	3314      	adds	r3, #20
 8005076:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005078:	6a3b      	ldr	r3, [r7, #32]
 800507a:	e853 3f00 	ldrex	r3, [r3]
 800507e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	f023 0301 	bic.w	r3, r3, #1
 8005086:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	3314      	adds	r3, #20
 800508e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005090:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005092:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005094:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005096:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005098:	e841 2300 	strex	r3, r2, [r1]
 800509c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800509e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1e5      	bne.n	8005070 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d119      	bne.n	80050e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	330c      	adds	r3, #12
 80050b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	e853 3f00 	ldrex	r3, [r3]
 80050ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	f023 0310 	bic.w	r3, r3, #16
 80050c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	330c      	adds	r3, #12
 80050ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050cc:	61ba      	str	r2, [r7, #24]
 80050ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d0:	6979      	ldr	r1, [r7, #20]
 80050d2:	69ba      	ldr	r2, [r7, #24]
 80050d4:	e841 2300 	strex	r3, r2, [r1]
 80050d8:	613b      	str	r3, [r7, #16]
   return(result);
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1e5      	bne.n	80050ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2220      	movs	r2, #32
 80050e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80050ee:	bf00      	nop
 80050f0:	3754      	adds	r7, #84	@ 0x54
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr

080050fa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050fa:	b580      	push	{r7, lr}
 80050fc:	b084      	sub	sp, #16
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005106:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2200      	movs	r2, #0
 800510c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f7ff fd5d 	bl	8004bd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800511a:	bf00      	nop
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}

08005122 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005122:	b480      	push	{r7}
 8005124:	b085      	sub	sp, #20
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b21      	cmp	r3, #33	@ 0x21
 8005134:	d13e      	bne.n	80051b4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800513e:	d114      	bne.n	800516a <UART_Transmit_IT+0x48>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d110      	bne.n	800516a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a1b      	ldr	r3, [r3, #32]
 800514c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	881b      	ldrh	r3, [r3, #0]
 8005152:	461a      	mov	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800515c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a1b      	ldr	r3, [r3, #32]
 8005162:	1c9a      	adds	r2, r3, #2
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	621a      	str	r2, [r3, #32]
 8005168:	e008      	b.n	800517c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a1b      	ldr	r3, [r3, #32]
 800516e:	1c59      	adds	r1, r3, #1
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	6211      	str	r1, [r2, #32]
 8005174:	781a      	ldrb	r2, [r3, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005180:	b29b      	uxth	r3, r3
 8005182:	3b01      	subs	r3, #1
 8005184:	b29b      	uxth	r3, r3
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	4619      	mov	r1, r3
 800518a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800518c:	2b00      	cmp	r3, #0
 800518e:	d10f      	bne.n	80051b0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68da      	ldr	r2, [r3, #12]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800519e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68da      	ldr	r2, [r3, #12]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80051ae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80051b0:	2300      	movs	r3, #0
 80051b2:	e000      	b.n	80051b6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80051b4:	2302      	movs	r3, #2
  }
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3714      	adds	r7, #20
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b082      	sub	sp, #8
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68da      	ldr	r2, [r3, #12]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2220      	movs	r2, #32
 80051de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f7ff fce2 	bl	8004bac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3708      	adds	r7, #8
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80051f2:	b580      	push	{r7, lr}
 80051f4:	b08c      	sub	sp, #48	@ 0x30
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005200:	b2db      	uxtb	r3, r3
 8005202:	2b22      	cmp	r3, #34	@ 0x22
 8005204:	f040 80ae 	bne.w	8005364 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005210:	d117      	bne.n	8005242 <UART_Receive_IT+0x50>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d113      	bne.n	8005242 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800521a:	2300      	movs	r3, #0
 800521c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005222:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	b29b      	uxth	r3, r3
 800522c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005230:	b29a      	uxth	r2, r3
 8005232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005234:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800523a:	1c9a      	adds	r2, r3, #2
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005240:	e026      	b.n	8005290 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005246:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005248:	2300      	movs	r3, #0
 800524a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005254:	d007      	beq.n	8005266 <UART_Receive_IT+0x74>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d10a      	bne.n	8005274 <UART_Receive_IT+0x82>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d106      	bne.n	8005274 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	b2da      	uxtb	r2, r3
 800526e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005270:	701a      	strb	r2, [r3, #0]
 8005272:	e008      	b.n	8005286 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	b2db      	uxtb	r3, r3
 800527c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005280:	b2da      	uxtb	r2, r3
 8005282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005284:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800528a:	1c5a      	adds	r2, r3, #1
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005294:	b29b      	uxth	r3, r3
 8005296:	3b01      	subs	r3, #1
 8005298:	b29b      	uxth	r3, r3
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	4619      	mov	r1, r3
 800529e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d15d      	bne.n	8005360 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68da      	ldr	r2, [r3, #12]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f022 0220 	bic.w	r2, r2, #32
 80052b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68da      	ldr	r2, [r3, #12]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80052c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	695a      	ldr	r2, [r3, #20]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f022 0201 	bic.w	r2, r2, #1
 80052d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2220      	movs	r2, #32
 80052d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d135      	bne.n	8005356 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	330c      	adds	r3, #12
 80052f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	e853 3f00 	ldrex	r3, [r3]
 80052fe:	613b      	str	r3, [r7, #16]
   return(result);
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	f023 0310 	bic.w	r3, r3, #16
 8005306:	627b      	str	r3, [r7, #36]	@ 0x24
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	330c      	adds	r3, #12
 800530e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005310:	623a      	str	r2, [r7, #32]
 8005312:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005314:	69f9      	ldr	r1, [r7, #28]
 8005316:	6a3a      	ldr	r2, [r7, #32]
 8005318:	e841 2300 	strex	r3, r2, [r1]
 800531c:	61bb      	str	r3, [r7, #24]
   return(result);
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d1e5      	bne.n	80052f0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0310 	and.w	r3, r3, #16
 800532e:	2b10      	cmp	r3, #16
 8005330:	d10a      	bne.n	8005348 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005332:	2300      	movs	r3, #0
 8005334:	60fb      	str	r3, [r7, #12]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	60fb      	str	r3, [r7, #12]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	60fb      	str	r3, [r7, #12]
 8005346:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800534c:	4619      	mov	r1, r3
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f7ff fc4a 	bl	8004be8 <HAL_UARTEx_RxEventCallback>
 8005354:	e002      	b.n	800535c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f7fb f97a 	bl	8000650 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800535c:	2300      	movs	r3, #0
 800535e:	e002      	b.n	8005366 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005360:	2300      	movs	r3, #0
 8005362:	e000      	b.n	8005366 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005364:	2302      	movs	r3, #2
  }
}
 8005366:	4618      	mov	r0, r3
 8005368:	3730      	adds	r7, #48	@ 0x30
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
	...

08005370 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005374:	b0c0      	sub	sp, #256	@ 0x100
 8005376:	af00      	add	r7, sp, #0
 8005378:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800537c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800538c:	68d9      	ldr	r1, [r3, #12]
 800538e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	ea40 0301 	orr.w	r3, r0, r1
 8005398:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800539a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800539e:	689a      	ldr	r2, [r3, #8]
 80053a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	431a      	orrs	r2, r3
 80053a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	431a      	orrs	r2, r3
 80053b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053b4:	69db      	ldr	r3, [r3, #28]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80053bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80053c8:	f021 010c 	bic.w	r1, r1, #12
 80053cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80053d6:	430b      	orrs	r3, r1
 80053d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	695b      	ldr	r3, [r3, #20]
 80053e2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80053e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053ea:	6999      	ldr	r1, [r3, #24]
 80053ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	ea40 0301 	orr.w	r3, r0, r1
 80053f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80053f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	4b8f      	ldr	r3, [pc, #572]	@ (800563c <UART_SetConfig+0x2cc>)
 8005400:	429a      	cmp	r2, r3
 8005402:	d005      	beq.n	8005410 <UART_SetConfig+0xa0>
 8005404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	4b8d      	ldr	r3, [pc, #564]	@ (8005640 <UART_SetConfig+0x2d0>)
 800540c:	429a      	cmp	r2, r3
 800540e:	d104      	bne.n	800541a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005410:	f7fe f884 	bl	800351c <HAL_RCC_GetPCLK2Freq>
 8005414:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005418:	e003      	b.n	8005422 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800541a:	f7fe f86b 	bl	80034f4 <HAL_RCC_GetPCLK1Freq>
 800541e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005426:	69db      	ldr	r3, [r3, #28]
 8005428:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800542c:	f040 810c 	bne.w	8005648 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005430:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005434:	2200      	movs	r2, #0
 8005436:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800543a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800543e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005442:	4622      	mov	r2, r4
 8005444:	462b      	mov	r3, r5
 8005446:	1891      	adds	r1, r2, r2
 8005448:	65b9      	str	r1, [r7, #88]	@ 0x58
 800544a:	415b      	adcs	r3, r3
 800544c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800544e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005452:	4621      	mov	r1, r4
 8005454:	eb12 0801 	adds.w	r8, r2, r1
 8005458:	4629      	mov	r1, r5
 800545a:	eb43 0901 	adc.w	r9, r3, r1
 800545e:	f04f 0200 	mov.w	r2, #0
 8005462:	f04f 0300 	mov.w	r3, #0
 8005466:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800546a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800546e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005472:	4690      	mov	r8, r2
 8005474:	4699      	mov	r9, r3
 8005476:	4623      	mov	r3, r4
 8005478:	eb18 0303 	adds.w	r3, r8, r3
 800547c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005480:	462b      	mov	r3, r5
 8005482:	eb49 0303 	adc.w	r3, r9, r3
 8005486:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800548a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005496:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800549a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800549e:	460b      	mov	r3, r1
 80054a0:	18db      	adds	r3, r3, r3
 80054a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80054a4:	4613      	mov	r3, r2
 80054a6:	eb42 0303 	adc.w	r3, r2, r3
 80054aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80054ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80054b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80054b4:	f7fa fefc 	bl	80002b0 <__aeabi_uldivmod>
 80054b8:	4602      	mov	r2, r0
 80054ba:	460b      	mov	r3, r1
 80054bc:	4b61      	ldr	r3, [pc, #388]	@ (8005644 <UART_SetConfig+0x2d4>)
 80054be:	fba3 2302 	umull	r2, r3, r3, r2
 80054c2:	095b      	lsrs	r3, r3, #5
 80054c4:	011c      	lsls	r4, r3, #4
 80054c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054ca:	2200      	movs	r2, #0
 80054cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80054d0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80054d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80054d8:	4642      	mov	r2, r8
 80054da:	464b      	mov	r3, r9
 80054dc:	1891      	adds	r1, r2, r2
 80054de:	64b9      	str	r1, [r7, #72]	@ 0x48
 80054e0:	415b      	adcs	r3, r3
 80054e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80054e8:	4641      	mov	r1, r8
 80054ea:	eb12 0a01 	adds.w	sl, r2, r1
 80054ee:	4649      	mov	r1, r9
 80054f0:	eb43 0b01 	adc.w	fp, r3, r1
 80054f4:	f04f 0200 	mov.w	r2, #0
 80054f8:	f04f 0300 	mov.w	r3, #0
 80054fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005500:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005504:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005508:	4692      	mov	sl, r2
 800550a:	469b      	mov	fp, r3
 800550c:	4643      	mov	r3, r8
 800550e:	eb1a 0303 	adds.w	r3, sl, r3
 8005512:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005516:	464b      	mov	r3, r9
 8005518:	eb4b 0303 	adc.w	r3, fp, r3
 800551c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800552c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005530:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005534:	460b      	mov	r3, r1
 8005536:	18db      	adds	r3, r3, r3
 8005538:	643b      	str	r3, [r7, #64]	@ 0x40
 800553a:	4613      	mov	r3, r2
 800553c:	eb42 0303 	adc.w	r3, r2, r3
 8005540:	647b      	str	r3, [r7, #68]	@ 0x44
 8005542:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005546:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800554a:	f7fa feb1 	bl	80002b0 <__aeabi_uldivmod>
 800554e:	4602      	mov	r2, r0
 8005550:	460b      	mov	r3, r1
 8005552:	4611      	mov	r1, r2
 8005554:	4b3b      	ldr	r3, [pc, #236]	@ (8005644 <UART_SetConfig+0x2d4>)
 8005556:	fba3 2301 	umull	r2, r3, r3, r1
 800555a:	095b      	lsrs	r3, r3, #5
 800555c:	2264      	movs	r2, #100	@ 0x64
 800555e:	fb02 f303 	mul.w	r3, r2, r3
 8005562:	1acb      	subs	r3, r1, r3
 8005564:	00db      	lsls	r3, r3, #3
 8005566:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800556a:	4b36      	ldr	r3, [pc, #216]	@ (8005644 <UART_SetConfig+0x2d4>)
 800556c:	fba3 2302 	umull	r2, r3, r3, r2
 8005570:	095b      	lsrs	r3, r3, #5
 8005572:	005b      	lsls	r3, r3, #1
 8005574:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005578:	441c      	add	r4, r3
 800557a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800557e:	2200      	movs	r2, #0
 8005580:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005584:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005588:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800558c:	4642      	mov	r2, r8
 800558e:	464b      	mov	r3, r9
 8005590:	1891      	adds	r1, r2, r2
 8005592:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005594:	415b      	adcs	r3, r3
 8005596:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005598:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800559c:	4641      	mov	r1, r8
 800559e:	1851      	adds	r1, r2, r1
 80055a0:	6339      	str	r1, [r7, #48]	@ 0x30
 80055a2:	4649      	mov	r1, r9
 80055a4:	414b      	adcs	r3, r1
 80055a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80055a8:	f04f 0200 	mov.w	r2, #0
 80055ac:	f04f 0300 	mov.w	r3, #0
 80055b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80055b4:	4659      	mov	r1, fp
 80055b6:	00cb      	lsls	r3, r1, #3
 80055b8:	4651      	mov	r1, sl
 80055ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055be:	4651      	mov	r1, sl
 80055c0:	00ca      	lsls	r2, r1, #3
 80055c2:	4610      	mov	r0, r2
 80055c4:	4619      	mov	r1, r3
 80055c6:	4603      	mov	r3, r0
 80055c8:	4642      	mov	r2, r8
 80055ca:	189b      	adds	r3, r3, r2
 80055cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80055d0:	464b      	mov	r3, r9
 80055d2:	460a      	mov	r2, r1
 80055d4:	eb42 0303 	adc.w	r3, r2, r3
 80055d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80055dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80055e8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80055ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80055f0:	460b      	mov	r3, r1
 80055f2:	18db      	adds	r3, r3, r3
 80055f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055f6:	4613      	mov	r3, r2
 80055f8:	eb42 0303 	adc.w	r3, r2, r3
 80055fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005602:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005606:	f7fa fe53 	bl	80002b0 <__aeabi_uldivmod>
 800560a:	4602      	mov	r2, r0
 800560c:	460b      	mov	r3, r1
 800560e:	4b0d      	ldr	r3, [pc, #52]	@ (8005644 <UART_SetConfig+0x2d4>)
 8005610:	fba3 1302 	umull	r1, r3, r3, r2
 8005614:	095b      	lsrs	r3, r3, #5
 8005616:	2164      	movs	r1, #100	@ 0x64
 8005618:	fb01 f303 	mul.w	r3, r1, r3
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	00db      	lsls	r3, r3, #3
 8005620:	3332      	adds	r3, #50	@ 0x32
 8005622:	4a08      	ldr	r2, [pc, #32]	@ (8005644 <UART_SetConfig+0x2d4>)
 8005624:	fba2 2303 	umull	r2, r3, r2, r3
 8005628:	095b      	lsrs	r3, r3, #5
 800562a:	f003 0207 	and.w	r2, r3, #7
 800562e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4422      	add	r2, r4
 8005636:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005638:	e106      	b.n	8005848 <UART_SetConfig+0x4d8>
 800563a:	bf00      	nop
 800563c:	40011000 	.word	0x40011000
 8005640:	40011400 	.word	0x40011400
 8005644:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005648:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800564c:	2200      	movs	r2, #0
 800564e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005652:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005656:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800565a:	4642      	mov	r2, r8
 800565c:	464b      	mov	r3, r9
 800565e:	1891      	adds	r1, r2, r2
 8005660:	6239      	str	r1, [r7, #32]
 8005662:	415b      	adcs	r3, r3
 8005664:	627b      	str	r3, [r7, #36]	@ 0x24
 8005666:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800566a:	4641      	mov	r1, r8
 800566c:	1854      	adds	r4, r2, r1
 800566e:	4649      	mov	r1, r9
 8005670:	eb43 0501 	adc.w	r5, r3, r1
 8005674:	f04f 0200 	mov.w	r2, #0
 8005678:	f04f 0300 	mov.w	r3, #0
 800567c:	00eb      	lsls	r3, r5, #3
 800567e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005682:	00e2      	lsls	r2, r4, #3
 8005684:	4614      	mov	r4, r2
 8005686:	461d      	mov	r5, r3
 8005688:	4643      	mov	r3, r8
 800568a:	18e3      	adds	r3, r4, r3
 800568c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005690:	464b      	mov	r3, r9
 8005692:	eb45 0303 	adc.w	r3, r5, r3
 8005696:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800569a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80056a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80056aa:	f04f 0200 	mov.w	r2, #0
 80056ae:	f04f 0300 	mov.w	r3, #0
 80056b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80056b6:	4629      	mov	r1, r5
 80056b8:	008b      	lsls	r3, r1, #2
 80056ba:	4621      	mov	r1, r4
 80056bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056c0:	4621      	mov	r1, r4
 80056c2:	008a      	lsls	r2, r1, #2
 80056c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80056c8:	f7fa fdf2 	bl	80002b0 <__aeabi_uldivmod>
 80056cc:	4602      	mov	r2, r0
 80056ce:	460b      	mov	r3, r1
 80056d0:	4b60      	ldr	r3, [pc, #384]	@ (8005854 <UART_SetConfig+0x4e4>)
 80056d2:	fba3 2302 	umull	r2, r3, r3, r2
 80056d6:	095b      	lsrs	r3, r3, #5
 80056d8:	011c      	lsls	r4, r3, #4
 80056da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056de:	2200      	movs	r2, #0
 80056e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80056e4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80056e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80056ec:	4642      	mov	r2, r8
 80056ee:	464b      	mov	r3, r9
 80056f0:	1891      	adds	r1, r2, r2
 80056f2:	61b9      	str	r1, [r7, #24]
 80056f4:	415b      	adcs	r3, r3
 80056f6:	61fb      	str	r3, [r7, #28]
 80056f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056fc:	4641      	mov	r1, r8
 80056fe:	1851      	adds	r1, r2, r1
 8005700:	6139      	str	r1, [r7, #16]
 8005702:	4649      	mov	r1, r9
 8005704:	414b      	adcs	r3, r1
 8005706:	617b      	str	r3, [r7, #20]
 8005708:	f04f 0200 	mov.w	r2, #0
 800570c:	f04f 0300 	mov.w	r3, #0
 8005710:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005714:	4659      	mov	r1, fp
 8005716:	00cb      	lsls	r3, r1, #3
 8005718:	4651      	mov	r1, sl
 800571a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800571e:	4651      	mov	r1, sl
 8005720:	00ca      	lsls	r2, r1, #3
 8005722:	4610      	mov	r0, r2
 8005724:	4619      	mov	r1, r3
 8005726:	4603      	mov	r3, r0
 8005728:	4642      	mov	r2, r8
 800572a:	189b      	adds	r3, r3, r2
 800572c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005730:	464b      	mov	r3, r9
 8005732:	460a      	mov	r2, r1
 8005734:	eb42 0303 	adc.w	r3, r2, r3
 8005738:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800573c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005746:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005748:	f04f 0200 	mov.w	r2, #0
 800574c:	f04f 0300 	mov.w	r3, #0
 8005750:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005754:	4649      	mov	r1, r9
 8005756:	008b      	lsls	r3, r1, #2
 8005758:	4641      	mov	r1, r8
 800575a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800575e:	4641      	mov	r1, r8
 8005760:	008a      	lsls	r2, r1, #2
 8005762:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005766:	f7fa fda3 	bl	80002b0 <__aeabi_uldivmod>
 800576a:	4602      	mov	r2, r0
 800576c:	460b      	mov	r3, r1
 800576e:	4611      	mov	r1, r2
 8005770:	4b38      	ldr	r3, [pc, #224]	@ (8005854 <UART_SetConfig+0x4e4>)
 8005772:	fba3 2301 	umull	r2, r3, r3, r1
 8005776:	095b      	lsrs	r3, r3, #5
 8005778:	2264      	movs	r2, #100	@ 0x64
 800577a:	fb02 f303 	mul.w	r3, r2, r3
 800577e:	1acb      	subs	r3, r1, r3
 8005780:	011b      	lsls	r3, r3, #4
 8005782:	3332      	adds	r3, #50	@ 0x32
 8005784:	4a33      	ldr	r2, [pc, #204]	@ (8005854 <UART_SetConfig+0x4e4>)
 8005786:	fba2 2303 	umull	r2, r3, r2, r3
 800578a:	095b      	lsrs	r3, r3, #5
 800578c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005790:	441c      	add	r4, r3
 8005792:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005796:	2200      	movs	r2, #0
 8005798:	673b      	str	r3, [r7, #112]	@ 0x70
 800579a:	677a      	str	r2, [r7, #116]	@ 0x74
 800579c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80057a0:	4642      	mov	r2, r8
 80057a2:	464b      	mov	r3, r9
 80057a4:	1891      	adds	r1, r2, r2
 80057a6:	60b9      	str	r1, [r7, #8]
 80057a8:	415b      	adcs	r3, r3
 80057aa:	60fb      	str	r3, [r7, #12]
 80057ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80057b0:	4641      	mov	r1, r8
 80057b2:	1851      	adds	r1, r2, r1
 80057b4:	6039      	str	r1, [r7, #0]
 80057b6:	4649      	mov	r1, r9
 80057b8:	414b      	adcs	r3, r1
 80057ba:	607b      	str	r3, [r7, #4]
 80057bc:	f04f 0200 	mov.w	r2, #0
 80057c0:	f04f 0300 	mov.w	r3, #0
 80057c4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80057c8:	4659      	mov	r1, fp
 80057ca:	00cb      	lsls	r3, r1, #3
 80057cc:	4651      	mov	r1, sl
 80057ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057d2:	4651      	mov	r1, sl
 80057d4:	00ca      	lsls	r2, r1, #3
 80057d6:	4610      	mov	r0, r2
 80057d8:	4619      	mov	r1, r3
 80057da:	4603      	mov	r3, r0
 80057dc:	4642      	mov	r2, r8
 80057de:	189b      	adds	r3, r3, r2
 80057e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057e2:	464b      	mov	r3, r9
 80057e4:	460a      	mov	r2, r1
 80057e6:	eb42 0303 	adc.w	r3, r2, r3
 80057ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80057ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80057f6:	667a      	str	r2, [r7, #100]	@ 0x64
 80057f8:	f04f 0200 	mov.w	r2, #0
 80057fc:	f04f 0300 	mov.w	r3, #0
 8005800:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005804:	4649      	mov	r1, r9
 8005806:	008b      	lsls	r3, r1, #2
 8005808:	4641      	mov	r1, r8
 800580a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800580e:	4641      	mov	r1, r8
 8005810:	008a      	lsls	r2, r1, #2
 8005812:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005816:	f7fa fd4b 	bl	80002b0 <__aeabi_uldivmod>
 800581a:	4602      	mov	r2, r0
 800581c:	460b      	mov	r3, r1
 800581e:	4b0d      	ldr	r3, [pc, #52]	@ (8005854 <UART_SetConfig+0x4e4>)
 8005820:	fba3 1302 	umull	r1, r3, r3, r2
 8005824:	095b      	lsrs	r3, r3, #5
 8005826:	2164      	movs	r1, #100	@ 0x64
 8005828:	fb01 f303 	mul.w	r3, r1, r3
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	011b      	lsls	r3, r3, #4
 8005830:	3332      	adds	r3, #50	@ 0x32
 8005832:	4a08      	ldr	r2, [pc, #32]	@ (8005854 <UART_SetConfig+0x4e4>)
 8005834:	fba2 2303 	umull	r2, r3, r2, r3
 8005838:	095b      	lsrs	r3, r3, #5
 800583a:	f003 020f 	and.w	r2, r3, #15
 800583e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4422      	add	r2, r4
 8005846:	609a      	str	r2, [r3, #8]
}
 8005848:	bf00      	nop
 800584a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800584e:	46bd      	mov	sp, r7
 8005850:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005854:	51eb851f 	.word	0x51eb851f

08005858 <__NVIC_SetPriority>:
{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	4603      	mov	r3, r0
 8005860:	6039      	str	r1, [r7, #0]
 8005862:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005868:	2b00      	cmp	r3, #0
 800586a:	db0a      	blt.n	8005882 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	b2da      	uxtb	r2, r3
 8005870:	490c      	ldr	r1, [pc, #48]	@ (80058a4 <__NVIC_SetPriority+0x4c>)
 8005872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005876:	0112      	lsls	r2, r2, #4
 8005878:	b2d2      	uxtb	r2, r2
 800587a:	440b      	add	r3, r1
 800587c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005880:	e00a      	b.n	8005898 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	b2da      	uxtb	r2, r3
 8005886:	4908      	ldr	r1, [pc, #32]	@ (80058a8 <__NVIC_SetPriority+0x50>)
 8005888:	79fb      	ldrb	r3, [r7, #7]
 800588a:	f003 030f 	and.w	r3, r3, #15
 800588e:	3b04      	subs	r3, #4
 8005890:	0112      	lsls	r2, r2, #4
 8005892:	b2d2      	uxtb	r2, r2
 8005894:	440b      	add	r3, r1
 8005896:	761a      	strb	r2, [r3, #24]
}
 8005898:	bf00      	nop
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr
 80058a4:	e000e100 	.word	0xe000e100
 80058a8:	e000ed00 	.word	0xe000ed00

080058ac <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80058ac:	b580      	push	{r7, lr}
 80058ae:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80058b0:	4b05      	ldr	r3, [pc, #20]	@ (80058c8 <SysTick_Handler+0x1c>)
 80058b2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80058b4:	f001 fdc6 	bl	8007444 <xTaskGetSchedulerState>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d001      	beq.n	80058c2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80058be:	f002 fbbb 	bl	8008038 <xPortSysTickHandler>
  }
}
 80058c2:	bf00      	nop
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	e000e010 	.word	0xe000e010

080058cc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80058cc:	b580      	push	{r7, lr}
 80058ce:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80058d0:	2100      	movs	r1, #0
 80058d2:	f06f 0004 	mvn.w	r0, #4
 80058d6:	f7ff ffbf 	bl	8005858 <__NVIC_SetPriority>
#endif
}
 80058da:	bf00      	nop
 80058dc:	bd80      	pop	{r7, pc}
	...

080058e0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058e6:	f3ef 8305 	mrs	r3, IPSR
 80058ea:	603b      	str	r3, [r7, #0]
  return(result);
 80058ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d003      	beq.n	80058fa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80058f2:	f06f 0305 	mvn.w	r3, #5
 80058f6:	607b      	str	r3, [r7, #4]
 80058f8:	e00c      	b.n	8005914 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80058fa:	4b0a      	ldr	r3, [pc, #40]	@ (8005924 <osKernelInitialize+0x44>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d105      	bne.n	800590e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005902:	4b08      	ldr	r3, [pc, #32]	@ (8005924 <osKernelInitialize+0x44>)
 8005904:	2201      	movs	r2, #1
 8005906:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005908:	2300      	movs	r3, #0
 800590a:	607b      	str	r3, [r7, #4]
 800590c:	e002      	b.n	8005914 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800590e:	f04f 33ff 	mov.w	r3, #4294967295
 8005912:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005914:	687b      	ldr	r3, [r7, #4]
}
 8005916:	4618      	mov	r0, r3
 8005918:	370c      	adds	r7, #12
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr
 8005922:	bf00      	nop
 8005924:	200001f0 	.word	0x200001f0

08005928 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005928:	b580      	push	{r7, lr}
 800592a:	b082      	sub	sp, #8
 800592c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800592e:	f3ef 8305 	mrs	r3, IPSR
 8005932:	603b      	str	r3, [r7, #0]
  return(result);
 8005934:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005936:	2b00      	cmp	r3, #0
 8005938:	d003      	beq.n	8005942 <osKernelStart+0x1a>
    stat = osErrorISR;
 800593a:	f06f 0305 	mvn.w	r3, #5
 800593e:	607b      	str	r3, [r7, #4]
 8005940:	e010      	b.n	8005964 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005942:	4b0b      	ldr	r3, [pc, #44]	@ (8005970 <osKernelStart+0x48>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2b01      	cmp	r3, #1
 8005948:	d109      	bne.n	800595e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800594a:	f7ff ffbf 	bl	80058cc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800594e:	4b08      	ldr	r3, [pc, #32]	@ (8005970 <osKernelStart+0x48>)
 8005950:	2202      	movs	r2, #2
 8005952:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005954:	f001 f928 	bl	8006ba8 <vTaskStartScheduler>
      stat = osOK;
 8005958:	2300      	movs	r3, #0
 800595a:	607b      	str	r3, [r7, #4]
 800595c:	e002      	b.n	8005964 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800595e:	f04f 33ff 	mov.w	r3, #4294967295
 8005962:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005964:	687b      	ldr	r3, [r7, #4]
}
 8005966:	4618      	mov	r0, r3
 8005968:	3708      	adds	r7, #8
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	200001f0 	.word	0x200001f0

08005974 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005974:	b580      	push	{r7, lr}
 8005976:	b08e      	sub	sp, #56	@ 0x38
 8005978:	af04      	add	r7, sp, #16
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005980:	2300      	movs	r3, #0
 8005982:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005984:	f3ef 8305 	mrs	r3, IPSR
 8005988:	617b      	str	r3, [r7, #20]
  return(result);
 800598a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800598c:	2b00      	cmp	r3, #0
 800598e:	d17e      	bne.n	8005a8e <osThreadNew+0x11a>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d07b      	beq.n	8005a8e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005996:	2380      	movs	r3, #128	@ 0x80
 8005998:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800599a:	2318      	movs	r3, #24
 800599c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800599e:	2300      	movs	r3, #0
 80059a0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80059a2:	f04f 33ff 	mov.w	r3, #4294967295
 80059a6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d045      	beq.n	8005a3a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d002      	beq.n	80059bc <osThreadNew+0x48>
        name = attr->name;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	699b      	ldr	r3, [r3, #24]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d002      	beq.n	80059ca <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	699b      	ldr	r3, [r3, #24]
 80059c8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d008      	beq.n	80059e2 <osThreadNew+0x6e>
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	2b38      	cmp	r3, #56	@ 0x38
 80059d4:	d805      	bhi.n	80059e2 <osThreadNew+0x6e>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	f003 0301 	and.w	r3, r3, #1
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d001      	beq.n	80059e6 <osThreadNew+0x72>
        return (NULL);
 80059e2:	2300      	movs	r3, #0
 80059e4:	e054      	b.n	8005a90 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	695b      	ldr	r3, [r3, #20]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d003      	beq.n	80059f6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	089b      	lsrs	r3, r3, #2
 80059f4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00e      	beq.n	8005a1c <osThreadNew+0xa8>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	2b5b      	cmp	r3, #91	@ 0x5b
 8005a04:	d90a      	bls.n	8005a1c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d006      	beq.n	8005a1c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d002      	beq.n	8005a1c <osThreadNew+0xa8>
        mem = 1;
 8005a16:	2301      	movs	r3, #1
 8005a18:	61bb      	str	r3, [r7, #24]
 8005a1a:	e010      	b.n	8005a3e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d10c      	bne.n	8005a3e <osThreadNew+0xca>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d108      	bne.n	8005a3e <osThreadNew+0xca>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d104      	bne.n	8005a3e <osThreadNew+0xca>
          mem = 0;
 8005a34:	2300      	movs	r3, #0
 8005a36:	61bb      	str	r3, [r7, #24]
 8005a38:	e001      	b.n	8005a3e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d110      	bne.n	8005a66 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005a4c:	9202      	str	r2, [sp, #8]
 8005a4e:	9301      	str	r3, [sp, #4]
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	9300      	str	r3, [sp, #0]
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	6a3a      	ldr	r2, [r7, #32]
 8005a58:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005a5a:	68f8      	ldr	r0, [r7, #12]
 8005a5c:	f000 fec8 	bl	80067f0 <xTaskCreateStatic>
 8005a60:	4603      	mov	r3, r0
 8005a62:	613b      	str	r3, [r7, #16]
 8005a64:	e013      	b.n	8005a8e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d110      	bne.n	8005a8e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005a6c:	6a3b      	ldr	r3, [r7, #32]
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	f107 0310 	add.w	r3, r7, #16
 8005a74:	9301      	str	r3, [sp, #4]
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	9300      	str	r3, [sp, #0]
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005a7e:	68f8      	ldr	r0, [r7, #12]
 8005a80:	f000 ff16 	bl	80068b0 <xTaskCreate>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d001      	beq.n	8005a8e <osThreadNew+0x11a>
            hTask = NULL;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005a8e:	693b      	ldr	r3, [r7, #16]
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3728      	adds	r7, #40	@ 0x28
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005aa0:	f3ef 8305 	mrs	r3, IPSR
 8005aa4:	60bb      	str	r3, [r7, #8]
  return(result);
 8005aa6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d003      	beq.n	8005ab4 <osDelay+0x1c>
    stat = osErrorISR;
 8005aac:	f06f 0305 	mvn.w	r3, #5
 8005ab0:	60fb      	str	r3, [r7, #12]
 8005ab2:	e007      	b.n	8005ac4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d002      	beq.n	8005ac4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f001 f83c 	bl	8006b3c <vTaskDelay>
    }
  }

  return (stat);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3710      	adds	r7, #16
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}

08005ace <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	b08a      	sub	sp, #40	@ 0x28
 8005ad2:	af02      	add	r7, sp, #8
 8005ad4:	60f8      	str	r0, [r7, #12]
 8005ad6:	60b9      	str	r1, [r7, #8]
 8005ad8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005ada:	2300      	movs	r3, #0
 8005adc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ade:	f3ef 8305 	mrs	r3, IPSR
 8005ae2:	613b      	str	r3, [r7, #16]
  return(result);
 8005ae4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d15f      	bne.n	8005baa <osMessageQueueNew+0xdc>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d05c      	beq.n	8005baa <osMessageQueueNew+0xdc>
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d059      	beq.n	8005baa <osMessageQueueNew+0xdc>
    mem = -1;
 8005af6:	f04f 33ff 	mov.w	r3, #4294967295
 8005afa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d029      	beq.n	8005b56 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d012      	beq.n	8005b30 <osMessageQueueNew+0x62>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	2b4f      	cmp	r3, #79	@ 0x4f
 8005b10:	d90e      	bls.n	8005b30 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d00a      	beq.n	8005b30 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	695a      	ldr	r2, [r3, #20]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	68b9      	ldr	r1, [r7, #8]
 8005b22:	fb01 f303 	mul.w	r3, r1, r3
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d302      	bcc.n	8005b30 <osMessageQueueNew+0x62>
        mem = 1;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	61bb      	str	r3, [r7, #24]
 8005b2e:	e014      	b.n	8005b5a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d110      	bne.n	8005b5a <osMessageQueueNew+0x8c>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d10c      	bne.n	8005b5a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d108      	bne.n	8005b5a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	695b      	ldr	r3, [r3, #20]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d104      	bne.n	8005b5a <osMessageQueueNew+0x8c>
          mem = 0;
 8005b50:	2300      	movs	r3, #0
 8005b52:	61bb      	str	r3, [r7, #24]
 8005b54:	e001      	b.n	8005b5a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005b56:	2300      	movs	r3, #0
 8005b58:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d10b      	bne.n	8005b78 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	691a      	ldr	r2, [r3, #16]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	2100      	movs	r1, #0
 8005b6a:	9100      	str	r1, [sp, #0]
 8005b6c:	68b9      	ldr	r1, [r7, #8]
 8005b6e:	68f8      	ldr	r0, [r7, #12]
 8005b70:	f000 f972 	bl	8005e58 <xQueueGenericCreateStatic>
 8005b74:	61f8      	str	r0, [r7, #28]
 8005b76:	e008      	b.n	8005b8a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d105      	bne.n	8005b8a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005b7e:	2200      	movs	r2, #0
 8005b80:	68b9      	ldr	r1, [r7, #8]
 8005b82:	68f8      	ldr	r0, [r7, #12]
 8005b84:	f000 f9e5 	bl	8005f52 <xQueueGenericCreate>
 8005b88:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d00c      	beq.n	8005baa <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d003      	beq.n	8005b9e <osMessageQueueNew+0xd0>
        name = attr->name;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	617b      	str	r3, [r7, #20]
 8005b9c:	e001      	b.n	8005ba2 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005ba2:	6979      	ldr	r1, [r7, #20]
 8005ba4:	69f8      	ldr	r0, [r7, #28]
 8005ba6:	f000 fdc5 	bl	8006734 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005baa:	69fb      	ldr	r3, [r7, #28]
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3720      	adds	r7, #32
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005bb4:	b480      	push	{r7}
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	4a07      	ldr	r2, [pc, #28]	@ (8005be0 <vApplicationGetIdleTaskMemory+0x2c>)
 8005bc4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	4a06      	ldr	r2, [pc, #24]	@ (8005be4 <vApplicationGetIdleTaskMemory+0x30>)
 8005bca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2280      	movs	r2, #128	@ 0x80
 8005bd0:	601a      	str	r2, [r3, #0]
}
 8005bd2:	bf00      	nop
 8005bd4:	3714      	adds	r7, #20
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop
 8005be0:	200001f4 	.word	0x200001f4
 8005be4:	20000250 	.word	0x20000250

08005be8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005be8:	b480      	push	{r7}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	4a07      	ldr	r2, [pc, #28]	@ (8005c14 <vApplicationGetTimerTaskMemory+0x2c>)
 8005bf8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	4a06      	ldr	r2, [pc, #24]	@ (8005c18 <vApplicationGetTimerTaskMemory+0x30>)
 8005bfe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005c06:	601a      	str	r2, [r3, #0]
}
 8005c08:	bf00      	nop
 8005c0a:	3714      	adds	r7, #20
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr
 8005c14:	20000450 	.word	0x20000450
 8005c18:	200004ac 	.word	0x200004ac

08005c1c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f103 0208 	add.w	r2, r3, #8
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f04f 32ff 	mov.w	r2, #4294967295
 8005c34:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f103 0208 	add.w	r2, r3, #8
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f103 0208 	add.w	r2, r3, #8
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005c50:	bf00      	nop
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005c6a:	bf00      	nop
 8005c6c:	370c      	adds	r7, #12
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr

08005c76 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c76:	b480      	push	{r7}
 8005c78:	b085      	sub	sp, #20
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
 8005c7e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	689a      	ldr	r2, [r3, #8]
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	683a      	ldr	r2, [r7, #0]
 8005c9a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	683a      	ldr	r2, [r7, #0]
 8005ca0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	1c5a      	adds	r2, r3, #1
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	601a      	str	r2, [r3, #0]
}
 8005cb2:	bf00      	nop
 8005cb4:	3714      	adds	r7, #20
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr

08005cbe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005cbe:	b480      	push	{r7}
 8005cc0:	b085      	sub	sp, #20
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
 8005cc6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd4:	d103      	bne.n	8005cde <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	60fb      	str	r3, [r7, #12]
 8005cdc:	e00c      	b.n	8005cf8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	3308      	adds	r3, #8
 8005ce2:	60fb      	str	r3, [r7, #12]
 8005ce4:	e002      	b.n	8005cec <vListInsert+0x2e>
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	60fb      	str	r3, [r7, #12]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68ba      	ldr	r2, [r7, #8]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d2f6      	bcs.n	8005ce6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	685a      	ldr	r2, [r3, #4]
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	683a      	ldr	r2, [r7, #0]
 8005d06:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	683a      	ldr	r2, [r7, #0]
 8005d12:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	1c5a      	adds	r2, r3, #1
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	601a      	str	r2, [r3, #0]
}
 8005d24:	bf00      	nop
 8005d26:	3714      	adds	r7, #20
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	6892      	ldr	r2, [r2, #8]
 8005d46:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	6852      	ldr	r2, [r2, #4]
 8005d50:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d103      	bne.n	8005d64 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	689a      	ldr	r2, [r3, #8]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	1e5a      	subs	r2, r3, #1
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3714      	adds	r7, #20
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d10b      	bne.n	8005db0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d9c:	f383 8811 	msr	BASEPRI, r3
 8005da0:	f3bf 8f6f 	isb	sy
 8005da4:	f3bf 8f4f 	dsb	sy
 8005da8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005daa:	bf00      	nop
 8005dac:	bf00      	nop
 8005dae:	e7fd      	b.n	8005dac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005db0:	f002 f8b2 	bl	8007f18 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dbc:	68f9      	ldr	r1, [r7, #12]
 8005dbe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005dc0:	fb01 f303 	mul.w	r3, r1, r3
 8005dc4:	441a      	add	r2, r3
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005de0:	3b01      	subs	r3, #1
 8005de2:	68f9      	ldr	r1, [r7, #12]
 8005de4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005de6:	fb01 f303 	mul.w	r3, r1, r3
 8005dea:	441a      	add	r2, r3
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	22ff      	movs	r2, #255	@ 0xff
 8005df4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	22ff      	movs	r2, #255	@ 0xff
 8005dfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d114      	bne.n	8005e30 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d01a      	beq.n	8005e44 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	3310      	adds	r3, #16
 8005e12:	4618      	mov	r0, r3
 8005e14:	f001 f956 	bl	80070c4 <xTaskRemoveFromEventList>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d012      	beq.n	8005e44 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8005e54 <xQueueGenericReset+0xd0>)
 8005e20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e24:	601a      	str	r2, [r3, #0]
 8005e26:	f3bf 8f4f 	dsb	sy
 8005e2a:	f3bf 8f6f 	isb	sy
 8005e2e:	e009      	b.n	8005e44 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	3310      	adds	r3, #16
 8005e34:	4618      	mov	r0, r3
 8005e36:	f7ff fef1 	bl	8005c1c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	3324      	adds	r3, #36	@ 0x24
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f7ff feec 	bl	8005c1c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005e44:	f002 f89a 	bl	8007f7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005e48:	2301      	movs	r3, #1
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3710      	adds	r7, #16
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	e000ed04 	.word	0xe000ed04

08005e58 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b08e      	sub	sp, #56	@ 0x38
 8005e5c:	af02      	add	r7, sp, #8
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]
 8005e64:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d10b      	bne.n	8005e84 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e70:	f383 8811 	msr	BASEPRI, r3
 8005e74:	f3bf 8f6f 	isb	sy
 8005e78:	f3bf 8f4f 	dsb	sy
 8005e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005e7e:	bf00      	nop
 8005e80:	bf00      	nop
 8005e82:	e7fd      	b.n	8005e80 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d10b      	bne.n	8005ea2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005e8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e8e:	f383 8811 	msr	BASEPRI, r3
 8005e92:	f3bf 8f6f 	isb	sy
 8005e96:	f3bf 8f4f 	dsb	sy
 8005e9a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005e9c:	bf00      	nop
 8005e9e:	bf00      	nop
 8005ea0:	e7fd      	b.n	8005e9e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d002      	beq.n	8005eae <xQueueGenericCreateStatic+0x56>
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d001      	beq.n	8005eb2 <xQueueGenericCreateStatic+0x5a>
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e000      	b.n	8005eb4 <xQueueGenericCreateStatic+0x5c>
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d10b      	bne.n	8005ed0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ebc:	f383 8811 	msr	BASEPRI, r3
 8005ec0:	f3bf 8f6f 	isb	sy
 8005ec4:	f3bf 8f4f 	dsb	sy
 8005ec8:	623b      	str	r3, [r7, #32]
}
 8005eca:	bf00      	nop
 8005ecc:	bf00      	nop
 8005ece:	e7fd      	b.n	8005ecc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d102      	bne.n	8005edc <xQueueGenericCreateStatic+0x84>
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d101      	bne.n	8005ee0 <xQueueGenericCreateStatic+0x88>
 8005edc:	2301      	movs	r3, #1
 8005ede:	e000      	b.n	8005ee2 <xQueueGenericCreateStatic+0x8a>
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d10b      	bne.n	8005efe <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eea:	f383 8811 	msr	BASEPRI, r3
 8005eee:	f3bf 8f6f 	isb	sy
 8005ef2:	f3bf 8f4f 	dsb	sy
 8005ef6:	61fb      	str	r3, [r7, #28]
}
 8005ef8:	bf00      	nop
 8005efa:	bf00      	nop
 8005efc:	e7fd      	b.n	8005efa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005efe:	2350      	movs	r3, #80	@ 0x50
 8005f00:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	2b50      	cmp	r3, #80	@ 0x50
 8005f06:	d00b      	beq.n	8005f20 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005f08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f0c:	f383 8811 	msr	BASEPRI, r3
 8005f10:	f3bf 8f6f 	isb	sy
 8005f14:	f3bf 8f4f 	dsb	sy
 8005f18:	61bb      	str	r3, [r7, #24]
}
 8005f1a:	bf00      	nop
 8005f1c:	bf00      	nop
 8005f1e:	e7fd      	b.n	8005f1c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005f20:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d00d      	beq.n	8005f48 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005f34:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f3a:	9300      	str	r3, [sp, #0]
 8005f3c:	4613      	mov	r3, r2
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	68b9      	ldr	r1, [r7, #8]
 8005f42:	68f8      	ldr	r0, [r7, #12]
 8005f44:	f000 f840 	bl	8005fc8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3730      	adds	r7, #48	@ 0x30
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005f52:	b580      	push	{r7, lr}
 8005f54:	b08a      	sub	sp, #40	@ 0x28
 8005f56:	af02      	add	r7, sp, #8
 8005f58:	60f8      	str	r0, [r7, #12]
 8005f5a:	60b9      	str	r1, [r7, #8]
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d10b      	bne.n	8005f7e <xQueueGenericCreate+0x2c>
	__asm volatile
 8005f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f6a:	f383 8811 	msr	BASEPRI, r3
 8005f6e:	f3bf 8f6f 	isb	sy
 8005f72:	f3bf 8f4f 	dsb	sy
 8005f76:	613b      	str	r3, [r7, #16]
}
 8005f78:	bf00      	nop
 8005f7a:	bf00      	nop
 8005f7c:	e7fd      	b.n	8005f7a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	68ba      	ldr	r2, [r7, #8]
 8005f82:	fb02 f303 	mul.w	r3, r2, r3
 8005f86:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	3350      	adds	r3, #80	@ 0x50
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f002 f8e5 	bl	800815c <pvPortMalloc>
 8005f92:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d011      	beq.n	8005fbe <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	3350      	adds	r3, #80	@ 0x50
 8005fa2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005fac:	79fa      	ldrb	r2, [r7, #7]
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	9300      	str	r3, [sp, #0]
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	697a      	ldr	r2, [r7, #20]
 8005fb6:	68b9      	ldr	r1, [r7, #8]
 8005fb8:	68f8      	ldr	r0, [r7, #12]
 8005fba:	f000 f805 	bl	8005fc8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005fbe:	69bb      	ldr	r3, [r7, #24]
	}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3720      	adds	r7, #32
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	607a      	str	r2, [r7, #4]
 8005fd4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d103      	bne.n	8005fe4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	69ba      	ldr	r2, [r7, #24]
 8005fe0:	601a      	str	r2, [r3, #0]
 8005fe2:	e002      	b.n	8005fea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	68ba      	ldr	r2, [r7, #8]
 8005ff4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005ff6:	2101      	movs	r1, #1
 8005ff8:	69b8      	ldr	r0, [r7, #24]
 8005ffa:	f7ff fec3 	bl	8005d84 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	78fa      	ldrb	r2, [r7, #3]
 8006002:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006006:	bf00      	nop
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
	...

08006010 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b08e      	sub	sp, #56	@ 0x38
 8006014:	af00      	add	r7, sp, #0
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	607a      	str	r2, [r7, #4]
 800601c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800601e:	2300      	movs	r3, #0
 8006020:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006028:	2b00      	cmp	r3, #0
 800602a:	d10b      	bne.n	8006044 <xQueueGenericSend+0x34>
	__asm volatile
 800602c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006030:	f383 8811 	msr	BASEPRI, r3
 8006034:	f3bf 8f6f 	isb	sy
 8006038:	f3bf 8f4f 	dsb	sy
 800603c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800603e:	bf00      	nop
 8006040:	bf00      	nop
 8006042:	e7fd      	b.n	8006040 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d103      	bne.n	8006052 <xQueueGenericSend+0x42>
 800604a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800604c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800604e:	2b00      	cmp	r3, #0
 8006050:	d101      	bne.n	8006056 <xQueueGenericSend+0x46>
 8006052:	2301      	movs	r3, #1
 8006054:	e000      	b.n	8006058 <xQueueGenericSend+0x48>
 8006056:	2300      	movs	r3, #0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d10b      	bne.n	8006074 <xQueueGenericSend+0x64>
	__asm volatile
 800605c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006060:	f383 8811 	msr	BASEPRI, r3
 8006064:	f3bf 8f6f 	isb	sy
 8006068:	f3bf 8f4f 	dsb	sy
 800606c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800606e:	bf00      	nop
 8006070:	bf00      	nop
 8006072:	e7fd      	b.n	8006070 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	2b02      	cmp	r3, #2
 8006078:	d103      	bne.n	8006082 <xQueueGenericSend+0x72>
 800607a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800607c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800607e:	2b01      	cmp	r3, #1
 8006080:	d101      	bne.n	8006086 <xQueueGenericSend+0x76>
 8006082:	2301      	movs	r3, #1
 8006084:	e000      	b.n	8006088 <xQueueGenericSend+0x78>
 8006086:	2300      	movs	r3, #0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d10b      	bne.n	80060a4 <xQueueGenericSend+0x94>
	__asm volatile
 800608c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006090:	f383 8811 	msr	BASEPRI, r3
 8006094:	f3bf 8f6f 	isb	sy
 8006098:	f3bf 8f4f 	dsb	sy
 800609c:	623b      	str	r3, [r7, #32]
}
 800609e:	bf00      	nop
 80060a0:	bf00      	nop
 80060a2:	e7fd      	b.n	80060a0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80060a4:	f001 f9ce 	bl	8007444 <xTaskGetSchedulerState>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d102      	bne.n	80060b4 <xQueueGenericSend+0xa4>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d101      	bne.n	80060b8 <xQueueGenericSend+0xa8>
 80060b4:	2301      	movs	r3, #1
 80060b6:	e000      	b.n	80060ba <xQueueGenericSend+0xaa>
 80060b8:	2300      	movs	r3, #0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d10b      	bne.n	80060d6 <xQueueGenericSend+0xc6>
	__asm volatile
 80060be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060c2:	f383 8811 	msr	BASEPRI, r3
 80060c6:	f3bf 8f6f 	isb	sy
 80060ca:	f3bf 8f4f 	dsb	sy
 80060ce:	61fb      	str	r3, [r7, #28]
}
 80060d0:	bf00      	nop
 80060d2:	bf00      	nop
 80060d4:	e7fd      	b.n	80060d2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80060d6:	f001 ff1f 	bl	8007f18 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80060da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80060de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d302      	bcc.n	80060ec <xQueueGenericSend+0xdc>
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	2b02      	cmp	r3, #2
 80060ea:	d129      	bne.n	8006140 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80060ec:	683a      	ldr	r2, [r7, #0]
 80060ee:	68b9      	ldr	r1, [r7, #8]
 80060f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80060f2:	f000 fa0f 	bl	8006514 <prvCopyDataToQueue>
 80060f6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d010      	beq.n	8006122 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006102:	3324      	adds	r3, #36	@ 0x24
 8006104:	4618      	mov	r0, r3
 8006106:	f000 ffdd 	bl	80070c4 <xTaskRemoveFromEventList>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d013      	beq.n	8006138 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006110:	4b3f      	ldr	r3, [pc, #252]	@ (8006210 <xQueueGenericSend+0x200>)
 8006112:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006116:	601a      	str	r2, [r3, #0]
 8006118:	f3bf 8f4f 	dsb	sy
 800611c:	f3bf 8f6f 	isb	sy
 8006120:	e00a      	b.n	8006138 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006124:	2b00      	cmp	r3, #0
 8006126:	d007      	beq.n	8006138 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006128:	4b39      	ldr	r3, [pc, #228]	@ (8006210 <xQueueGenericSend+0x200>)
 800612a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800612e:	601a      	str	r2, [r3, #0]
 8006130:	f3bf 8f4f 	dsb	sy
 8006134:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006138:	f001 ff20 	bl	8007f7c <vPortExitCritical>
				return pdPASS;
 800613c:	2301      	movs	r3, #1
 800613e:	e063      	b.n	8006208 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d103      	bne.n	800614e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006146:	f001 ff19 	bl	8007f7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800614a:	2300      	movs	r3, #0
 800614c:	e05c      	b.n	8006208 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800614e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006150:	2b00      	cmp	r3, #0
 8006152:	d106      	bne.n	8006162 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006154:	f107 0314 	add.w	r3, r7, #20
 8006158:	4618      	mov	r0, r3
 800615a:	f001 f817 	bl	800718c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800615e:	2301      	movs	r3, #1
 8006160:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006162:	f001 ff0b 	bl	8007f7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006166:	f000 fd87 	bl	8006c78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800616a:	f001 fed5 	bl	8007f18 <vPortEnterCritical>
 800616e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006170:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006174:	b25b      	sxtb	r3, r3
 8006176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800617a:	d103      	bne.n	8006184 <xQueueGenericSend+0x174>
 800617c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800617e:	2200      	movs	r2, #0
 8006180:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006186:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800618a:	b25b      	sxtb	r3, r3
 800618c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006190:	d103      	bne.n	800619a <xQueueGenericSend+0x18a>
 8006192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006194:	2200      	movs	r2, #0
 8006196:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800619a:	f001 feef 	bl	8007f7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800619e:	1d3a      	adds	r2, r7, #4
 80061a0:	f107 0314 	add.w	r3, r7, #20
 80061a4:	4611      	mov	r1, r2
 80061a6:	4618      	mov	r0, r3
 80061a8:	f001 f806 	bl	80071b8 <xTaskCheckForTimeOut>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d124      	bne.n	80061fc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80061b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80061b4:	f000 faa6 	bl	8006704 <prvIsQueueFull>
 80061b8:	4603      	mov	r3, r0
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d018      	beq.n	80061f0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80061be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c0:	3310      	adds	r3, #16
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	4611      	mov	r1, r2
 80061c6:	4618      	mov	r0, r3
 80061c8:	f000 ff2a 	bl	8007020 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80061cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80061ce:	f000 fa31 	bl	8006634 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80061d2:	f000 fd5f 	bl	8006c94 <xTaskResumeAll>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	f47f af7c 	bne.w	80060d6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80061de:	4b0c      	ldr	r3, [pc, #48]	@ (8006210 <xQueueGenericSend+0x200>)
 80061e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061e4:	601a      	str	r2, [r3, #0]
 80061e6:	f3bf 8f4f 	dsb	sy
 80061ea:	f3bf 8f6f 	isb	sy
 80061ee:	e772      	b.n	80060d6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80061f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80061f2:	f000 fa1f 	bl	8006634 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80061f6:	f000 fd4d 	bl	8006c94 <xTaskResumeAll>
 80061fa:	e76c      	b.n	80060d6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80061fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80061fe:	f000 fa19 	bl	8006634 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006202:	f000 fd47 	bl	8006c94 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006206:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006208:	4618      	mov	r0, r3
 800620a:	3738      	adds	r7, #56	@ 0x38
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}
 8006210:	e000ed04 	.word	0xe000ed04

08006214 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b090      	sub	sp, #64	@ 0x40
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	607a      	str	r2, [r7, #4]
 8006220:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006228:	2b00      	cmp	r3, #0
 800622a:	d10b      	bne.n	8006244 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800622c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006230:	f383 8811 	msr	BASEPRI, r3
 8006234:	f3bf 8f6f 	isb	sy
 8006238:	f3bf 8f4f 	dsb	sy
 800623c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800623e:	bf00      	nop
 8006240:	bf00      	nop
 8006242:	e7fd      	b.n	8006240 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d103      	bne.n	8006252 <xQueueGenericSendFromISR+0x3e>
 800624a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800624c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800624e:	2b00      	cmp	r3, #0
 8006250:	d101      	bne.n	8006256 <xQueueGenericSendFromISR+0x42>
 8006252:	2301      	movs	r3, #1
 8006254:	e000      	b.n	8006258 <xQueueGenericSendFromISR+0x44>
 8006256:	2300      	movs	r3, #0
 8006258:	2b00      	cmp	r3, #0
 800625a:	d10b      	bne.n	8006274 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800625c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006260:	f383 8811 	msr	BASEPRI, r3
 8006264:	f3bf 8f6f 	isb	sy
 8006268:	f3bf 8f4f 	dsb	sy
 800626c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800626e:	bf00      	nop
 8006270:	bf00      	nop
 8006272:	e7fd      	b.n	8006270 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	2b02      	cmp	r3, #2
 8006278:	d103      	bne.n	8006282 <xQueueGenericSendFromISR+0x6e>
 800627a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800627c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800627e:	2b01      	cmp	r3, #1
 8006280:	d101      	bne.n	8006286 <xQueueGenericSendFromISR+0x72>
 8006282:	2301      	movs	r3, #1
 8006284:	e000      	b.n	8006288 <xQueueGenericSendFromISR+0x74>
 8006286:	2300      	movs	r3, #0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d10b      	bne.n	80062a4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800628c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006290:	f383 8811 	msr	BASEPRI, r3
 8006294:	f3bf 8f6f 	isb	sy
 8006298:	f3bf 8f4f 	dsb	sy
 800629c:	623b      	str	r3, [r7, #32]
}
 800629e:	bf00      	nop
 80062a0:	bf00      	nop
 80062a2:	e7fd      	b.n	80062a0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80062a4:	f001 ff18 	bl	80080d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80062a8:	f3ef 8211 	mrs	r2, BASEPRI
 80062ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062b0:	f383 8811 	msr	BASEPRI, r3
 80062b4:	f3bf 8f6f 	isb	sy
 80062b8:	f3bf 8f4f 	dsb	sy
 80062bc:	61fa      	str	r2, [r7, #28]
 80062be:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80062c0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80062c2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80062c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80062c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d302      	bcc.n	80062d6 <xQueueGenericSendFromISR+0xc2>
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	2b02      	cmp	r3, #2
 80062d4:	d12f      	bne.n	8006336 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80062d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80062dc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80062e6:	683a      	ldr	r2, [r7, #0]
 80062e8:	68b9      	ldr	r1, [r7, #8]
 80062ea:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80062ec:	f000 f912 	bl	8006514 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80062f0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80062f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f8:	d112      	bne.n	8006320 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80062fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d016      	beq.n	8006330 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006304:	3324      	adds	r3, #36	@ 0x24
 8006306:	4618      	mov	r0, r3
 8006308:	f000 fedc 	bl	80070c4 <xTaskRemoveFromEventList>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00e      	beq.n	8006330 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d00b      	beq.n	8006330 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	601a      	str	r2, [r3, #0]
 800631e:	e007      	b.n	8006330 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006320:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006324:	3301      	adds	r3, #1
 8006326:	b2db      	uxtb	r3, r3
 8006328:	b25a      	sxtb	r2, r3
 800632a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800632c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006330:	2301      	movs	r3, #1
 8006332:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006334:	e001      	b.n	800633a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006336:	2300      	movs	r3, #0
 8006338:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800633a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800633c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006344:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006346:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006348:	4618      	mov	r0, r3
 800634a:	3740      	adds	r7, #64	@ 0x40
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b08c      	sub	sp, #48	@ 0x30
 8006354:	af00      	add	r7, sp, #0
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800635c:	2300      	movs	r3, #0
 800635e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006366:	2b00      	cmp	r3, #0
 8006368:	d10b      	bne.n	8006382 <xQueueReceive+0x32>
	__asm volatile
 800636a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800636e:	f383 8811 	msr	BASEPRI, r3
 8006372:	f3bf 8f6f 	isb	sy
 8006376:	f3bf 8f4f 	dsb	sy
 800637a:	623b      	str	r3, [r7, #32]
}
 800637c:	bf00      	nop
 800637e:	bf00      	nop
 8006380:	e7fd      	b.n	800637e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d103      	bne.n	8006390 <xQueueReceive+0x40>
 8006388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800638a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800638c:	2b00      	cmp	r3, #0
 800638e:	d101      	bne.n	8006394 <xQueueReceive+0x44>
 8006390:	2301      	movs	r3, #1
 8006392:	e000      	b.n	8006396 <xQueueReceive+0x46>
 8006394:	2300      	movs	r3, #0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d10b      	bne.n	80063b2 <xQueueReceive+0x62>
	__asm volatile
 800639a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800639e:	f383 8811 	msr	BASEPRI, r3
 80063a2:	f3bf 8f6f 	isb	sy
 80063a6:	f3bf 8f4f 	dsb	sy
 80063aa:	61fb      	str	r3, [r7, #28]
}
 80063ac:	bf00      	nop
 80063ae:	bf00      	nop
 80063b0:	e7fd      	b.n	80063ae <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063b2:	f001 f847 	bl	8007444 <xTaskGetSchedulerState>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d102      	bne.n	80063c2 <xQueueReceive+0x72>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d101      	bne.n	80063c6 <xQueueReceive+0x76>
 80063c2:	2301      	movs	r3, #1
 80063c4:	e000      	b.n	80063c8 <xQueueReceive+0x78>
 80063c6:	2300      	movs	r3, #0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d10b      	bne.n	80063e4 <xQueueReceive+0x94>
	__asm volatile
 80063cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063d0:	f383 8811 	msr	BASEPRI, r3
 80063d4:	f3bf 8f6f 	isb	sy
 80063d8:	f3bf 8f4f 	dsb	sy
 80063dc:	61bb      	str	r3, [r7, #24]
}
 80063de:	bf00      	nop
 80063e0:	bf00      	nop
 80063e2:	e7fd      	b.n	80063e0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80063e4:	f001 fd98 	bl	8007f18 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ec:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80063ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d01f      	beq.n	8006434 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80063f4:	68b9      	ldr	r1, [r7, #8]
 80063f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80063f8:	f000 f8f6 	bl	80065e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80063fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063fe:	1e5a      	subs	r2, r3, #1
 8006400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006402:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d00f      	beq.n	800642c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800640c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800640e:	3310      	adds	r3, #16
 8006410:	4618      	mov	r0, r3
 8006412:	f000 fe57 	bl	80070c4 <xTaskRemoveFromEventList>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d007      	beq.n	800642c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800641c:	4b3c      	ldr	r3, [pc, #240]	@ (8006510 <xQueueReceive+0x1c0>)
 800641e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006422:	601a      	str	r2, [r3, #0]
 8006424:	f3bf 8f4f 	dsb	sy
 8006428:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800642c:	f001 fda6 	bl	8007f7c <vPortExitCritical>
				return pdPASS;
 8006430:	2301      	movs	r3, #1
 8006432:	e069      	b.n	8006508 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d103      	bne.n	8006442 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800643a:	f001 fd9f 	bl	8007f7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800643e:	2300      	movs	r3, #0
 8006440:	e062      	b.n	8006508 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006444:	2b00      	cmp	r3, #0
 8006446:	d106      	bne.n	8006456 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006448:	f107 0310 	add.w	r3, r7, #16
 800644c:	4618      	mov	r0, r3
 800644e:	f000 fe9d 	bl	800718c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006452:	2301      	movs	r3, #1
 8006454:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006456:	f001 fd91 	bl	8007f7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800645a:	f000 fc0d 	bl	8006c78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800645e:	f001 fd5b 	bl	8007f18 <vPortEnterCritical>
 8006462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006464:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006468:	b25b      	sxtb	r3, r3
 800646a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800646e:	d103      	bne.n	8006478 <xQueueReceive+0x128>
 8006470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006472:	2200      	movs	r2, #0
 8006474:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800647a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800647e:	b25b      	sxtb	r3, r3
 8006480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006484:	d103      	bne.n	800648e <xQueueReceive+0x13e>
 8006486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006488:	2200      	movs	r2, #0
 800648a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800648e:	f001 fd75 	bl	8007f7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006492:	1d3a      	adds	r2, r7, #4
 8006494:	f107 0310 	add.w	r3, r7, #16
 8006498:	4611      	mov	r1, r2
 800649a:	4618      	mov	r0, r3
 800649c:	f000 fe8c 	bl	80071b8 <xTaskCheckForTimeOut>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d123      	bne.n	80064ee <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064a8:	f000 f916 	bl	80066d8 <prvIsQueueEmpty>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d017      	beq.n	80064e2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80064b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064b4:	3324      	adds	r3, #36	@ 0x24
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	4611      	mov	r1, r2
 80064ba:	4618      	mov	r0, r3
 80064bc:	f000 fdb0 	bl	8007020 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80064c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064c2:	f000 f8b7 	bl	8006634 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80064c6:	f000 fbe5 	bl	8006c94 <xTaskResumeAll>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d189      	bne.n	80063e4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80064d0:	4b0f      	ldr	r3, [pc, #60]	@ (8006510 <xQueueReceive+0x1c0>)
 80064d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064d6:	601a      	str	r2, [r3, #0]
 80064d8:	f3bf 8f4f 	dsb	sy
 80064dc:	f3bf 8f6f 	isb	sy
 80064e0:	e780      	b.n	80063e4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80064e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064e4:	f000 f8a6 	bl	8006634 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80064e8:	f000 fbd4 	bl	8006c94 <xTaskResumeAll>
 80064ec:	e77a      	b.n	80063e4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80064ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064f0:	f000 f8a0 	bl	8006634 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80064f4:	f000 fbce 	bl	8006c94 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064fa:	f000 f8ed 	bl	80066d8 <prvIsQueueEmpty>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	f43f af6f 	beq.w	80063e4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006506:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006508:	4618      	mov	r0, r3
 800650a:	3730      	adds	r7, #48	@ 0x30
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	e000ed04 	.word	0xe000ed04

08006514 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b086      	sub	sp, #24
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006520:	2300      	movs	r3, #0
 8006522:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006528:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800652e:	2b00      	cmp	r3, #0
 8006530:	d10d      	bne.n	800654e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d14d      	bne.n	80065d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	4618      	mov	r0, r3
 8006540:	f000 ff9e 	bl	8007480 <xTaskPriorityDisinherit>
 8006544:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2200      	movs	r2, #0
 800654a:	609a      	str	r2, [r3, #8]
 800654c:	e043      	b.n	80065d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d119      	bne.n	8006588 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6858      	ldr	r0, [r3, #4]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800655c:	461a      	mov	r2, r3
 800655e:	68b9      	ldr	r1, [r7, #8]
 8006560:	f002 f9bf 	bl	80088e2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	685a      	ldr	r2, [r3, #4]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800656c:	441a      	add	r2, r3
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	685a      	ldr	r2, [r3, #4]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	429a      	cmp	r2, r3
 800657c:	d32b      	bcc.n	80065d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	605a      	str	r2, [r3, #4]
 8006586:	e026      	b.n	80065d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	68d8      	ldr	r0, [r3, #12]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006590:	461a      	mov	r2, r3
 8006592:	68b9      	ldr	r1, [r7, #8]
 8006594:	f002 f9a5 	bl	80088e2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	68da      	ldr	r2, [r3, #12]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065a0:	425b      	negs	r3, r3
 80065a2:	441a      	add	r2, r3
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	68da      	ldr	r2, [r3, #12]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d207      	bcs.n	80065c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	689a      	ldr	r2, [r3, #8]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065bc:	425b      	negs	r3, r3
 80065be:	441a      	add	r2, r3
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2b02      	cmp	r3, #2
 80065c8:	d105      	bne.n	80065d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d002      	beq.n	80065d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	3b01      	subs	r3, #1
 80065d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	1c5a      	adds	r2, r3, #1
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80065de:	697b      	ldr	r3, [r7, #20]
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3718      	adds	r7, #24
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d018      	beq.n	800662c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	68da      	ldr	r2, [r3, #12]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006602:	441a      	add	r2, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	68da      	ldr	r2, [r3, #12]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	429a      	cmp	r2, r3
 8006612:	d303      	bcc.n	800661c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	68d9      	ldr	r1, [r3, #12]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006624:	461a      	mov	r2, r3
 8006626:	6838      	ldr	r0, [r7, #0]
 8006628:	f002 f95b 	bl	80088e2 <memcpy>
	}
}
 800662c:	bf00      	nop
 800662e:	3708      	adds	r7, #8
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800663c:	f001 fc6c 	bl	8007f18 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006646:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006648:	e011      	b.n	800666e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800664e:	2b00      	cmp	r3, #0
 8006650:	d012      	beq.n	8006678 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	3324      	adds	r3, #36	@ 0x24
 8006656:	4618      	mov	r0, r3
 8006658:	f000 fd34 	bl	80070c4 <xTaskRemoveFromEventList>
 800665c:	4603      	mov	r3, r0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d001      	beq.n	8006666 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006662:	f000 fe0d 	bl	8007280 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006666:	7bfb      	ldrb	r3, [r7, #15]
 8006668:	3b01      	subs	r3, #1
 800666a:	b2db      	uxtb	r3, r3
 800666c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800666e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006672:	2b00      	cmp	r3, #0
 8006674:	dce9      	bgt.n	800664a <prvUnlockQueue+0x16>
 8006676:	e000      	b.n	800667a <prvUnlockQueue+0x46>
					break;
 8006678:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	22ff      	movs	r2, #255	@ 0xff
 800667e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006682:	f001 fc7b 	bl	8007f7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006686:	f001 fc47 	bl	8007f18 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006690:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006692:	e011      	b.n	80066b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	691b      	ldr	r3, [r3, #16]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d012      	beq.n	80066c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	3310      	adds	r3, #16
 80066a0:	4618      	mov	r0, r3
 80066a2:	f000 fd0f 	bl	80070c4 <xTaskRemoveFromEventList>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d001      	beq.n	80066b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80066ac:	f000 fde8 	bl	8007280 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80066b0:	7bbb      	ldrb	r3, [r7, #14]
 80066b2:	3b01      	subs	r3, #1
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80066b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	dce9      	bgt.n	8006694 <prvUnlockQueue+0x60>
 80066c0:	e000      	b.n	80066c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80066c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	22ff      	movs	r2, #255	@ 0xff
 80066c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80066cc:	f001 fc56 	bl	8007f7c <vPortExitCritical>
}
 80066d0:	bf00      	nop
 80066d2:	3710      	adds	r7, #16
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80066e0:	f001 fc1a 	bl	8007f18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d102      	bne.n	80066f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80066ec:	2301      	movs	r3, #1
 80066ee:	60fb      	str	r3, [r7, #12]
 80066f0:	e001      	b.n	80066f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80066f2:	2300      	movs	r3, #0
 80066f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80066f6:	f001 fc41 	bl	8007f7c <vPortExitCritical>

	return xReturn;
 80066fa:	68fb      	ldr	r3, [r7, #12]
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3710      	adds	r7, #16
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800670c:	f001 fc04 	bl	8007f18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006718:	429a      	cmp	r2, r3
 800671a:	d102      	bne.n	8006722 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800671c:	2301      	movs	r3, #1
 800671e:	60fb      	str	r3, [r7, #12]
 8006720:	e001      	b.n	8006726 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006722:	2300      	movs	r3, #0
 8006724:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006726:	f001 fc29 	bl	8007f7c <vPortExitCritical>

	return xReturn;
 800672a:	68fb      	ldr	r3, [r7, #12]
}
 800672c:	4618      	mov	r0, r3
 800672e:	3710      	adds	r7, #16
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006734:	b480      	push	{r7}
 8006736:	b085      	sub	sp, #20
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800673e:	2300      	movs	r3, #0
 8006740:	60fb      	str	r3, [r7, #12]
 8006742:	e014      	b.n	800676e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006744:	4a0f      	ldr	r2, [pc, #60]	@ (8006784 <vQueueAddToRegistry+0x50>)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d10b      	bne.n	8006768 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006750:	490c      	ldr	r1, [pc, #48]	@ (8006784 <vQueueAddToRegistry+0x50>)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	683a      	ldr	r2, [r7, #0]
 8006756:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800675a:	4a0a      	ldr	r2, [pc, #40]	@ (8006784 <vQueueAddToRegistry+0x50>)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	00db      	lsls	r3, r3, #3
 8006760:	4413      	add	r3, r2
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006766:	e006      	b.n	8006776 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	3301      	adds	r3, #1
 800676c:	60fb      	str	r3, [r7, #12]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2b07      	cmp	r3, #7
 8006772:	d9e7      	bls.n	8006744 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006774:	bf00      	nop
 8006776:	bf00      	nop
 8006778:	3714      	adds	r7, #20
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	200008ac 	.word	0x200008ac

08006788 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006788:	b580      	push	{r7, lr}
 800678a:	b086      	sub	sp, #24
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006798:	f001 fbbe 	bl	8007f18 <vPortEnterCritical>
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80067a2:	b25b      	sxtb	r3, r3
 80067a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067a8:	d103      	bne.n	80067b2 <vQueueWaitForMessageRestricted+0x2a>
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80067b8:	b25b      	sxtb	r3, r3
 80067ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067be:	d103      	bne.n	80067c8 <vQueueWaitForMessageRestricted+0x40>
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80067c8:	f001 fbd8 	bl	8007f7c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d106      	bne.n	80067e2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	3324      	adds	r3, #36	@ 0x24
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	68b9      	ldr	r1, [r7, #8]
 80067dc:	4618      	mov	r0, r3
 80067de:	f000 fc45 	bl	800706c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80067e2:	6978      	ldr	r0, [r7, #20]
 80067e4:	f7ff ff26 	bl	8006634 <prvUnlockQueue>
	}
 80067e8:	bf00      	nop
 80067ea:	3718      	adds	r7, #24
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b08e      	sub	sp, #56	@ 0x38
 80067f4:	af04      	add	r7, sp, #16
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	607a      	str	r2, [r7, #4]
 80067fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80067fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006800:	2b00      	cmp	r3, #0
 8006802:	d10b      	bne.n	800681c <xTaskCreateStatic+0x2c>
	__asm volatile
 8006804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006808:	f383 8811 	msr	BASEPRI, r3
 800680c:	f3bf 8f6f 	isb	sy
 8006810:	f3bf 8f4f 	dsb	sy
 8006814:	623b      	str	r3, [r7, #32]
}
 8006816:	bf00      	nop
 8006818:	bf00      	nop
 800681a:	e7fd      	b.n	8006818 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800681c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800681e:	2b00      	cmp	r3, #0
 8006820:	d10b      	bne.n	800683a <xTaskCreateStatic+0x4a>
	__asm volatile
 8006822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006826:	f383 8811 	msr	BASEPRI, r3
 800682a:	f3bf 8f6f 	isb	sy
 800682e:	f3bf 8f4f 	dsb	sy
 8006832:	61fb      	str	r3, [r7, #28]
}
 8006834:	bf00      	nop
 8006836:	bf00      	nop
 8006838:	e7fd      	b.n	8006836 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800683a:	235c      	movs	r3, #92	@ 0x5c
 800683c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	2b5c      	cmp	r3, #92	@ 0x5c
 8006842:	d00b      	beq.n	800685c <xTaskCreateStatic+0x6c>
	__asm volatile
 8006844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006848:	f383 8811 	msr	BASEPRI, r3
 800684c:	f3bf 8f6f 	isb	sy
 8006850:	f3bf 8f4f 	dsb	sy
 8006854:	61bb      	str	r3, [r7, #24]
}
 8006856:	bf00      	nop
 8006858:	bf00      	nop
 800685a:	e7fd      	b.n	8006858 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800685c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800685e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006860:	2b00      	cmp	r3, #0
 8006862:	d01e      	beq.n	80068a2 <xTaskCreateStatic+0xb2>
 8006864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006866:	2b00      	cmp	r3, #0
 8006868:	d01b      	beq.n	80068a2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800686a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800686c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800686e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006870:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006872:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006876:	2202      	movs	r2, #2
 8006878:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800687c:	2300      	movs	r3, #0
 800687e:	9303      	str	r3, [sp, #12]
 8006880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006882:	9302      	str	r3, [sp, #8]
 8006884:	f107 0314 	add.w	r3, r7, #20
 8006888:	9301      	str	r3, [sp, #4]
 800688a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800688c:	9300      	str	r3, [sp, #0]
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	68b9      	ldr	r1, [r7, #8]
 8006894:	68f8      	ldr	r0, [r7, #12]
 8006896:	f000 f850 	bl	800693a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800689a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800689c:	f000 f8de 	bl	8006a5c <prvAddNewTaskToReadyList>
 80068a0:	e001      	b.n	80068a6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80068a2:	2300      	movs	r3, #0
 80068a4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80068a6:	697b      	ldr	r3, [r7, #20]
	}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3728      	adds	r7, #40	@ 0x28
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b08c      	sub	sp, #48	@ 0x30
 80068b4:	af04      	add	r7, sp, #16
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	603b      	str	r3, [r7, #0]
 80068bc:	4613      	mov	r3, r2
 80068be:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80068c0:	88fb      	ldrh	r3, [r7, #6]
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	4618      	mov	r0, r3
 80068c6:	f001 fc49 	bl	800815c <pvPortMalloc>
 80068ca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00e      	beq.n	80068f0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80068d2:	205c      	movs	r0, #92	@ 0x5c
 80068d4:	f001 fc42 	bl	800815c <pvPortMalloc>
 80068d8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d003      	beq.n	80068e8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	697a      	ldr	r2, [r7, #20]
 80068e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80068e6:	e005      	b.n	80068f4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80068e8:	6978      	ldr	r0, [r7, #20]
 80068ea:	f001 fd05 	bl	80082f8 <vPortFree>
 80068ee:	e001      	b.n	80068f4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80068f0:	2300      	movs	r3, #0
 80068f2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80068f4:	69fb      	ldr	r3, [r7, #28]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d017      	beq.n	800692a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006902:	88fa      	ldrh	r2, [r7, #6]
 8006904:	2300      	movs	r3, #0
 8006906:	9303      	str	r3, [sp, #12]
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	9302      	str	r3, [sp, #8]
 800690c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800690e:	9301      	str	r3, [sp, #4]
 8006910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006912:	9300      	str	r3, [sp, #0]
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	68b9      	ldr	r1, [r7, #8]
 8006918:	68f8      	ldr	r0, [r7, #12]
 800691a:	f000 f80e 	bl	800693a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800691e:	69f8      	ldr	r0, [r7, #28]
 8006920:	f000 f89c 	bl	8006a5c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006924:	2301      	movs	r3, #1
 8006926:	61bb      	str	r3, [r7, #24]
 8006928:	e002      	b.n	8006930 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800692a:	f04f 33ff 	mov.w	r3, #4294967295
 800692e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006930:	69bb      	ldr	r3, [r7, #24]
	}
 8006932:	4618      	mov	r0, r3
 8006934:	3720      	adds	r7, #32
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800693a:	b580      	push	{r7, lr}
 800693c:	b088      	sub	sp, #32
 800693e:	af00      	add	r7, sp, #0
 8006940:	60f8      	str	r0, [r7, #12]
 8006942:	60b9      	str	r1, [r7, #8]
 8006944:	607a      	str	r2, [r7, #4]
 8006946:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800694a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	461a      	mov	r2, r3
 8006952:	21a5      	movs	r1, #165	@ 0xa5
 8006954:	f001 ff49 	bl	80087ea <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800695a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006962:	3b01      	subs	r3, #1
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	4413      	add	r3, r2
 8006968:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	f023 0307 	bic.w	r3, r3, #7
 8006970:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	f003 0307 	and.w	r3, r3, #7
 8006978:	2b00      	cmp	r3, #0
 800697a:	d00b      	beq.n	8006994 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800697c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006980:	f383 8811 	msr	BASEPRI, r3
 8006984:	f3bf 8f6f 	isb	sy
 8006988:	f3bf 8f4f 	dsb	sy
 800698c:	617b      	str	r3, [r7, #20]
}
 800698e:	bf00      	nop
 8006990:	bf00      	nop
 8006992:	e7fd      	b.n	8006990 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d01f      	beq.n	80069da <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800699a:	2300      	movs	r3, #0
 800699c:	61fb      	str	r3, [r7, #28]
 800699e:	e012      	b.n	80069c6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80069a0:	68ba      	ldr	r2, [r7, #8]
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	4413      	add	r3, r2
 80069a6:	7819      	ldrb	r1, [r3, #0]
 80069a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	4413      	add	r3, r2
 80069ae:	3334      	adds	r3, #52	@ 0x34
 80069b0:	460a      	mov	r2, r1
 80069b2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80069b4:	68ba      	ldr	r2, [r7, #8]
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	4413      	add	r3, r2
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d006      	beq.n	80069ce <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	3301      	adds	r3, #1
 80069c4:	61fb      	str	r3, [r7, #28]
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	2b0f      	cmp	r3, #15
 80069ca:	d9e9      	bls.n	80069a0 <prvInitialiseNewTask+0x66>
 80069cc:	e000      	b.n	80069d0 <prvInitialiseNewTask+0x96>
			{
				break;
 80069ce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80069d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d2:	2200      	movs	r2, #0
 80069d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80069d8:	e003      	b.n	80069e2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80069da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069dc:	2200      	movs	r2, #0
 80069de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80069e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069e4:	2b37      	cmp	r3, #55	@ 0x37
 80069e6:	d901      	bls.n	80069ec <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80069e8:	2337      	movs	r3, #55	@ 0x37
 80069ea:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80069ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80069f0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80069f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80069f6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80069f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069fa:	2200      	movs	r2, #0
 80069fc:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80069fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a00:	3304      	adds	r3, #4
 8006a02:	4618      	mov	r0, r3
 8006a04:	f7ff f92a 	bl	8005c5c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a0a:	3318      	adds	r3, #24
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f7ff f925 	bl	8005c5c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a16:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a1a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a20:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a26:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006a36:	683a      	ldr	r2, [r7, #0]
 8006a38:	68f9      	ldr	r1, [r7, #12]
 8006a3a:	69b8      	ldr	r0, [r7, #24]
 8006a3c:	f001 f93e 	bl	8007cbc <pxPortInitialiseStack>
 8006a40:	4602      	mov	r2, r0
 8006a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a44:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006a46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d002      	beq.n	8006a52 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a52:	bf00      	nop
 8006a54:	3720      	adds	r7, #32
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
	...

08006a5c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b082      	sub	sp, #8
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006a64:	f001 fa58 	bl	8007f18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006a68:	4b2d      	ldr	r3, [pc, #180]	@ (8006b20 <prvAddNewTaskToReadyList+0xc4>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	4a2c      	ldr	r2, [pc, #176]	@ (8006b20 <prvAddNewTaskToReadyList+0xc4>)
 8006a70:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006a72:	4b2c      	ldr	r3, [pc, #176]	@ (8006b24 <prvAddNewTaskToReadyList+0xc8>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d109      	bne.n	8006a8e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006a7a:	4a2a      	ldr	r2, [pc, #168]	@ (8006b24 <prvAddNewTaskToReadyList+0xc8>)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006a80:	4b27      	ldr	r3, [pc, #156]	@ (8006b20 <prvAddNewTaskToReadyList+0xc4>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d110      	bne.n	8006aaa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006a88:	f000 fc1e 	bl	80072c8 <prvInitialiseTaskLists>
 8006a8c:	e00d      	b.n	8006aaa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006a8e:	4b26      	ldr	r3, [pc, #152]	@ (8006b28 <prvAddNewTaskToReadyList+0xcc>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d109      	bne.n	8006aaa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006a96:	4b23      	ldr	r3, [pc, #140]	@ (8006b24 <prvAddNewTaskToReadyList+0xc8>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d802      	bhi.n	8006aaa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006aa4:	4a1f      	ldr	r2, [pc, #124]	@ (8006b24 <prvAddNewTaskToReadyList+0xc8>)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006aaa:	4b20      	ldr	r3, [pc, #128]	@ (8006b2c <prvAddNewTaskToReadyList+0xd0>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	3301      	adds	r3, #1
 8006ab0:	4a1e      	ldr	r2, [pc, #120]	@ (8006b2c <prvAddNewTaskToReadyList+0xd0>)
 8006ab2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006ab4:	4b1d      	ldr	r3, [pc, #116]	@ (8006b2c <prvAddNewTaskToReadyList+0xd0>)
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ac0:	4b1b      	ldr	r3, [pc, #108]	@ (8006b30 <prvAddNewTaskToReadyList+0xd4>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d903      	bls.n	8006ad0 <prvAddNewTaskToReadyList+0x74>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006acc:	4a18      	ldr	r2, [pc, #96]	@ (8006b30 <prvAddNewTaskToReadyList+0xd4>)
 8006ace:	6013      	str	r3, [r2, #0]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ad4:	4613      	mov	r3, r2
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	4413      	add	r3, r2
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	4a15      	ldr	r2, [pc, #84]	@ (8006b34 <prvAddNewTaskToReadyList+0xd8>)
 8006ade:	441a      	add	r2, r3
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	3304      	adds	r3, #4
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	4610      	mov	r0, r2
 8006ae8:	f7ff f8c5 	bl	8005c76 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006aec:	f001 fa46 	bl	8007f7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006af0:	4b0d      	ldr	r3, [pc, #52]	@ (8006b28 <prvAddNewTaskToReadyList+0xcc>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d00e      	beq.n	8006b16 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006af8:	4b0a      	ldr	r3, [pc, #40]	@ (8006b24 <prvAddNewTaskToReadyList+0xc8>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d207      	bcs.n	8006b16 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006b06:	4b0c      	ldr	r3, [pc, #48]	@ (8006b38 <prvAddNewTaskToReadyList+0xdc>)
 8006b08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b0c:	601a      	str	r2, [r3, #0]
 8006b0e:	f3bf 8f4f 	dsb	sy
 8006b12:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b16:	bf00      	nop
 8006b18:	3708      	adds	r7, #8
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	20000dc0 	.word	0x20000dc0
 8006b24:	200008ec 	.word	0x200008ec
 8006b28:	20000dcc 	.word	0x20000dcc
 8006b2c:	20000ddc 	.word	0x20000ddc
 8006b30:	20000dc8 	.word	0x20000dc8
 8006b34:	200008f0 	.word	0x200008f0
 8006b38:	e000ed04 	.word	0xe000ed04

08006b3c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006b44:	2300      	movs	r3, #0
 8006b46:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d018      	beq.n	8006b80 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006b4e:	4b14      	ldr	r3, [pc, #80]	@ (8006ba0 <vTaskDelay+0x64>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d00b      	beq.n	8006b6e <vTaskDelay+0x32>
	__asm volatile
 8006b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b5a:	f383 8811 	msr	BASEPRI, r3
 8006b5e:	f3bf 8f6f 	isb	sy
 8006b62:	f3bf 8f4f 	dsb	sy
 8006b66:	60bb      	str	r3, [r7, #8]
}
 8006b68:	bf00      	nop
 8006b6a:	bf00      	nop
 8006b6c:	e7fd      	b.n	8006b6a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006b6e:	f000 f883 	bl	8006c78 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006b72:	2100      	movs	r1, #0
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 fcf3 	bl	8007560 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006b7a:	f000 f88b 	bl	8006c94 <xTaskResumeAll>
 8006b7e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d107      	bne.n	8006b96 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006b86:	4b07      	ldr	r3, [pc, #28]	@ (8006ba4 <vTaskDelay+0x68>)
 8006b88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b8c:	601a      	str	r2, [r3, #0]
 8006b8e:	f3bf 8f4f 	dsb	sy
 8006b92:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006b96:	bf00      	nop
 8006b98:	3710      	adds	r7, #16
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	20000de8 	.word	0x20000de8
 8006ba4:	e000ed04 	.word	0xe000ed04

08006ba8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b08a      	sub	sp, #40	@ 0x28
 8006bac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006bb6:	463a      	mov	r2, r7
 8006bb8:	1d39      	adds	r1, r7, #4
 8006bba:	f107 0308 	add.w	r3, r7, #8
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f7fe fff8 	bl	8005bb4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006bc4:	6839      	ldr	r1, [r7, #0]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	68ba      	ldr	r2, [r7, #8]
 8006bca:	9202      	str	r2, [sp, #8]
 8006bcc:	9301      	str	r3, [sp, #4]
 8006bce:	2300      	movs	r3, #0
 8006bd0:	9300      	str	r3, [sp, #0]
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	460a      	mov	r2, r1
 8006bd6:	4922      	ldr	r1, [pc, #136]	@ (8006c60 <vTaskStartScheduler+0xb8>)
 8006bd8:	4822      	ldr	r0, [pc, #136]	@ (8006c64 <vTaskStartScheduler+0xbc>)
 8006bda:	f7ff fe09 	bl	80067f0 <xTaskCreateStatic>
 8006bde:	4603      	mov	r3, r0
 8006be0:	4a21      	ldr	r2, [pc, #132]	@ (8006c68 <vTaskStartScheduler+0xc0>)
 8006be2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006be4:	4b20      	ldr	r3, [pc, #128]	@ (8006c68 <vTaskStartScheduler+0xc0>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d002      	beq.n	8006bf2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006bec:	2301      	movs	r3, #1
 8006bee:	617b      	str	r3, [r7, #20]
 8006bf0:	e001      	b.n	8006bf6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d102      	bne.n	8006c02 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006bfc:	f000 fd04 	bl	8007608 <xTimerCreateTimerTask>
 8006c00:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d116      	bne.n	8006c36 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c0c:	f383 8811 	msr	BASEPRI, r3
 8006c10:	f3bf 8f6f 	isb	sy
 8006c14:	f3bf 8f4f 	dsb	sy
 8006c18:	613b      	str	r3, [r7, #16]
}
 8006c1a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006c1c:	4b13      	ldr	r3, [pc, #76]	@ (8006c6c <vTaskStartScheduler+0xc4>)
 8006c1e:	f04f 32ff 	mov.w	r2, #4294967295
 8006c22:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006c24:	4b12      	ldr	r3, [pc, #72]	@ (8006c70 <vTaskStartScheduler+0xc8>)
 8006c26:	2201      	movs	r2, #1
 8006c28:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006c2a:	4b12      	ldr	r3, [pc, #72]	@ (8006c74 <vTaskStartScheduler+0xcc>)
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006c30:	f001 f8ce 	bl	8007dd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006c34:	e00f      	b.n	8006c56 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c3c:	d10b      	bne.n	8006c56 <vTaskStartScheduler+0xae>
	__asm volatile
 8006c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c42:	f383 8811 	msr	BASEPRI, r3
 8006c46:	f3bf 8f6f 	isb	sy
 8006c4a:	f3bf 8f4f 	dsb	sy
 8006c4e:	60fb      	str	r3, [r7, #12]
}
 8006c50:	bf00      	nop
 8006c52:	bf00      	nop
 8006c54:	e7fd      	b.n	8006c52 <vTaskStartScheduler+0xaa>
}
 8006c56:	bf00      	nop
 8006c58:	3718      	adds	r7, #24
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop
 8006c60:	080095bc 	.word	0x080095bc
 8006c64:	08007299 	.word	0x08007299
 8006c68:	20000de4 	.word	0x20000de4
 8006c6c:	20000de0 	.word	0x20000de0
 8006c70:	20000dcc 	.word	0x20000dcc
 8006c74:	20000dc4 	.word	0x20000dc4

08006c78 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006c78:	b480      	push	{r7}
 8006c7a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006c7c:	4b04      	ldr	r3, [pc, #16]	@ (8006c90 <vTaskSuspendAll+0x18>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	3301      	adds	r3, #1
 8006c82:	4a03      	ldr	r2, [pc, #12]	@ (8006c90 <vTaskSuspendAll+0x18>)
 8006c84:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006c86:	bf00      	nop
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr
 8006c90:	20000de8 	.word	0x20000de8

08006c94 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006ca2:	4b42      	ldr	r3, [pc, #264]	@ (8006dac <xTaskResumeAll+0x118>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d10b      	bne.n	8006cc2 <xTaskResumeAll+0x2e>
	__asm volatile
 8006caa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cae:	f383 8811 	msr	BASEPRI, r3
 8006cb2:	f3bf 8f6f 	isb	sy
 8006cb6:	f3bf 8f4f 	dsb	sy
 8006cba:	603b      	str	r3, [r7, #0]
}
 8006cbc:	bf00      	nop
 8006cbe:	bf00      	nop
 8006cc0:	e7fd      	b.n	8006cbe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006cc2:	f001 f929 	bl	8007f18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006cc6:	4b39      	ldr	r3, [pc, #228]	@ (8006dac <xTaskResumeAll+0x118>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	3b01      	subs	r3, #1
 8006ccc:	4a37      	ldr	r2, [pc, #220]	@ (8006dac <xTaskResumeAll+0x118>)
 8006cce:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cd0:	4b36      	ldr	r3, [pc, #216]	@ (8006dac <xTaskResumeAll+0x118>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d162      	bne.n	8006d9e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006cd8:	4b35      	ldr	r3, [pc, #212]	@ (8006db0 <xTaskResumeAll+0x11c>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d05e      	beq.n	8006d9e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ce0:	e02f      	b.n	8006d42 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ce2:	4b34      	ldr	r3, [pc, #208]	@ (8006db4 <xTaskResumeAll+0x120>)
 8006ce4:	68db      	ldr	r3, [r3, #12]
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	3318      	adds	r3, #24
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f7ff f81e 	bl	8005d30 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	3304      	adds	r3, #4
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f7ff f819 	bl	8005d30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d02:	4b2d      	ldr	r3, [pc, #180]	@ (8006db8 <xTaskResumeAll+0x124>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d903      	bls.n	8006d12 <xTaskResumeAll+0x7e>
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d0e:	4a2a      	ldr	r2, [pc, #168]	@ (8006db8 <xTaskResumeAll+0x124>)
 8006d10:	6013      	str	r3, [r2, #0]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d16:	4613      	mov	r3, r2
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	4413      	add	r3, r2
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	4a27      	ldr	r2, [pc, #156]	@ (8006dbc <xTaskResumeAll+0x128>)
 8006d20:	441a      	add	r2, r3
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	3304      	adds	r3, #4
 8006d26:	4619      	mov	r1, r3
 8006d28:	4610      	mov	r0, r2
 8006d2a:	f7fe ffa4 	bl	8005c76 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d32:	4b23      	ldr	r3, [pc, #140]	@ (8006dc0 <xTaskResumeAll+0x12c>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d302      	bcc.n	8006d42 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006d3c:	4b21      	ldr	r3, [pc, #132]	@ (8006dc4 <xTaskResumeAll+0x130>)
 8006d3e:	2201      	movs	r2, #1
 8006d40:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d42:	4b1c      	ldr	r3, [pc, #112]	@ (8006db4 <xTaskResumeAll+0x120>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d1cb      	bne.n	8006ce2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d001      	beq.n	8006d54 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006d50:	f000 fb58 	bl	8007404 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006d54:	4b1c      	ldr	r3, [pc, #112]	@ (8006dc8 <xTaskResumeAll+0x134>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d010      	beq.n	8006d82 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006d60:	f000 f846 	bl	8006df0 <xTaskIncrementTick>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d002      	beq.n	8006d70 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006d6a:	4b16      	ldr	r3, [pc, #88]	@ (8006dc4 <xTaskResumeAll+0x130>)
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	3b01      	subs	r3, #1
 8006d74:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d1f1      	bne.n	8006d60 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006d7c:	4b12      	ldr	r3, [pc, #72]	@ (8006dc8 <xTaskResumeAll+0x134>)
 8006d7e:	2200      	movs	r2, #0
 8006d80:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006d82:	4b10      	ldr	r3, [pc, #64]	@ (8006dc4 <xTaskResumeAll+0x130>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d009      	beq.n	8006d9e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006d8e:	4b0f      	ldr	r3, [pc, #60]	@ (8006dcc <xTaskResumeAll+0x138>)
 8006d90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d94:	601a      	str	r2, [r3, #0]
 8006d96:	f3bf 8f4f 	dsb	sy
 8006d9a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006d9e:	f001 f8ed 	bl	8007f7c <vPortExitCritical>

	return xAlreadyYielded;
 8006da2:	68bb      	ldr	r3, [r7, #8]
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3710      	adds	r7, #16
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}
 8006dac:	20000de8 	.word	0x20000de8
 8006db0:	20000dc0 	.word	0x20000dc0
 8006db4:	20000d80 	.word	0x20000d80
 8006db8:	20000dc8 	.word	0x20000dc8
 8006dbc:	200008f0 	.word	0x200008f0
 8006dc0:	200008ec 	.word	0x200008ec
 8006dc4:	20000dd4 	.word	0x20000dd4
 8006dc8:	20000dd0 	.word	0x20000dd0
 8006dcc:	e000ed04 	.word	0xe000ed04

08006dd0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006dd6:	4b05      	ldr	r3, [pc, #20]	@ (8006dec <xTaskGetTickCount+0x1c>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006ddc:	687b      	ldr	r3, [r7, #4]
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	370c      	adds	r7, #12
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr
 8006dea:	bf00      	nop
 8006dec:	20000dc4 	.word	0x20000dc4

08006df0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b086      	sub	sp, #24
 8006df4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006df6:	2300      	movs	r3, #0
 8006df8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006dfa:	4b4f      	ldr	r3, [pc, #316]	@ (8006f38 <xTaskIncrementTick+0x148>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	f040 8090 	bne.w	8006f24 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006e04:	4b4d      	ldr	r3, [pc, #308]	@ (8006f3c <xTaskIncrementTick+0x14c>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	3301      	adds	r3, #1
 8006e0a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006e0c:	4a4b      	ldr	r2, [pc, #300]	@ (8006f3c <xTaskIncrementTick+0x14c>)
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d121      	bne.n	8006e5c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006e18:	4b49      	ldr	r3, [pc, #292]	@ (8006f40 <xTaskIncrementTick+0x150>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00b      	beq.n	8006e3a <xTaskIncrementTick+0x4a>
	__asm volatile
 8006e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e26:	f383 8811 	msr	BASEPRI, r3
 8006e2a:	f3bf 8f6f 	isb	sy
 8006e2e:	f3bf 8f4f 	dsb	sy
 8006e32:	603b      	str	r3, [r7, #0]
}
 8006e34:	bf00      	nop
 8006e36:	bf00      	nop
 8006e38:	e7fd      	b.n	8006e36 <xTaskIncrementTick+0x46>
 8006e3a:	4b41      	ldr	r3, [pc, #260]	@ (8006f40 <xTaskIncrementTick+0x150>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	60fb      	str	r3, [r7, #12]
 8006e40:	4b40      	ldr	r3, [pc, #256]	@ (8006f44 <xTaskIncrementTick+0x154>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a3e      	ldr	r2, [pc, #248]	@ (8006f40 <xTaskIncrementTick+0x150>)
 8006e46:	6013      	str	r3, [r2, #0]
 8006e48:	4a3e      	ldr	r2, [pc, #248]	@ (8006f44 <xTaskIncrementTick+0x154>)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	6013      	str	r3, [r2, #0]
 8006e4e:	4b3e      	ldr	r3, [pc, #248]	@ (8006f48 <xTaskIncrementTick+0x158>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	3301      	adds	r3, #1
 8006e54:	4a3c      	ldr	r2, [pc, #240]	@ (8006f48 <xTaskIncrementTick+0x158>)
 8006e56:	6013      	str	r3, [r2, #0]
 8006e58:	f000 fad4 	bl	8007404 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006e5c:	4b3b      	ldr	r3, [pc, #236]	@ (8006f4c <xTaskIncrementTick+0x15c>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	693a      	ldr	r2, [r7, #16]
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d349      	bcc.n	8006efa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e66:	4b36      	ldr	r3, [pc, #216]	@ (8006f40 <xTaskIncrementTick+0x150>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d104      	bne.n	8006e7a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e70:	4b36      	ldr	r3, [pc, #216]	@ (8006f4c <xTaskIncrementTick+0x15c>)
 8006e72:	f04f 32ff 	mov.w	r2, #4294967295
 8006e76:	601a      	str	r2, [r3, #0]
					break;
 8006e78:	e03f      	b.n	8006efa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e7a:	4b31      	ldr	r3, [pc, #196]	@ (8006f40 <xTaskIncrementTick+0x150>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	68db      	ldr	r3, [r3, #12]
 8006e82:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006e8a:	693a      	ldr	r2, [r7, #16]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d203      	bcs.n	8006e9a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006e92:	4a2e      	ldr	r2, [pc, #184]	@ (8006f4c <xTaskIncrementTick+0x15c>)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006e98:	e02f      	b.n	8006efa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	3304      	adds	r3, #4
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7fe ff46 	bl	8005d30 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d004      	beq.n	8006eb6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	3318      	adds	r3, #24
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f7fe ff3d 	bl	8005d30 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eba:	4b25      	ldr	r3, [pc, #148]	@ (8006f50 <xTaskIncrementTick+0x160>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d903      	bls.n	8006eca <xTaskIncrementTick+0xda>
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ec6:	4a22      	ldr	r2, [pc, #136]	@ (8006f50 <xTaskIncrementTick+0x160>)
 8006ec8:	6013      	str	r3, [r2, #0]
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ece:	4613      	mov	r3, r2
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	4413      	add	r3, r2
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	4a1f      	ldr	r2, [pc, #124]	@ (8006f54 <xTaskIncrementTick+0x164>)
 8006ed8:	441a      	add	r2, r3
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	3304      	adds	r3, #4
 8006ede:	4619      	mov	r1, r3
 8006ee0:	4610      	mov	r0, r2
 8006ee2:	f7fe fec8 	bl	8005c76 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eea:	4b1b      	ldr	r3, [pc, #108]	@ (8006f58 <xTaskIncrementTick+0x168>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d3b8      	bcc.n	8006e66 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ef8:	e7b5      	b.n	8006e66 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006efa:	4b17      	ldr	r3, [pc, #92]	@ (8006f58 <xTaskIncrementTick+0x168>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f00:	4914      	ldr	r1, [pc, #80]	@ (8006f54 <xTaskIncrementTick+0x164>)
 8006f02:	4613      	mov	r3, r2
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	4413      	add	r3, r2
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	440b      	add	r3, r1
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d901      	bls.n	8006f16 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006f12:	2301      	movs	r3, #1
 8006f14:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006f16:	4b11      	ldr	r3, [pc, #68]	@ (8006f5c <xTaskIncrementTick+0x16c>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d007      	beq.n	8006f2e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	617b      	str	r3, [r7, #20]
 8006f22:	e004      	b.n	8006f2e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006f24:	4b0e      	ldr	r3, [pc, #56]	@ (8006f60 <xTaskIncrementTick+0x170>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	3301      	adds	r3, #1
 8006f2a:	4a0d      	ldr	r2, [pc, #52]	@ (8006f60 <xTaskIncrementTick+0x170>)
 8006f2c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006f2e:	697b      	ldr	r3, [r7, #20]
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3718      	adds	r7, #24
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}
 8006f38:	20000de8 	.word	0x20000de8
 8006f3c:	20000dc4 	.word	0x20000dc4
 8006f40:	20000d78 	.word	0x20000d78
 8006f44:	20000d7c 	.word	0x20000d7c
 8006f48:	20000dd8 	.word	0x20000dd8
 8006f4c:	20000de0 	.word	0x20000de0
 8006f50:	20000dc8 	.word	0x20000dc8
 8006f54:	200008f0 	.word	0x200008f0
 8006f58:	200008ec 	.word	0x200008ec
 8006f5c:	20000dd4 	.word	0x20000dd4
 8006f60:	20000dd0 	.word	0x20000dd0

08006f64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006f64:	b480      	push	{r7}
 8006f66:	b085      	sub	sp, #20
 8006f68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006f6a:	4b28      	ldr	r3, [pc, #160]	@ (800700c <vTaskSwitchContext+0xa8>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d003      	beq.n	8006f7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006f72:	4b27      	ldr	r3, [pc, #156]	@ (8007010 <vTaskSwitchContext+0xac>)
 8006f74:	2201      	movs	r2, #1
 8006f76:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006f78:	e042      	b.n	8007000 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8006f7a:	4b25      	ldr	r3, [pc, #148]	@ (8007010 <vTaskSwitchContext+0xac>)
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f80:	4b24      	ldr	r3, [pc, #144]	@ (8007014 <vTaskSwitchContext+0xb0>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	60fb      	str	r3, [r7, #12]
 8006f86:	e011      	b.n	8006fac <vTaskSwitchContext+0x48>
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d10b      	bne.n	8006fa6 <vTaskSwitchContext+0x42>
	__asm volatile
 8006f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f92:	f383 8811 	msr	BASEPRI, r3
 8006f96:	f3bf 8f6f 	isb	sy
 8006f9a:	f3bf 8f4f 	dsb	sy
 8006f9e:	607b      	str	r3, [r7, #4]
}
 8006fa0:	bf00      	nop
 8006fa2:	bf00      	nop
 8006fa4:	e7fd      	b.n	8006fa2 <vTaskSwitchContext+0x3e>
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	3b01      	subs	r3, #1
 8006faa:	60fb      	str	r3, [r7, #12]
 8006fac:	491a      	ldr	r1, [pc, #104]	@ (8007018 <vTaskSwitchContext+0xb4>)
 8006fae:	68fa      	ldr	r2, [r7, #12]
 8006fb0:	4613      	mov	r3, r2
 8006fb2:	009b      	lsls	r3, r3, #2
 8006fb4:	4413      	add	r3, r2
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	440b      	add	r3, r1
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d0e3      	beq.n	8006f88 <vTaskSwitchContext+0x24>
 8006fc0:	68fa      	ldr	r2, [r7, #12]
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	4413      	add	r3, r2
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	4a13      	ldr	r2, [pc, #76]	@ (8007018 <vTaskSwitchContext+0xb4>)
 8006fcc:	4413      	add	r3, r2
 8006fce:	60bb      	str	r3, [r7, #8]
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	685a      	ldr	r2, [r3, #4]
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	605a      	str	r2, [r3, #4]
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	685a      	ldr	r2, [r3, #4]
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	3308      	adds	r3, #8
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d104      	bne.n	8006ff0 <vTaskSwitchContext+0x8c>
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	685a      	ldr	r2, [r3, #4]
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	605a      	str	r2, [r3, #4]
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	68db      	ldr	r3, [r3, #12]
 8006ff6:	4a09      	ldr	r2, [pc, #36]	@ (800701c <vTaskSwitchContext+0xb8>)
 8006ff8:	6013      	str	r3, [r2, #0]
 8006ffa:	4a06      	ldr	r2, [pc, #24]	@ (8007014 <vTaskSwitchContext+0xb0>)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6013      	str	r3, [r2, #0]
}
 8007000:	bf00      	nop
 8007002:	3714      	adds	r7, #20
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr
 800700c:	20000de8 	.word	0x20000de8
 8007010:	20000dd4 	.word	0x20000dd4
 8007014:	20000dc8 	.word	0x20000dc8
 8007018:	200008f0 	.word	0x200008f0
 800701c:	200008ec 	.word	0x200008ec

08007020 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d10b      	bne.n	8007048 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007034:	f383 8811 	msr	BASEPRI, r3
 8007038:	f3bf 8f6f 	isb	sy
 800703c:	f3bf 8f4f 	dsb	sy
 8007040:	60fb      	str	r3, [r7, #12]
}
 8007042:	bf00      	nop
 8007044:	bf00      	nop
 8007046:	e7fd      	b.n	8007044 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007048:	4b07      	ldr	r3, [pc, #28]	@ (8007068 <vTaskPlaceOnEventList+0x48>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	3318      	adds	r3, #24
 800704e:	4619      	mov	r1, r3
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f7fe fe34 	bl	8005cbe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007056:	2101      	movs	r1, #1
 8007058:	6838      	ldr	r0, [r7, #0]
 800705a:	f000 fa81 	bl	8007560 <prvAddCurrentTaskToDelayedList>
}
 800705e:	bf00      	nop
 8007060:	3710      	adds	r7, #16
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	200008ec 	.word	0x200008ec

0800706c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800706c:	b580      	push	{r7, lr}
 800706e:	b086      	sub	sp, #24
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d10b      	bne.n	8007096 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800707e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007082:	f383 8811 	msr	BASEPRI, r3
 8007086:	f3bf 8f6f 	isb	sy
 800708a:	f3bf 8f4f 	dsb	sy
 800708e:	617b      	str	r3, [r7, #20]
}
 8007090:	bf00      	nop
 8007092:	bf00      	nop
 8007094:	e7fd      	b.n	8007092 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007096:	4b0a      	ldr	r3, [pc, #40]	@ (80070c0 <vTaskPlaceOnEventListRestricted+0x54>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	3318      	adds	r3, #24
 800709c:	4619      	mov	r1, r3
 800709e:	68f8      	ldr	r0, [r7, #12]
 80070a0:	f7fe fde9 	bl	8005c76 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d002      	beq.n	80070b0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80070aa:	f04f 33ff 	mov.w	r3, #4294967295
 80070ae:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80070b0:	6879      	ldr	r1, [r7, #4]
 80070b2:	68b8      	ldr	r0, [r7, #8]
 80070b4:	f000 fa54 	bl	8007560 <prvAddCurrentTaskToDelayedList>
	}
 80070b8:	bf00      	nop
 80070ba:	3718      	adds	r7, #24
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	200008ec 	.word	0x200008ec

080070c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b086      	sub	sp, #24
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d10b      	bne.n	80070f2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80070da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070de:	f383 8811 	msr	BASEPRI, r3
 80070e2:	f3bf 8f6f 	isb	sy
 80070e6:	f3bf 8f4f 	dsb	sy
 80070ea:	60fb      	str	r3, [r7, #12]
}
 80070ec:	bf00      	nop
 80070ee:	bf00      	nop
 80070f0:	e7fd      	b.n	80070ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	3318      	adds	r3, #24
 80070f6:	4618      	mov	r0, r3
 80070f8:	f7fe fe1a 	bl	8005d30 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070fc:	4b1d      	ldr	r3, [pc, #116]	@ (8007174 <xTaskRemoveFromEventList+0xb0>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d11d      	bne.n	8007140 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	3304      	adds	r3, #4
 8007108:	4618      	mov	r0, r3
 800710a:	f7fe fe11 	bl	8005d30 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007112:	4b19      	ldr	r3, [pc, #100]	@ (8007178 <xTaskRemoveFromEventList+0xb4>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	429a      	cmp	r2, r3
 8007118:	d903      	bls.n	8007122 <xTaskRemoveFromEventList+0x5e>
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800711e:	4a16      	ldr	r2, [pc, #88]	@ (8007178 <xTaskRemoveFromEventList+0xb4>)
 8007120:	6013      	str	r3, [r2, #0]
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007126:	4613      	mov	r3, r2
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	4413      	add	r3, r2
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	4a13      	ldr	r2, [pc, #76]	@ (800717c <xTaskRemoveFromEventList+0xb8>)
 8007130:	441a      	add	r2, r3
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	3304      	adds	r3, #4
 8007136:	4619      	mov	r1, r3
 8007138:	4610      	mov	r0, r2
 800713a:	f7fe fd9c 	bl	8005c76 <vListInsertEnd>
 800713e:	e005      	b.n	800714c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	3318      	adds	r3, #24
 8007144:	4619      	mov	r1, r3
 8007146:	480e      	ldr	r0, [pc, #56]	@ (8007180 <xTaskRemoveFromEventList+0xbc>)
 8007148:	f7fe fd95 	bl	8005c76 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007150:	4b0c      	ldr	r3, [pc, #48]	@ (8007184 <xTaskRemoveFromEventList+0xc0>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007156:	429a      	cmp	r2, r3
 8007158:	d905      	bls.n	8007166 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800715a:	2301      	movs	r3, #1
 800715c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800715e:	4b0a      	ldr	r3, [pc, #40]	@ (8007188 <xTaskRemoveFromEventList+0xc4>)
 8007160:	2201      	movs	r2, #1
 8007162:	601a      	str	r2, [r3, #0]
 8007164:	e001      	b.n	800716a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007166:	2300      	movs	r3, #0
 8007168:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800716a:	697b      	ldr	r3, [r7, #20]
}
 800716c:	4618      	mov	r0, r3
 800716e:	3718      	adds	r7, #24
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}
 8007174:	20000de8 	.word	0x20000de8
 8007178:	20000dc8 	.word	0x20000dc8
 800717c:	200008f0 	.word	0x200008f0
 8007180:	20000d80 	.word	0x20000d80
 8007184:	200008ec 	.word	0x200008ec
 8007188:	20000dd4 	.word	0x20000dd4

0800718c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800718c:	b480      	push	{r7}
 800718e:	b083      	sub	sp, #12
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007194:	4b06      	ldr	r3, [pc, #24]	@ (80071b0 <vTaskInternalSetTimeOutState+0x24>)
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800719c:	4b05      	ldr	r3, [pc, #20]	@ (80071b4 <vTaskInternalSetTimeOutState+0x28>)
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	605a      	str	r2, [r3, #4]
}
 80071a4:	bf00      	nop
 80071a6:	370c      	adds	r7, #12
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr
 80071b0:	20000dd8 	.word	0x20000dd8
 80071b4:	20000dc4 	.word	0x20000dc4

080071b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b088      	sub	sp, #32
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d10b      	bne.n	80071e0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80071c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071cc:	f383 8811 	msr	BASEPRI, r3
 80071d0:	f3bf 8f6f 	isb	sy
 80071d4:	f3bf 8f4f 	dsb	sy
 80071d8:	613b      	str	r3, [r7, #16]
}
 80071da:	bf00      	nop
 80071dc:	bf00      	nop
 80071de:	e7fd      	b.n	80071dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d10b      	bne.n	80071fe <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80071e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ea:	f383 8811 	msr	BASEPRI, r3
 80071ee:	f3bf 8f6f 	isb	sy
 80071f2:	f3bf 8f4f 	dsb	sy
 80071f6:	60fb      	str	r3, [r7, #12]
}
 80071f8:	bf00      	nop
 80071fa:	bf00      	nop
 80071fc:	e7fd      	b.n	80071fa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80071fe:	f000 fe8b 	bl	8007f18 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007202:	4b1d      	ldr	r3, [pc, #116]	@ (8007278 <xTaskCheckForTimeOut+0xc0>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	69ba      	ldr	r2, [r7, #24]
 800720e:	1ad3      	subs	r3, r2, r3
 8007210:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800721a:	d102      	bne.n	8007222 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800721c:	2300      	movs	r3, #0
 800721e:	61fb      	str	r3, [r7, #28]
 8007220:	e023      	b.n	800726a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	4b15      	ldr	r3, [pc, #84]	@ (800727c <xTaskCheckForTimeOut+0xc4>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	429a      	cmp	r2, r3
 800722c:	d007      	beq.n	800723e <xTaskCheckForTimeOut+0x86>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	69ba      	ldr	r2, [r7, #24]
 8007234:	429a      	cmp	r2, r3
 8007236:	d302      	bcc.n	800723e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007238:	2301      	movs	r3, #1
 800723a:	61fb      	str	r3, [r7, #28]
 800723c:	e015      	b.n	800726a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	697a      	ldr	r2, [r7, #20]
 8007244:	429a      	cmp	r2, r3
 8007246:	d20b      	bcs.n	8007260 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	1ad2      	subs	r2, r2, r3
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f7ff ff99 	bl	800718c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800725a:	2300      	movs	r3, #0
 800725c:	61fb      	str	r3, [r7, #28]
 800725e:	e004      	b.n	800726a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	2200      	movs	r2, #0
 8007264:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007266:	2301      	movs	r3, #1
 8007268:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800726a:	f000 fe87 	bl	8007f7c <vPortExitCritical>

	return xReturn;
 800726e:	69fb      	ldr	r3, [r7, #28]
}
 8007270:	4618      	mov	r0, r3
 8007272:	3720      	adds	r7, #32
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}
 8007278:	20000dc4 	.word	0x20000dc4
 800727c:	20000dd8 	.word	0x20000dd8

08007280 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007280:	b480      	push	{r7}
 8007282:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007284:	4b03      	ldr	r3, [pc, #12]	@ (8007294 <vTaskMissedYield+0x14>)
 8007286:	2201      	movs	r2, #1
 8007288:	601a      	str	r2, [r3, #0]
}
 800728a:	bf00      	nop
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr
 8007294:	20000dd4 	.word	0x20000dd4

08007298 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b082      	sub	sp, #8
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80072a0:	f000 f852 	bl	8007348 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80072a4:	4b06      	ldr	r3, [pc, #24]	@ (80072c0 <prvIdleTask+0x28>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d9f9      	bls.n	80072a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80072ac:	4b05      	ldr	r3, [pc, #20]	@ (80072c4 <prvIdleTask+0x2c>)
 80072ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072b2:	601a      	str	r2, [r3, #0]
 80072b4:	f3bf 8f4f 	dsb	sy
 80072b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80072bc:	e7f0      	b.n	80072a0 <prvIdleTask+0x8>
 80072be:	bf00      	nop
 80072c0:	200008f0 	.word	0x200008f0
 80072c4:	e000ed04 	.word	0xe000ed04

080072c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072ce:	2300      	movs	r3, #0
 80072d0:	607b      	str	r3, [r7, #4]
 80072d2:	e00c      	b.n	80072ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	4613      	mov	r3, r2
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	4413      	add	r3, r2
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	4a12      	ldr	r2, [pc, #72]	@ (8007328 <prvInitialiseTaskLists+0x60>)
 80072e0:	4413      	add	r3, r2
 80072e2:	4618      	mov	r0, r3
 80072e4:	f7fe fc9a 	bl	8005c1c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	3301      	adds	r3, #1
 80072ec:	607b      	str	r3, [r7, #4]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2b37      	cmp	r3, #55	@ 0x37
 80072f2:	d9ef      	bls.n	80072d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80072f4:	480d      	ldr	r0, [pc, #52]	@ (800732c <prvInitialiseTaskLists+0x64>)
 80072f6:	f7fe fc91 	bl	8005c1c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80072fa:	480d      	ldr	r0, [pc, #52]	@ (8007330 <prvInitialiseTaskLists+0x68>)
 80072fc:	f7fe fc8e 	bl	8005c1c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007300:	480c      	ldr	r0, [pc, #48]	@ (8007334 <prvInitialiseTaskLists+0x6c>)
 8007302:	f7fe fc8b 	bl	8005c1c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007306:	480c      	ldr	r0, [pc, #48]	@ (8007338 <prvInitialiseTaskLists+0x70>)
 8007308:	f7fe fc88 	bl	8005c1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800730c:	480b      	ldr	r0, [pc, #44]	@ (800733c <prvInitialiseTaskLists+0x74>)
 800730e:	f7fe fc85 	bl	8005c1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007312:	4b0b      	ldr	r3, [pc, #44]	@ (8007340 <prvInitialiseTaskLists+0x78>)
 8007314:	4a05      	ldr	r2, [pc, #20]	@ (800732c <prvInitialiseTaskLists+0x64>)
 8007316:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007318:	4b0a      	ldr	r3, [pc, #40]	@ (8007344 <prvInitialiseTaskLists+0x7c>)
 800731a:	4a05      	ldr	r2, [pc, #20]	@ (8007330 <prvInitialiseTaskLists+0x68>)
 800731c:	601a      	str	r2, [r3, #0]
}
 800731e:	bf00      	nop
 8007320:	3708      	adds	r7, #8
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	200008f0 	.word	0x200008f0
 800732c:	20000d50 	.word	0x20000d50
 8007330:	20000d64 	.word	0x20000d64
 8007334:	20000d80 	.word	0x20000d80
 8007338:	20000d94 	.word	0x20000d94
 800733c:	20000dac 	.word	0x20000dac
 8007340:	20000d78 	.word	0x20000d78
 8007344:	20000d7c 	.word	0x20000d7c

08007348 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800734e:	e019      	b.n	8007384 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007350:	f000 fde2 	bl	8007f18 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007354:	4b10      	ldr	r3, [pc, #64]	@ (8007398 <prvCheckTasksWaitingTermination+0x50>)
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	3304      	adds	r3, #4
 8007360:	4618      	mov	r0, r3
 8007362:	f7fe fce5 	bl	8005d30 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007366:	4b0d      	ldr	r3, [pc, #52]	@ (800739c <prvCheckTasksWaitingTermination+0x54>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	3b01      	subs	r3, #1
 800736c:	4a0b      	ldr	r2, [pc, #44]	@ (800739c <prvCheckTasksWaitingTermination+0x54>)
 800736e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007370:	4b0b      	ldr	r3, [pc, #44]	@ (80073a0 <prvCheckTasksWaitingTermination+0x58>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	3b01      	subs	r3, #1
 8007376:	4a0a      	ldr	r2, [pc, #40]	@ (80073a0 <prvCheckTasksWaitingTermination+0x58>)
 8007378:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800737a:	f000 fdff 	bl	8007f7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 f810 	bl	80073a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007384:	4b06      	ldr	r3, [pc, #24]	@ (80073a0 <prvCheckTasksWaitingTermination+0x58>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d1e1      	bne.n	8007350 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800738c:	bf00      	nop
 800738e:	bf00      	nop
 8007390:	3708      	adds	r7, #8
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop
 8007398:	20000d94 	.word	0x20000d94
 800739c:	20000dc0 	.word	0x20000dc0
 80073a0:	20000da8 	.word	0x20000da8

080073a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d108      	bne.n	80073c8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073ba:	4618      	mov	r0, r3
 80073bc:	f000 ff9c 	bl	80082f8 <vPortFree>
				vPortFree( pxTCB );
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f000 ff99 	bl	80082f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80073c6:	e019      	b.n	80073fc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d103      	bne.n	80073da <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 ff90 	bl	80082f8 <vPortFree>
	}
 80073d8:	e010      	b.n	80073fc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80073e0:	2b02      	cmp	r3, #2
 80073e2:	d00b      	beq.n	80073fc <prvDeleteTCB+0x58>
	__asm volatile
 80073e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073e8:	f383 8811 	msr	BASEPRI, r3
 80073ec:	f3bf 8f6f 	isb	sy
 80073f0:	f3bf 8f4f 	dsb	sy
 80073f4:	60fb      	str	r3, [r7, #12]
}
 80073f6:	bf00      	nop
 80073f8:	bf00      	nop
 80073fa:	e7fd      	b.n	80073f8 <prvDeleteTCB+0x54>
	}
 80073fc:	bf00      	nop
 80073fe:	3710      	adds	r7, #16
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800740a:	4b0c      	ldr	r3, [pc, #48]	@ (800743c <prvResetNextTaskUnblockTime+0x38>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d104      	bne.n	800741e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007414:	4b0a      	ldr	r3, [pc, #40]	@ (8007440 <prvResetNextTaskUnblockTime+0x3c>)
 8007416:	f04f 32ff 	mov.w	r2, #4294967295
 800741a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800741c:	e008      	b.n	8007430 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800741e:	4b07      	ldr	r3, [pc, #28]	@ (800743c <prvResetNextTaskUnblockTime+0x38>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	4a04      	ldr	r2, [pc, #16]	@ (8007440 <prvResetNextTaskUnblockTime+0x3c>)
 800742e:	6013      	str	r3, [r2, #0]
}
 8007430:	bf00      	nop
 8007432:	370c      	adds	r7, #12
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr
 800743c:	20000d78 	.word	0x20000d78
 8007440:	20000de0 	.word	0x20000de0

08007444 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800744a:	4b0b      	ldr	r3, [pc, #44]	@ (8007478 <xTaskGetSchedulerState+0x34>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d102      	bne.n	8007458 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007452:	2301      	movs	r3, #1
 8007454:	607b      	str	r3, [r7, #4]
 8007456:	e008      	b.n	800746a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007458:	4b08      	ldr	r3, [pc, #32]	@ (800747c <xTaskGetSchedulerState+0x38>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d102      	bne.n	8007466 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007460:	2302      	movs	r3, #2
 8007462:	607b      	str	r3, [r7, #4]
 8007464:	e001      	b.n	800746a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007466:	2300      	movs	r3, #0
 8007468:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800746a:	687b      	ldr	r3, [r7, #4]
	}
 800746c:	4618      	mov	r0, r3
 800746e:	370c      	adds	r7, #12
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr
 8007478:	20000dcc 	.word	0x20000dcc
 800747c:	20000de8 	.word	0x20000de8

08007480 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007480:	b580      	push	{r7, lr}
 8007482:	b086      	sub	sp, #24
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800748c:	2300      	movs	r3, #0
 800748e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d058      	beq.n	8007548 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007496:	4b2f      	ldr	r3, [pc, #188]	@ (8007554 <xTaskPriorityDisinherit+0xd4>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	693a      	ldr	r2, [r7, #16]
 800749c:	429a      	cmp	r2, r3
 800749e:	d00b      	beq.n	80074b8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80074a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074a4:	f383 8811 	msr	BASEPRI, r3
 80074a8:	f3bf 8f6f 	isb	sy
 80074ac:	f3bf 8f4f 	dsb	sy
 80074b0:	60fb      	str	r3, [r7, #12]
}
 80074b2:	bf00      	nop
 80074b4:	bf00      	nop
 80074b6:	e7fd      	b.n	80074b4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d10b      	bne.n	80074d8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80074c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074c4:	f383 8811 	msr	BASEPRI, r3
 80074c8:	f3bf 8f6f 	isb	sy
 80074cc:	f3bf 8f4f 	dsb	sy
 80074d0:	60bb      	str	r3, [r7, #8]
}
 80074d2:	bf00      	nop
 80074d4:	bf00      	nop
 80074d6:	e7fd      	b.n	80074d4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074dc:	1e5a      	subs	r2, r3, #1
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d02c      	beq.n	8007548 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d128      	bne.n	8007548 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	3304      	adds	r3, #4
 80074fa:	4618      	mov	r0, r3
 80074fc:	f7fe fc18 	bl	8005d30 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800750c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007518:	4b0f      	ldr	r3, [pc, #60]	@ (8007558 <xTaskPriorityDisinherit+0xd8>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	429a      	cmp	r2, r3
 800751e:	d903      	bls.n	8007528 <xTaskPriorityDisinherit+0xa8>
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007524:	4a0c      	ldr	r2, [pc, #48]	@ (8007558 <xTaskPriorityDisinherit+0xd8>)
 8007526:	6013      	str	r3, [r2, #0]
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800752c:	4613      	mov	r3, r2
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	4413      	add	r3, r2
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	4a09      	ldr	r2, [pc, #36]	@ (800755c <xTaskPriorityDisinherit+0xdc>)
 8007536:	441a      	add	r2, r3
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	3304      	adds	r3, #4
 800753c:	4619      	mov	r1, r3
 800753e:	4610      	mov	r0, r2
 8007540:	f7fe fb99 	bl	8005c76 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007544:	2301      	movs	r3, #1
 8007546:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007548:	697b      	ldr	r3, [r7, #20]
	}
 800754a:	4618      	mov	r0, r3
 800754c:	3718      	adds	r7, #24
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
 8007552:	bf00      	nop
 8007554:	200008ec 	.word	0x200008ec
 8007558:	20000dc8 	.word	0x20000dc8
 800755c:	200008f0 	.word	0x200008f0

08007560 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800756a:	4b21      	ldr	r3, [pc, #132]	@ (80075f0 <prvAddCurrentTaskToDelayedList+0x90>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007570:	4b20      	ldr	r3, [pc, #128]	@ (80075f4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	3304      	adds	r3, #4
 8007576:	4618      	mov	r0, r3
 8007578:	f7fe fbda 	bl	8005d30 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007582:	d10a      	bne.n	800759a <prvAddCurrentTaskToDelayedList+0x3a>
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d007      	beq.n	800759a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800758a:	4b1a      	ldr	r3, [pc, #104]	@ (80075f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	3304      	adds	r3, #4
 8007590:	4619      	mov	r1, r3
 8007592:	4819      	ldr	r0, [pc, #100]	@ (80075f8 <prvAddCurrentTaskToDelayedList+0x98>)
 8007594:	f7fe fb6f 	bl	8005c76 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007598:	e026      	b.n	80075e8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800759a:	68fa      	ldr	r2, [r7, #12]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	4413      	add	r3, r2
 80075a0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80075a2:	4b14      	ldr	r3, [pc, #80]	@ (80075f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	68ba      	ldr	r2, [r7, #8]
 80075a8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80075aa:	68ba      	ldr	r2, [r7, #8]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d209      	bcs.n	80075c6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80075b2:	4b12      	ldr	r3, [pc, #72]	@ (80075fc <prvAddCurrentTaskToDelayedList+0x9c>)
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	4b0f      	ldr	r3, [pc, #60]	@ (80075f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	3304      	adds	r3, #4
 80075bc:	4619      	mov	r1, r3
 80075be:	4610      	mov	r0, r2
 80075c0:	f7fe fb7d 	bl	8005cbe <vListInsert>
}
 80075c4:	e010      	b.n	80075e8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80075c6:	4b0e      	ldr	r3, [pc, #56]	@ (8007600 <prvAddCurrentTaskToDelayedList+0xa0>)
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	4b0a      	ldr	r3, [pc, #40]	@ (80075f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	3304      	adds	r3, #4
 80075d0:	4619      	mov	r1, r3
 80075d2:	4610      	mov	r0, r2
 80075d4:	f7fe fb73 	bl	8005cbe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80075d8:	4b0a      	ldr	r3, [pc, #40]	@ (8007604 <prvAddCurrentTaskToDelayedList+0xa4>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	68ba      	ldr	r2, [r7, #8]
 80075de:	429a      	cmp	r2, r3
 80075e0:	d202      	bcs.n	80075e8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80075e2:	4a08      	ldr	r2, [pc, #32]	@ (8007604 <prvAddCurrentTaskToDelayedList+0xa4>)
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	6013      	str	r3, [r2, #0]
}
 80075e8:	bf00      	nop
 80075ea:	3710      	adds	r7, #16
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}
 80075f0:	20000dc4 	.word	0x20000dc4
 80075f4:	200008ec 	.word	0x200008ec
 80075f8:	20000dac 	.word	0x20000dac
 80075fc:	20000d7c 	.word	0x20000d7c
 8007600:	20000d78 	.word	0x20000d78
 8007604:	20000de0 	.word	0x20000de0

08007608 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b08a      	sub	sp, #40	@ 0x28
 800760c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800760e:	2300      	movs	r3, #0
 8007610:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007612:	f000 fb13 	bl	8007c3c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007616:	4b1d      	ldr	r3, [pc, #116]	@ (800768c <xTimerCreateTimerTask+0x84>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d021      	beq.n	8007662 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800761e:	2300      	movs	r3, #0
 8007620:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007622:	2300      	movs	r3, #0
 8007624:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007626:	1d3a      	adds	r2, r7, #4
 8007628:	f107 0108 	add.w	r1, r7, #8
 800762c:	f107 030c 	add.w	r3, r7, #12
 8007630:	4618      	mov	r0, r3
 8007632:	f7fe fad9 	bl	8005be8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007636:	6879      	ldr	r1, [r7, #4]
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	68fa      	ldr	r2, [r7, #12]
 800763c:	9202      	str	r2, [sp, #8]
 800763e:	9301      	str	r3, [sp, #4]
 8007640:	2302      	movs	r3, #2
 8007642:	9300      	str	r3, [sp, #0]
 8007644:	2300      	movs	r3, #0
 8007646:	460a      	mov	r2, r1
 8007648:	4911      	ldr	r1, [pc, #68]	@ (8007690 <xTimerCreateTimerTask+0x88>)
 800764a:	4812      	ldr	r0, [pc, #72]	@ (8007694 <xTimerCreateTimerTask+0x8c>)
 800764c:	f7ff f8d0 	bl	80067f0 <xTaskCreateStatic>
 8007650:	4603      	mov	r3, r0
 8007652:	4a11      	ldr	r2, [pc, #68]	@ (8007698 <xTimerCreateTimerTask+0x90>)
 8007654:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007656:	4b10      	ldr	r3, [pc, #64]	@ (8007698 <xTimerCreateTimerTask+0x90>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d001      	beq.n	8007662 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800765e:	2301      	movs	r3, #1
 8007660:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d10b      	bne.n	8007680 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800766c:	f383 8811 	msr	BASEPRI, r3
 8007670:	f3bf 8f6f 	isb	sy
 8007674:	f3bf 8f4f 	dsb	sy
 8007678:	613b      	str	r3, [r7, #16]
}
 800767a:	bf00      	nop
 800767c:	bf00      	nop
 800767e:	e7fd      	b.n	800767c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007680:	697b      	ldr	r3, [r7, #20]
}
 8007682:	4618      	mov	r0, r3
 8007684:	3718      	adds	r7, #24
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
 800768a:	bf00      	nop
 800768c:	20000e1c 	.word	0x20000e1c
 8007690:	080095c4 	.word	0x080095c4
 8007694:	080077d5 	.word	0x080077d5
 8007698:	20000e20 	.word	0x20000e20

0800769c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b08a      	sub	sp, #40	@ 0x28
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	60b9      	str	r1, [r7, #8]
 80076a6:	607a      	str	r2, [r7, #4]
 80076a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80076aa:	2300      	movs	r3, #0
 80076ac:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d10b      	bne.n	80076cc <xTimerGenericCommand+0x30>
	__asm volatile
 80076b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076b8:	f383 8811 	msr	BASEPRI, r3
 80076bc:	f3bf 8f6f 	isb	sy
 80076c0:	f3bf 8f4f 	dsb	sy
 80076c4:	623b      	str	r3, [r7, #32]
}
 80076c6:	bf00      	nop
 80076c8:	bf00      	nop
 80076ca:	e7fd      	b.n	80076c8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80076cc:	4b19      	ldr	r3, [pc, #100]	@ (8007734 <xTimerGenericCommand+0x98>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d02a      	beq.n	800772a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	2b05      	cmp	r3, #5
 80076e4:	dc18      	bgt.n	8007718 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80076e6:	f7ff fead 	bl	8007444 <xTaskGetSchedulerState>
 80076ea:	4603      	mov	r3, r0
 80076ec:	2b02      	cmp	r3, #2
 80076ee:	d109      	bne.n	8007704 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80076f0:	4b10      	ldr	r3, [pc, #64]	@ (8007734 <xTimerGenericCommand+0x98>)
 80076f2:	6818      	ldr	r0, [r3, #0]
 80076f4:	f107 0110 	add.w	r1, r7, #16
 80076f8:	2300      	movs	r3, #0
 80076fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076fc:	f7fe fc88 	bl	8006010 <xQueueGenericSend>
 8007700:	6278      	str	r0, [r7, #36]	@ 0x24
 8007702:	e012      	b.n	800772a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007704:	4b0b      	ldr	r3, [pc, #44]	@ (8007734 <xTimerGenericCommand+0x98>)
 8007706:	6818      	ldr	r0, [r3, #0]
 8007708:	f107 0110 	add.w	r1, r7, #16
 800770c:	2300      	movs	r3, #0
 800770e:	2200      	movs	r2, #0
 8007710:	f7fe fc7e 	bl	8006010 <xQueueGenericSend>
 8007714:	6278      	str	r0, [r7, #36]	@ 0x24
 8007716:	e008      	b.n	800772a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007718:	4b06      	ldr	r3, [pc, #24]	@ (8007734 <xTimerGenericCommand+0x98>)
 800771a:	6818      	ldr	r0, [r3, #0]
 800771c:	f107 0110 	add.w	r1, r7, #16
 8007720:	2300      	movs	r3, #0
 8007722:	683a      	ldr	r2, [r7, #0]
 8007724:	f7fe fd76 	bl	8006214 <xQueueGenericSendFromISR>
 8007728:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800772a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800772c:	4618      	mov	r0, r3
 800772e:	3728      	adds	r7, #40	@ 0x28
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}
 8007734:	20000e1c 	.word	0x20000e1c

08007738 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b088      	sub	sp, #32
 800773c:	af02      	add	r7, sp, #8
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007742:	4b23      	ldr	r3, [pc, #140]	@ (80077d0 <prvProcessExpiredTimer+0x98>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	68db      	ldr	r3, [r3, #12]
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	3304      	adds	r3, #4
 8007750:	4618      	mov	r0, r3
 8007752:	f7fe faed 	bl	8005d30 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800775c:	f003 0304 	and.w	r3, r3, #4
 8007760:	2b00      	cmp	r3, #0
 8007762:	d023      	beq.n	80077ac <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	699a      	ldr	r2, [r3, #24]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	18d1      	adds	r1, r2, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	683a      	ldr	r2, [r7, #0]
 8007770:	6978      	ldr	r0, [r7, #20]
 8007772:	f000 f8d5 	bl	8007920 <prvInsertTimerInActiveList>
 8007776:	4603      	mov	r3, r0
 8007778:	2b00      	cmp	r3, #0
 800777a:	d020      	beq.n	80077be <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800777c:	2300      	movs	r3, #0
 800777e:	9300      	str	r3, [sp, #0]
 8007780:	2300      	movs	r3, #0
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	2100      	movs	r1, #0
 8007786:	6978      	ldr	r0, [r7, #20]
 8007788:	f7ff ff88 	bl	800769c <xTimerGenericCommand>
 800778c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d114      	bne.n	80077be <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007798:	f383 8811 	msr	BASEPRI, r3
 800779c:	f3bf 8f6f 	isb	sy
 80077a0:	f3bf 8f4f 	dsb	sy
 80077a4:	60fb      	str	r3, [r7, #12]
}
 80077a6:	bf00      	nop
 80077a8:	bf00      	nop
 80077aa:	e7fd      	b.n	80077a8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80077b2:	f023 0301 	bic.w	r3, r3, #1
 80077b6:	b2da      	uxtb	r2, r3
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	6a1b      	ldr	r3, [r3, #32]
 80077c2:	6978      	ldr	r0, [r7, #20]
 80077c4:	4798      	blx	r3
}
 80077c6:	bf00      	nop
 80077c8:	3718      	adds	r7, #24
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	bf00      	nop
 80077d0:	20000e14 	.word	0x20000e14

080077d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b084      	sub	sp, #16
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80077dc:	f107 0308 	add.w	r3, r7, #8
 80077e0:	4618      	mov	r0, r3
 80077e2:	f000 f859 	bl	8007898 <prvGetNextExpireTime>
 80077e6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	4619      	mov	r1, r3
 80077ec:	68f8      	ldr	r0, [r7, #12]
 80077ee:	f000 f805 	bl	80077fc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80077f2:	f000 f8d7 	bl	80079a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80077f6:	bf00      	nop
 80077f8:	e7f0      	b.n	80077dc <prvTimerTask+0x8>
	...

080077fc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b084      	sub	sp, #16
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007806:	f7ff fa37 	bl	8006c78 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800780a:	f107 0308 	add.w	r3, r7, #8
 800780e:	4618      	mov	r0, r3
 8007810:	f000 f866 	bl	80078e0 <prvSampleTimeNow>
 8007814:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d130      	bne.n	800787e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d10a      	bne.n	8007838 <prvProcessTimerOrBlockTask+0x3c>
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	429a      	cmp	r2, r3
 8007828:	d806      	bhi.n	8007838 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800782a:	f7ff fa33 	bl	8006c94 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800782e:	68f9      	ldr	r1, [r7, #12]
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f7ff ff81 	bl	8007738 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007836:	e024      	b.n	8007882 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d008      	beq.n	8007850 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800783e:	4b13      	ldr	r3, [pc, #76]	@ (800788c <prvProcessTimerOrBlockTask+0x90>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d101      	bne.n	800784c <prvProcessTimerOrBlockTask+0x50>
 8007848:	2301      	movs	r3, #1
 800784a:	e000      	b.n	800784e <prvProcessTimerOrBlockTask+0x52>
 800784c:	2300      	movs	r3, #0
 800784e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007850:	4b0f      	ldr	r3, [pc, #60]	@ (8007890 <prvProcessTimerOrBlockTask+0x94>)
 8007852:	6818      	ldr	r0, [r3, #0]
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	1ad3      	subs	r3, r2, r3
 800785a:	683a      	ldr	r2, [r7, #0]
 800785c:	4619      	mov	r1, r3
 800785e:	f7fe ff93 	bl	8006788 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007862:	f7ff fa17 	bl	8006c94 <xTaskResumeAll>
 8007866:	4603      	mov	r3, r0
 8007868:	2b00      	cmp	r3, #0
 800786a:	d10a      	bne.n	8007882 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800786c:	4b09      	ldr	r3, [pc, #36]	@ (8007894 <prvProcessTimerOrBlockTask+0x98>)
 800786e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007872:	601a      	str	r2, [r3, #0]
 8007874:	f3bf 8f4f 	dsb	sy
 8007878:	f3bf 8f6f 	isb	sy
}
 800787c:	e001      	b.n	8007882 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800787e:	f7ff fa09 	bl	8006c94 <xTaskResumeAll>
}
 8007882:	bf00      	nop
 8007884:	3710      	adds	r7, #16
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	20000e18 	.word	0x20000e18
 8007890:	20000e1c 	.word	0x20000e1c
 8007894:	e000ed04 	.word	0xe000ed04

08007898 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007898:	b480      	push	{r7}
 800789a:	b085      	sub	sp, #20
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80078a0:	4b0e      	ldr	r3, [pc, #56]	@ (80078dc <prvGetNextExpireTime+0x44>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d101      	bne.n	80078ae <prvGetNextExpireTime+0x16>
 80078aa:	2201      	movs	r2, #1
 80078ac:	e000      	b.n	80078b0 <prvGetNextExpireTime+0x18>
 80078ae:	2200      	movs	r2, #0
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d105      	bne.n	80078c8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80078bc:	4b07      	ldr	r3, [pc, #28]	@ (80078dc <prvGetNextExpireTime+0x44>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	60fb      	str	r3, [r7, #12]
 80078c6:	e001      	b.n	80078cc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80078c8:	2300      	movs	r3, #0
 80078ca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80078cc:	68fb      	ldr	r3, [r7, #12]
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3714      	adds	r7, #20
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr
 80078da:	bf00      	nop
 80078dc:	20000e14 	.word	0x20000e14

080078e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b084      	sub	sp, #16
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80078e8:	f7ff fa72 	bl	8006dd0 <xTaskGetTickCount>
 80078ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80078ee:	4b0b      	ldr	r3, [pc, #44]	@ (800791c <prvSampleTimeNow+0x3c>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	68fa      	ldr	r2, [r7, #12]
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d205      	bcs.n	8007904 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80078f8:	f000 f93a 	bl	8007b70 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2201      	movs	r2, #1
 8007900:	601a      	str	r2, [r3, #0]
 8007902:	e002      	b.n	800790a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800790a:	4a04      	ldr	r2, [pc, #16]	@ (800791c <prvSampleTimeNow+0x3c>)
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007910:	68fb      	ldr	r3, [r7, #12]
}
 8007912:	4618      	mov	r0, r3
 8007914:	3710      	adds	r7, #16
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
 800791a:	bf00      	nop
 800791c:	20000e24 	.word	0x20000e24

08007920 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b086      	sub	sp, #24
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	607a      	str	r2, [r7, #4]
 800792c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800792e:	2300      	movs	r3, #0
 8007930:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	68ba      	ldr	r2, [r7, #8]
 8007936:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	68fa      	ldr	r2, [r7, #12]
 800793c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800793e:	68ba      	ldr	r2, [r7, #8]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	429a      	cmp	r2, r3
 8007944:	d812      	bhi.n	800796c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	1ad2      	subs	r2, r2, r3
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	699b      	ldr	r3, [r3, #24]
 8007950:	429a      	cmp	r2, r3
 8007952:	d302      	bcc.n	800795a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007954:	2301      	movs	r3, #1
 8007956:	617b      	str	r3, [r7, #20]
 8007958:	e01b      	b.n	8007992 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800795a:	4b10      	ldr	r3, [pc, #64]	@ (800799c <prvInsertTimerInActiveList+0x7c>)
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	3304      	adds	r3, #4
 8007962:	4619      	mov	r1, r3
 8007964:	4610      	mov	r0, r2
 8007966:	f7fe f9aa 	bl	8005cbe <vListInsert>
 800796a:	e012      	b.n	8007992 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	429a      	cmp	r2, r3
 8007972:	d206      	bcs.n	8007982 <prvInsertTimerInActiveList+0x62>
 8007974:	68ba      	ldr	r2, [r7, #8]
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	429a      	cmp	r2, r3
 800797a:	d302      	bcc.n	8007982 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800797c:	2301      	movs	r3, #1
 800797e:	617b      	str	r3, [r7, #20]
 8007980:	e007      	b.n	8007992 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007982:	4b07      	ldr	r3, [pc, #28]	@ (80079a0 <prvInsertTimerInActiveList+0x80>)
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	3304      	adds	r3, #4
 800798a:	4619      	mov	r1, r3
 800798c:	4610      	mov	r0, r2
 800798e:	f7fe f996 	bl	8005cbe <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007992:	697b      	ldr	r3, [r7, #20]
}
 8007994:	4618      	mov	r0, r3
 8007996:	3718      	adds	r7, #24
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}
 800799c:	20000e18 	.word	0x20000e18
 80079a0:	20000e14 	.word	0x20000e14

080079a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b08e      	sub	sp, #56	@ 0x38
 80079a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80079aa:	e0ce      	b.n	8007b4a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	da19      	bge.n	80079e6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80079b2:	1d3b      	adds	r3, r7, #4
 80079b4:	3304      	adds	r3, #4
 80079b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80079b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d10b      	bne.n	80079d6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80079be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079c2:	f383 8811 	msr	BASEPRI, r3
 80079c6:	f3bf 8f6f 	isb	sy
 80079ca:	f3bf 8f4f 	dsb	sy
 80079ce:	61fb      	str	r3, [r7, #28]
}
 80079d0:	bf00      	nop
 80079d2:	bf00      	nop
 80079d4:	e7fd      	b.n	80079d2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80079d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80079dc:	6850      	ldr	r0, [r2, #4]
 80079de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80079e0:	6892      	ldr	r2, [r2, #8]
 80079e2:	4611      	mov	r1, r2
 80079e4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	f2c0 80ae 	blt.w	8007b4a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80079f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079f4:	695b      	ldr	r3, [r3, #20]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d004      	beq.n	8007a04 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80079fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079fc:	3304      	adds	r3, #4
 80079fe:	4618      	mov	r0, r3
 8007a00:	f7fe f996 	bl	8005d30 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a04:	463b      	mov	r3, r7
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7ff ff6a 	bl	80078e0 <prvSampleTimeNow>
 8007a0c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2b09      	cmp	r3, #9
 8007a12:	f200 8097 	bhi.w	8007b44 <prvProcessReceivedCommands+0x1a0>
 8007a16:	a201      	add	r2, pc, #4	@ (adr r2, 8007a1c <prvProcessReceivedCommands+0x78>)
 8007a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a1c:	08007a45 	.word	0x08007a45
 8007a20:	08007a45 	.word	0x08007a45
 8007a24:	08007a45 	.word	0x08007a45
 8007a28:	08007abb 	.word	0x08007abb
 8007a2c:	08007acf 	.word	0x08007acf
 8007a30:	08007b1b 	.word	0x08007b1b
 8007a34:	08007a45 	.word	0x08007a45
 8007a38:	08007a45 	.word	0x08007a45
 8007a3c:	08007abb 	.word	0x08007abb
 8007a40:	08007acf 	.word	0x08007acf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a46:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a4a:	f043 0301 	orr.w	r3, r3, #1
 8007a4e:	b2da      	uxtb	r2, r3
 8007a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007a56:	68ba      	ldr	r2, [r7, #8]
 8007a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a5a:	699b      	ldr	r3, [r3, #24]
 8007a5c:	18d1      	adds	r1, r2, r3
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a64:	f7ff ff5c 	bl	8007920 <prvInsertTimerInActiveList>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d06c      	beq.n	8007b48 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a70:	6a1b      	ldr	r3, [r3, #32]
 8007a72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a74:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a7c:	f003 0304 	and.w	r3, r3, #4
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d061      	beq.n	8007b48 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007a84:	68ba      	ldr	r2, [r7, #8]
 8007a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a88:	699b      	ldr	r3, [r3, #24]
 8007a8a:	441a      	add	r2, r3
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	9300      	str	r3, [sp, #0]
 8007a90:	2300      	movs	r3, #0
 8007a92:	2100      	movs	r1, #0
 8007a94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a96:	f7ff fe01 	bl	800769c <xTimerGenericCommand>
 8007a9a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007a9c:	6a3b      	ldr	r3, [r7, #32]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d152      	bne.n	8007b48 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aa6:	f383 8811 	msr	BASEPRI, r3
 8007aaa:	f3bf 8f6f 	isb	sy
 8007aae:	f3bf 8f4f 	dsb	sy
 8007ab2:	61bb      	str	r3, [r7, #24]
}
 8007ab4:	bf00      	nop
 8007ab6:	bf00      	nop
 8007ab8:	e7fd      	b.n	8007ab6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007abc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ac0:	f023 0301 	bic.w	r3, r3, #1
 8007ac4:	b2da      	uxtb	r2, r3
 8007ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ac8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007acc:	e03d      	b.n	8007b4a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ad0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ad4:	f043 0301 	orr.w	r3, r3, #1
 8007ad8:	b2da      	uxtb	r2, r3
 8007ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007adc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007ae0:	68ba      	ldr	r2, [r7, #8]
 8007ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ae4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ae8:	699b      	ldr	r3, [r3, #24]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d10b      	bne.n	8007b06 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007af2:	f383 8811 	msr	BASEPRI, r3
 8007af6:	f3bf 8f6f 	isb	sy
 8007afa:	f3bf 8f4f 	dsb	sy
 8007afe:	617b      	str	r3, [r7, #20]
}
 8007b00:	bf00      	nop
 8007b02:	bf00      	nop
 8007b04:	e7fd      	b.n	8007b02 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b08:	699a      	ldr	r2, [r3, #24]
 8007b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b0c:	18d1      	adds	r1, r2, r3
 8007b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b14:	f7ff ff04 	bl	8007920 <prvInsertTimerInActiveList>
					break;
 8007b18:	e017      	b.n	8007b4a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b20:	f003 0302 	and.w	r3, r3, #2
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d103      	bne.n	8007b30 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007b28:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b2a:	f000 fbe5 	bl	80082f8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007b2e:	e00c      	b.n	8007b4a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b32:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b36:	f023 0301 	bic.w	r3, r3, #1
 8007b3a:	b2da      	uxtb	r2, r3
 8007b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b3e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007b42:	e002      	b.n	8007b4a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007b44:	bf00      	nop
 8007b46:	e000      	b.n	8007b4a <prvProcessReceivedCommands+0x1a6>
					break;
 8007b48:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007b4a:	4b08      	ldr	r3, [pc, #32]	@ (8007b6c <prvProcessReceivedCommands+0x1c8>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	1d39      	adds	r1, r7, #4
 8007b50:	2200      	movs	r2, #0
 8007b52:	4618      	mov	r0, r3
 8007b54:	f7fe fbfc 	bl	8006350 <xQueueReceive>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	f47f af26 	bne.w	80079ac <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007b60:	bf00      	nop
 8007b62:	bf00      	nop
 8007b64:	3730      	adds	r7, #48	@ 0x30
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
 8007b6a:	bf00      	nop
 8007b6c:	20000e1c 	.word	0x20000e1c

08007b70 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b088      	sub	sp, #32
 8007b74:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007b76:	e049      	b.n	8007c0c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b78:	4b2e      	ldr	r3, [pc, #184]	@ (8007c34 <prvSwitchTimerLists+0xc4>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	68db      	ldr	r3, [r3, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b82:	4b2c      	ldr	r3, [pc, #176]	@ (8007c34 <prvSwitchTimerLists+0xc4>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	68db      	ldr	r3, [r3, #12]
 8007b8a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	3304      	adds	r3, #4
 8007b90:	4618      	mov	r0, r3
 8007b92:	f7fe f8cd 	bl	8005d30 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	6a1b      	ldr	r3, [r3, #32]
 8007b9a:	68f8      	ldr	r0, [r7, #12]
 8007b9c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ba4:	f003 0304 	and.w	r3, r3, #4
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d02f      	beq.n	8007c0c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	699b      	ldr	r3, [r3, #24]
 8007bb0:	693a      	ldr	r2, [r7, #16]
 8007bb2:	4413      	add	r3, r2
 8007bb4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007bb6:	68ba      	ldr	r2, [r7, #8]
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d90e      	bls.n	8007bdc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	68ba      	ldr	r2, [r7, #8]
 8007bc2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	68fa      	ldr	r2, [r7, #12]
 8007bc8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007bca:	4b1a      	ldr	r3, [pc, #104]	@ (8007c34 <prvSwitchTimerLists+0xc4>)
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	3304      	adds	r3, #4
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	4610      	mov	r0, r2
 8007bd6:	f7fe f872 	bl	8005cbe <vListInsert>
 8007bda:	e017      	b.n	8007c0c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007bdc:	2300      	movs	r3, #0
 8007bde:	9300      	str	r3, [sp, #0]
 8007be0:	2300      	movs	r3, #0
 8007be2:	693a      	ldr	r2, [r7, #16]
 8007be4:	2100      	movs	r1, #0
 8007be6:	68f8      	ldr	r0, [r7, #12]
 8007be8:	f7ff fd58 	bl	800769c <xTimerGenericCommand>
 8007bec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d10b      	bne.n	8007c0c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bf8:	f383 8811 	msr	BASEPRI, r3
 8007bfc:	f3bf 8f6f 	isb	sy
 8007c00:	f3bf 8f4f 	dsb	sy
 8007c04:	603b      	str	r3, [r7, #0]
}
 8007c06:	bf00      	nop
 8007c08:	bf00      	nop
 8007c0a:	e7fd      	b.n	8007c08 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007c0c:	4b09      	ldr	r3, [pc, #36]	@ (8007c34 <prvSwitchTimerLists+0xc4>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d1b0      	bne.n	8007b78 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007c16:	4b07      	ldr	r3, [pc, #28]	@ (8007c34 <prvSwitchTimerLists+0xc4>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007c1c:	4b06      	ldr	r3, [pc, #24]	@ (8007c38 <prvSwitchTimerLists+0xc8>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a04      	ldr	r2, [pc, #16]	@ (8007c34 <prvSwitchTimerLists+0xc4>)
 8007c22:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007c24:	4a04      	ldr	r2, [pc, #16]	@ (8007c38 <prvSwitchTimerLists+0xc8>)
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	6013      	str	r3, [r2, #0]
}
 8007c2a:	bf00      	nop
 8007c2c:	3718      	adds	r7, #24
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
 8007c32:	bf00      	nop
 8007c34:	20000e14 	.word	0x20000e14
 8007c38:	20000e18 	.word	0x20000e18

08007c3c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b082      	sub	sp, #8
 8007c40:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007c42:	f000 f969 	bl	8007f18 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007c46:	4b15      	ldr	r3, [pc, #84]	@ (8007c9c <prvCheckForValidListAndQueue+0x60>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d120      	bne.n	8007c90 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007c4e:	4814      	ldr	r0, [pc, #80]	@ (8007ca0 <prvCheckForValidListAndQueue+0x64>)
 8007c50:	f7fd ffe4 	bl	8005c1c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007c54:	4813      	ldr	r0, [pc, #76]	@ (8007ca4 <prvCheckForValidListAndQueue+0x68>)
 8007c56:	f7fd ffe1 	bl	8005c1c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007c5a:	4b13      	ldr	r3, [pc, #76]	@ (8007ca8 <prvCheckForValidListAndQueue+0x6c>)
 8007c5c:	4a10      	ldr	r2, [pc, #64]	@ (8007ca0 <prvCheckForValidListAndQueue+0x64>)
 8007c5e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007c60:	4b12      	ldr	r3, [pc, #72]	@ (8007cac <prvCheckForValidListAndQueue+0x70>)
 8007c62:	4a10      	ldr	r2, [pc, #64]	@ (8007ca4 <prvCheckForValidListAndQueue+0x68>)
 8007c64:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007c66:	2300      	movs	r3, #0
 8007c68:	9300      	str	r3, [sp, #0]
 8007c6a:	4b11      	ldr	r3, [pc, #68]	@ (8007cb0 <prvCheckForValidListAndQueue+0x74>)
 8007c6c:	4a11      	ldr	r2, [pc, #68]	@ (8007cb4 <prvCheckForValidListAndQueue+0x78>)
 8007c6e:	2110      	movs	r1, #16
 8007c70:	200a      	movs	r0, #10
 8007c72:	f7fe f8f1 	bl	8005e58 <xQueueGenericCreateStatic>
 8007c76:	4603      	mov	r3, r0
 8007c78:	4a08      	ldr	r2, [pc, #32]	@ (8007c9c <prvCheckForValidListAndQueue+0x60>)
 8007c7a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007c7c:	4b07      	ldr	r3, [pc, #28]	@ (8007c9c <prvCheckForValidListAndQueue+0x60>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d005      	beq.n	8007c90 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007c84:	4b05      	ldr	r3, [pc, #20]	@ (8007c9c <prvCheckForValidListAndQueue+0x60>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	490b      	ldr	r1, [pc, #44]	@ (8007cb8 <prvCheckForValidListAndQueue+0x7c>)
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7fe fd52 	bl	8006734 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007c90:	f000 f974 	bl	8007f7c <vPortExitCritical>
}
 8007c94:	bf00      	nop
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
 8007c9a:	bf00      	nop
 8007c9c:	20000e1c 	.word	0x20000e1c
 8007ca0:	20000dec 	.word	0x20000dec
 8007ca4:	20000e00 	.word	0x20000e00
 8007ca8:	20000e14 	.word	0x20000e14
 8007cac:	20000e18 	.word	0x20000e18
 8007cb0:	20000ec8 	.word	0x20000ec8
 8007cb4:	20000e28 	.word	0x20000e28
 8007cb8:	080095cc 	.word	0x080095cc

08007cbc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b085      	sub	sp, #20
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	60b9      	str	r1, [r7, #8]
 8007cc6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	3b04      	subs	r3, #4
 8007ccc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007cd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	3b04      	subs	r3, #4
 8007cda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	f023 0201 	bic.w	r2, r3, #1
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	3b04      	subs	r3, #4
 8007cea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007cec:	4a0c      	ldr	r2, [pc, #48]	@ (8007d20 <pxPortInitialiseStack+0x64>)
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	3b14      	subs	r3, #20
 8007cf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	3b04      	subs	r3, #4
 8007d02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f06f 0202 	mvn.w	r2, #2
 8007d0a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	3b20      	subs	r3, #32
 8007d10:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007d12:	68fb      	ldr	r3, [r7, #12]
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3714      	adds	r7, #20
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr
 8007d20:	08007d25 	.word	0x08007d25

08007d24 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007d24:	b480      	push	{r7}
 8007d26:	b085      	sub	sp, #20
 8007d28:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007d2e:	4b13      	ldr	r3, [pc, #76]	@ (8007d7c <prvTaskExitError+0x58>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d36:	d00b      	beq.n	8007d50 <prvTaskExitError+0x2c>
	__asm volatile
 8007d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d3c:	f383 8811 	msr	BASEPRI, r3
 8007d40:	f3bf 8f6f 	isb	sy
 8007d44:	f3bf 8f4f 	dsb	sy
 8007d48:	60fb      	str	r3, [r7, #12]
}
 8007d4a:	bf00      	nop
 8007d4c:	bf00      	nop
 8007d4e:	e7fd      	b.n	8007d4c <prvTaskExitError+0x28>
	__asm volatile
 8007d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d54:	f383 8811 	msr	BASEPRI, r3
 8007d58:	f3bf 8f6f 	isb	sy
 8007d5c:	f3bf 8f4f 	dsb	sy
 8007d60:	60bb      	str	r3, [r7, #8]
}
 8007d62:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007d64:	bf00      	nop
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d0fc      	beq.n	8007d66 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007d6c:	bf00      	nop
 8007d6e:	bf00      	nop
 8007d70:	3714      	adds	r7, #20
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr
 8007d7a:	bf00      	nop
 8007d7c:	20000018 	.word	0x20000018

08007d80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007d80:	4b07      	ldr	r3, [pc, #28]	@ (8007da0 <pxCurrentTCBConst2>)
 8007d82:	6819      	ldr	r1, [r3, #0]
 8007d84:	6808      	ldr	r0, [r1, #0]
 8007d86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d8a:	f380 8809 	msr	PSP, r0
 8007d8e:	f3bf 8f6f 	isb	sy
 8007d92:	f04f 0000 	mov.w	r0, #0
 8007d96:	f380 8811 	msr	BASEPRI, r0
 8007d9a:	4770      	bx	lr
 8007d9c:	f3af 8000 	nop.w

08007da0 <pxCurrentTCBConst2>:
 8007da0:	200008ec 	.word	0x200008ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007da4:	bf00      	nop
 8007da6:	bf00      	nop

08007da8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007da8:	4808      	ldr	r0, [pc, #32]	@ (8007dcc <prvPortStartFirstTask+0x24>)
 8007daa:	6800      	ldr	r0, [r0, #0]
 8007dac:	6800      	ldr	r0, [r0, #0]
 8007dae:	f380 8808 	msr	MSP, r0
 8007db2:	f04f 0000 	mov.w	r0, #0
 8007db6:	f380 8814 	msr	CONTROL, r0
 8007dba:	b662      	cpsie	i
 8007dbc:	b661      	cpsie	f
 8007dbe:	f3bf 8f4f 	dsb	sy
 8007dc2:	f3bf 8f6f 	isb	sy
 8007dc6:	df00      	svc	0
 8007dc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007dca:	bf00      	nop
 8007dcc:	e000ed08 	.word	0xe000ed08

08007dd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b086      	sub	sp, #24
 8007dd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007dd6:	4b47      	ldr	r3, [pc, #284]	@ (8007ef4 <xPortStartScheduler+0x124>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a47      	ldr	r2, [pc, #284]	@ (8007ef8 <xPortStartScheduler+0x128>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d10b      	bne.n	8007df8 <xPortStartScheduler+0x28>
	__asm volatile
 8007de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007de4:	f383 8811 	msr	BASEPRI, r3
 8007de8:	f3bf 8f6f 	isb	sy
 8007dec:	f3bf 8f4f 	dsb	sy
 8007df0:	613b      	str	r3, [r7, #16]
}
 8007df2:	bf00      	nop
 8007df4:	bf00      	nop
 8007df6:	e7fd      	b.n	8007df4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007df8:	4b3e      	ldr	r3, [pc, #248]	@ (8007ef4 <xPortStartScheduler+0x124>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a3f      	ldr	r2, [pc, #252]	@ (8007efc <xPortStartScheduler+0x12c>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d10b      	bne.n	8007e1a <xPortStartScheduler+0x4a>
	__asm volatile
 8007e02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e06:	f383 8811 	msr	BASEPRI, r3
 8007e0a:	f3bf 8f6f 	isb	sy
 8007e0e:	f3bf 8f4f 	dsb	sy
 8007e12:	60fb      	str	r3, [r7, #12]
}
 8007e14:	bf00      	nop
 8007e16:	bf00      	nop
 8007e18:	e7fd      	b.n	8007e16 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007e1a:	4b39      	ldr	r3, [pc, #228]	@ (8007f00 <xPortStartScheduler+0x130>)
 8007e1c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	22ff      	movs	r2, #255	@ 0xff
 8007e2a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007e34:	78fb      	ldrb	r3, [r7, #3]
 8007e36:	b2db      	uxtb	r3, r3
 8007e38:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007e3c:	b2da      	uxtb	r2, r3
 8007e3e:	4b31      	ldr	r3, [pc, #196]	@ (8007f04 <xPortStartScheduler+0x134>)
 8007e40:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007e42:	4b31      	ldr	r3, [pc, #196]	@ (8007f08 <xPortStartScheduler+0x138>)
 8007e44:	2207      	movs	r2, #7
 8007e46:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e48:	e009      	b.n	8007e5e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007e4a:	4b2f      	ldr	r3, [pc, #188]	@ (8007f08 <xPortStartScheduler+0x138>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	3b01      	subs	r3, #1
 8007e50:	4a2d      	ldr	r2, [pc, #180]	@ (8007f08 <xPortStartScheduler+0x138>)
 8007e52:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007e54:	78fb      	ldrb	r3, [r7, #3]
 8007e56:	b2db      	uxtb	r3, r3
 8007e58:	005b      	lsls	r3, r3, #1
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e5e:	78fb      	ldrb	r3, [r7, #3]
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e66:	2b80      	cmp	r3, #128	@ 0x80
 8007e68:	d0ef      	beq.n	8007e4a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007e6a:	4b27      	ldr	r3, [pc, #156]	@ (8007f08 <xPortStartScheduler+0x138>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f1c3 0307 	rsb	r3, r3, #7
 8007e72:	2b04      	cmp	r3, #4
 8007e74:	d00b      	beq.n	8007e8e <xPortStartScheduler+0xbe>
	__asm volatile
 8007e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e7a:	f383 8811 	msr	BASEPRI, r3
 8007e7e:	f3bf 8f6f 	isb	sy
 8007e82:	f3bf 8f4f 	dsb	sy
 8007e86:	60bb      	str	r3, [r7, #8]
}
 8007e88:	bf00      	nop
 8007e8a:	bf00      	nop
 8007e8c:	e7fd      	b.n	8007e8a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007e8e:	4b1e      	ldr	r3, [pc, #120]	@ (8007f08 <xPortStartScheduler+0x138>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	021b      	lsls	r3, r3, #8
 8007e94:	4a1c      	ldr	r2, [pc, #112]	@ (8007f08 <xPortStartScheduler+0x138>)
 8007e96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007e98:	4b1b      	ldr	r3, [pc, #108]	@ (8007f08 <xPortStartScheduler+0x138>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007ea0:	4a19      	ldr	r2, [pc, #100]	@ (8007f08 <xPortStartScheduler+0x138>)
 8007ea2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	b2da      	uxtb	r2, r3
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007eac:	4b17      	ldr	r3, [pc, #92]	@ (8007f0c <xPortStartScheduler+0x13c>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a16      	ldr	r2, [pc, #88]	@ (8007f0c <xPortStartScheduler+0x13c>)
 8007eb2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007eb6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007eb8:	4b14      	ldr	r3, [pc, #80]	@ (8007f0c <xPortStartScheduler+0x13c>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a13      	ldr	r2, [pc, #76]	@ (8007f0c <xPortStartScheduler+0x13c>)
 8007ebe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007ec2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007ec4:	f000 f8da 	bl	800807c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007ec8:	4b11      	ldr	r3, [pc, #68]	@ (8007f10 <xPortStartScheduler+0x140>)
 8007eca:	2200      	movs	r2, #0
 8007ecc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007ece:	f000 f8f9 	bl	80080c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007ed2:	4b10      	ldr	r3, [pc, #64]	@ (8007f14 <xPortStartScheduler+0x144>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a0f      	ldr	r2, [pc, #60]	@ (8007f14 <xPortStartScheduler+0x144>)
 8007ed8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007edc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007ede:	f7ff ff63 	bl	8007da8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007ee2:	f7ff f83f 	bl	8006f64 <vTaskSwitchContext>
	prvTaskExitError();
 8007ee6:	f7ff ff1d 	bl	8007d24 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007eea:	2300      	movs	r3, #0
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3718      	adds	r7, #24
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}
 8007ef4:	e000ed00 	.word	0xe000ed00
 8007ef8:	410fc271 	.word	0x410fc271
 8007efc:	410fc270 	.word	0x410fc270
 8007f00:	e000e400 	.word	0xe000e400
 8007f04:	20000f18 	.word	0x20000f18
 8007f08:	20000f1c 	.word	0x20000f1c
 8007f0c:	e000ed20 	.word	0xe000ed20
 8007f10:	20000018 	.word	0x20000018
 8007f14:	e000ef34 	.word	0xe000ef34

08007f18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
	__asm volatile
 8007f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f22:	f383 8811 	msr	BASEPRI, r3
 8007f26:	f3bf 8f6f 	isb	sy
 8007f2a:	f3bf 8f4f 	dsb	sy
 8007f2e:	607b      	str	r3, [r7, #4]
}
 8007f30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007f32:	4b10      	ldr	r3, [pc, #64]	@ (8007f74 <vPortEnterCritical+0x5c>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	3301      	adds	r3, #1
 8007f38:	4a0e      	ldr	r2, [pc, #56]	@ (8007f74 <vPortEnterCritical+0x5c>)
 8007f3a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007f3c:	4b0d      	ldr	r3, [pc, #52]	@ (8007f74 <vPortEnterCritical+0x5c>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d110      	bne.n	8007f66 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007f44:	4b0c      	ldr	r3, [pc, #48]	@ (8007f78 <vPortEnterCritical+0x60>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d00b      	beq.n	8007f66 <vPortEnterCritical+0x4e>
	__asm volatile
 8007f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f52:	f383 8811 	msr	BASEPRI, r3
 8007f56:	f3bf 8f6f 	isb	sy
 8007f5a:	f3bf 8f4f 	dsb	sy
 8007f5e:	603b      	str	r3, [r7, #0]
}
 8007f60:	bf00      	nop
 8007f62:	bf00      	nop
 8007f64:	e7fd      	b.n	8007f62 <vPortEnterCritical+0x4a>
	}
}
 8007f66:	bf00      	nop
 8007f68:	370c      	adds	r7, #12
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr
 8007f72:	bf00      	nop
 8007f74:	20000018 	.word	0x20000018
 8007f78:	e000ed04 	.word	0xe000ed04

08007f7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007f82:	4b12      	ldr	r3, [pc, #72]	@ (8007fcc <vPortExitCritical+0x50>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d10b      	bne.n	8007fa2 <vPortExitCritical+0x26>
	__asm volatile
 8007f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f8e:	f383 8811 	msr	BASEPRI, r3
 8007f92:	f3bf 8f6f 	isb	sy
 8007f96:	f3bf 8f4f 	dsb	sy
 8007f9a:	607b      	str	r3, [r7, #4]
}
 8007f9c:	bf00      	nop
 8007f9e:	bf00      	nop
 8007fa0:	e7fd      	b.n	8007f9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8007fcc <vPortExitCritical+0x50>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	3b01      	subs	r3, #1
 8007fa8:	4a08      	ldr	r2, [pc, #32]	@ (8007fcc <vPortExitCritical+0x50>)
 8007faa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007fac:	4b07      	ldr	r3, [pc, #28]	@ (8007fcc <vPortExitCritical+0x50>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d105      	bne.n	8007fc0 <vPortExitCritical+0x44>
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	f383 8811 	msr	BASEPRI, r3
}
 8007fbe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007fc0:	bf00      	nop
 8007fc2:	370c      	adds	r7, #12
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr
 8007fcc:	20000018 	.word	0x20000018

08007fd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007fd0:	f3ef 8009 	mrs	r0, PSP
 8007fd4:	f3bf 8f6f 	isb	sy
 8007fd8:	4b15      	ldr	r3, [pc, #84]	@ (8008030 <pxCurrentTCBConst>)
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	f01e 0f10 	tst.w	lr, #16
 8007fe0:	bf08      	it	eq
 8007fe2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007fe6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fea:	6010      	str	r0, [r2, #0]
 8007fec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007ff0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007ff4:	f380 8811 	msr	BASEPRI, r0
 8007ff8:	f3bf 8f4f 	dsb	sy
 8007ffc:	f3bf 8f6f 	isb	sy
 8008000:	f7fe ffb0 	bl	8006f64 <vTaskSwitchContext>
 8008004:	f04f 0000 	mov.w	r0, #0
 8008008:	f380 8811 	msr	BASEPRI, r0
 800800c:	bc09      	pop	{r0, r3}
 800800e:	6819      	ldr	r1, [r3, #0]
 8008010:	6808      	ldr	r0, [r1, #0]
 8008012:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008016:	f01e 0f10 	tst.w	lr, #16
 800801a:	bf08      	it	eq
 800801c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008020:	f380 8809 	msr	PSP, r0
 8008024:	f3bf 8f6f 	isb	sy
 8008028:	4770      	bx	lr
 800802a:	bf00      	nop
 800802c:	f3af 8000 	nop.w

08008030 <pxCurrentTCBConst>:
 8008030:	200008ec 	.word	0x200008ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008034:	bf00      	nop
 8008036:	bf00      	nop

08008038 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b082      	sub	sp, #8
 800803c:	af00      	add	r7, sp, #0
	__asm volatile
 800803e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008042:	f383 8811 	msr	BASEPRI, r3
 8008046:	f3bf 8f6f 	isb	sy
 800804a:	f3bf 8f4f 	dsb	sy
 800804e:	607b      	str	r3, [r7, #4]
}
 8008050:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008052:	f7fe fecd 	bl	8006df0 <xTaskIncrementTick>
 8008056:	4603      	mov	r3, r0
 8008058:	2b00      	cmp	r3, #0
 800805a:	d003      	beq.n	8008064 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800805c:	4b06      	ldr	r3, [pc, #24]	@ (8008078 <xPortSysTickHandler+0x40>)
 800805e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008062:	601a      	str	r2, [r3, #0]
 8008064:	2300      	movs	r3, #0
 8008066:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	f383 8811 	msr	BASEPRI, r3
}
 800806e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008070:	bf00      	nop
 8008072:	3708      	adds	r7, #8
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}
 8008078:	e000ed04 	.word	0xe000ed04

0800807c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800807c:	b480      	push	{r7}
 800807e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008080:	4b0b      	ldr	r3, [pc, #44]	@ (80080b0 <vPortSetupTimerInterrupt+0x34>)
 8008082:	2200      	movs	r2, #0
 8008084:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008086:	4b0b      	ldr	r3, [pc, #44]	@ (80080b4 <vPortSetupTimerInterrupt+0x38>)
 8008088:	2200      	movs	r2, #0
 800808a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800808c:	4b0a      	ldr	r3, [pc, #40]	@ (80080b8 <vPortSetupTimerInterrupt+0x3c>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a0a      	ldr	r2, [pc, #40]	@ (80080bc <vPortSetupTimerInterrupt+0x40>)
 8008092:	fba2 2303 	umull	r2, r3, r2, r3
 8008096:	099b      	lsrs	r3, r3, #6
 8008098:	4a09      	ldr	r2, [pc, #36]	@ (80080c0 <vPortSetupTimerInterrupt+0x44>)
 800809a:	3b01      	subs	r3, #1
 800809c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800809e:	4b04      	ldr	r3, [pc, #16]	@ (80080b0 <vPortSetupTimerInterrupt+0x34>)
 80080a0:	2207      	movs	r2, #7
 80080a2:	601a      	str	r2, [r3, #0]
}
 80080a4:	bf00      	nop
 80080a6:	46bd      	mov	sp, r7
 80080a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ac:	4770      	bx	lr
 80080ae:	bf00      	nop
 80080b0:	e000e010 	.word	0xe000e010
 80080b4:	e000e018 	.word	0xe000e018
 80080b8:	2000000c 	.word	0x2000000c
 80080bc:	10624dd3 	.word	0x10624dd3
 80080c0:	e000e014 	.word	0xe000e014

080080c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80080c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80080d4 <vPortEnableVFP+0x10>
 80080c8:	6801      	ldr	r1, [r0, #0]
 80080ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80080ce:	6001      	str	r1, [r0, #0]
 80080d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80080d2:	bf00      	nop
 80080d4:	e000ed88 	.word	0xe000ed88

080080d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80080d8:	b480      	push	{r7}
 80080da:	b085      	sub	sp, #20
 80080dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80080de:	f3ef 8305 	mrs	r3, IPSR
 80080e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2b0f      	cmp	r3, #15
 80080e8:	d915      	bls.n	8008116 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80080ea:	4a18      	ldr	r2, [pc, #96]	@ (800814c <vPortValidateInterruptPriority+0x74>)
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	4413      	add	r3, r2
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80080f4:	4b16      	ldr	r3, [pc, #88]	@ (8008150 <vPortValidateInterruptPriority+0x78>)
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	7afa      	ldrb	r2, [r7, #11]
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d20b      	bcs.n	8008116 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80080fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008102:	f383 8811 	msr	BASEPRI, r3
 8008106:	f3bf 8f6f 	isb	sy
 800810a:	f3bf 8f4f 	dsb	sy
 800810e:	607b      	str	r3, [r7, #4]
}
 8008110:	bf00      	nop
 8008112:	bf00      	nop
 8008114:	e7fd      	b.n	8008112 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008116:	4b0f      	ldr	r3, [pc, #60]	@ (8008154 <vPortValidateInterruptPriority+0x7c>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800811e:	4b0e      	ldr	r3, [pc, #56]	@ (8008158 <vPortValidateInterruptPriority+0x80>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	429a      	cmp	r2, r3
 8008124:	d90b      	bls.n	800813e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800812a:	f383 8811 	msr	BASEPRI, r3
 800812e:	f3bf 8f6f 	isb	sy
 8008132:	f3bf 8f4f 	dsb	sy
 8008136:	603b      	str	r3, [r7, #0]
}
 8008138:	bf00      	nop
 800813a:	bf00      	nop
 800813c:	e7fd      	b.n	800813a <vPortValidateInterruptPriority+0x62>
	}
 800813e:	bf00      	nop
 8008140:	3714      	adds	r7, #20
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr
 800814a:	bf00      	nop
 800814c:	e000e3f0 	.word	0xe000e3f0
 8008150:	20000f18 	.word	0x20000f18
 8008154:	e000ed0c 	.word	0xe000ed0c
 8008158:	20000f1c 	.word	0x20000f1c

0800815c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b08a      	sub	sp, #40	@ 0x28
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008164:	2300      	movs	r3, #0
 8008166:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008168:	f7fe fd86 	bl	8006c78 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800816c:	4b5c      	ldr	r3, [pc, #368]	@ (80082e0 <pvPortMalloc+0x184>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d101      	bne.n	8008178 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008174:	f000 f924 	bl	80083c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008178:	4b5a      	ldr	r3, [pc, #360]	@ (80082e4 <pvPortMalloc+0x188>)
 800817a:	681a      	ldr	r2, [r3, #0]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	4013      	ands	r3, r2
 8008180:	2b00      	cmp	r3, #0
 8008182:	f040 8095 	bne.w	80082b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d01e      	beq.n	80081ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800818c:	2208      	movs	r2, #8
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	4413      	add	r3, r2
 8008192:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f003 0307 	and.w	r3, r3, #7
 800819a:	2b00      	cmp	r3, #0
 800819c:	d015      	beq.n	80081ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f023 0307 	bic.w	r3, r3, #7
 80081a4:	3308      	adds	r3, #8
 80081a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f003 0307 	and.w	r3, r3, #7
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d00b      	beq.n	80081ca <pvPortMalloc+0x6e>
	__asm volatile
 80081b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081b6:	f383 8811 	msr	BASEPRI, r3
 80081ba:	f3bf 8f6f 	isb	sy
 80081be:	f3bf 8f4f 	dsb	sy
 80081c2:	617b      	str	r3, [r7, #20]
}
 80081c4:	bf00      	nop
 80081c6:	bf00      	nop
 80081c8:	e7fd      	b.n	80081c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d06f      	beq.n	80082b0 <pvPortMalloc+0x154>
 80081d0:	4b45      	ldr	r3, [pc, #276]	@ (80082e8 <pvPortMalloc+0x18c>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d86a      	bhi.n	80082b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80081da:	4b44      	ldr	r3, [pc, #272]	@ (80082ec <pvPortMalloc+0x190>)
 80081dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80081de:	4b43      	ldr	r3, [pc, #268]	@ (80082ec <pvPortMalloc+0x190>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80081e4:	e004      	b.n	80081f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80081e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80081ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80081f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	429a      	cmp	r2, r3
 80081f8:	d903      	bls.n	8008202 <pvPortMalloc+0xa6>
 80081fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d1f1      	bne.n	80081e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008202:	4b37      	ldr	r3, [pc, #220]	@ (80082e0 <pvPortMalloc+0x184>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008208:	429a      	cmp	r2, r3
 800820a:	d051      	beq.n	80082b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800820c:	6a3b      	ldr	r3, [r7, #32]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	2208      	movs	r2, #8
 8008212:	4413      	add	r3, r2
 8008214:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008218:	681a      	ldr	r2, [r3, #0]
 800821a:	6a3b      	ldr	r3, [r7, #32]
 800821c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800821e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008220:	685a      	ldr	r2, [r3, #4]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	1ad2      	subs	r2, r2, r3
 8008226:	2308      	movs	r3, #8
 8008228:	005b      	lsls	r3, r3, #1
 800822a:	429a      	cmp	r2, r3
 800822c:	d920      	bls.n	8008270 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800822e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	4413      	add	r3, r2
 8008234:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008236:	69bb      	ldr	r3, [r7, #24]
 8008238:	f003 0307 	and.w	r3, r3, #7
 800823c:	2b00      	cmp	r3, #0
 800823e:	d00b      	beq.n	8008258 <pvPortMalloc+0xfc>
	__asm volatile
 8008240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008244:	f383 8811 	msr	BASEPRI, r3
 8008248:	f3bf 8f6f 	isb	sy
 800824c:	f3bf 8f4f 	dsb	sy
 8008250:	613b      	str	r3, [r7, #16]
}
 8008252:	bf00      	nop
 8008254:	bf00      	nop
 8008256:	e7fd      	b.n	8008254 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800825a:	685a      	ldr	r2, [r3, #4]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	1ad2      	subs	r2, r2, r3
 8008260:	69bb      	ldr	r3, [r7, #24]
 8008262:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008266:	687a      	ldr	r2, [r7, #4]
 8008268:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800826a:	69b8      	ldr	r0, [r7, #24]
 800826c:	f000 f90a 	bl	8008484 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008270:	4b1d      	ldr	r3, [pc, #116]	@ (80082e8 <pvPortMalloc+0x18c>)
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	1ad3      	subs	r3, r2, r3
 800827a:	4a1b      	ldr	r2, [pc, #108]	@ (80082e8 <pvPortMalloc+0x18c>)
 800827c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800827e:	4b1a      	ldr	r3, [pc, #104]	@ (80082e8 <pvPortMalloc+0x18c>)
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	4b1b      	ldr	r3, [pc, #108]	@ (80082f0 <pvPortMalloc+0x194>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	429a      	cmp	r2, r3
 8008288:	d203      	bcs.n	8008292 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800828a:	4b17      	ldr	r3, [pc, #92]	@ (80082e8 <pvPortMalloc+0x18c>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a18      	ldr	r2, [pc, #96]	@ (80082f0 <pvPortMalloc+0x194>)
 8008290:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008294:	685a      	ldr	r2, [r3, #4]
 8008296:	4b13      	ldr	r3, [pc, #76]	@ (80082e4 <pvPortMalloc+0x188>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	431a      	orrs	r2, r3
 800829c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800829e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80082a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082a2:	2200      	movs	r2, #0
 80082a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80082a6:	4b13      	ldr	r3, [pc, #76]	@ (80082f4 <pvPortMalloc+0x198>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	3301      	adds	r3, #1
 80082ac:	4a11      	ldr	r2, [pc, #68]	@ (80082f4 <pvPortMalloc+0x198>)
 80082ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80082b0:	f7fe fcf0 	bl	8006c94 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80082b4:	69fb      	ldr	r3, [r7, #28]
 80082b6:	f003 0307 	and.w	r3, r3, #7
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d00b      	beq.n	80082d6 <pvPortMalloc+0x17a>
	__asm volatile
 80082be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082c2:	f383 8811 	msr	BASEPRI, r3
 80082c6:	f3bf 8f6f 	isb	sy
 80082ca:	f3bf 8f4f 	dsb	sy
 80082ce:	60fb      	str	r3, [r7, #12]
}
 80082d0:	bf00      	nop
 80082d2:	bf00      	nop
 80082d4:	e7fd      	b.n	80082d2 <pvPortMalloc+0x176>
	return pvReturn;
 80082d6:	69fb      	ldr	r3, [r7, #28]
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3728      	adds	r7, #40	@ 0x28
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}
 80082e0:	20004b28 	.word	0x20004b28
 80082e4:	20004b3c 	.word	0x20004b3c
 80082e8:	20004b2c 	.word	0x20004b2c
 80082ec:	20004b20 	.word	0x20004b20
 80082f0:	20004b30 	.word	0x20004b30
 80082f4:	20004b34 	.word	0x20004b34

080082f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b086      	sub	sp, #24
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d04f      	beq.n	80083aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800830a:	2308      	movs	r3, #8
 800830c:	425b      	negs	r3, r3
 800830e:	697a      	ldr	r2, [r7, #20]
 8008310:	4413      	add	r3, r2
 8008312:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	685a      	ldr	r2, [r3, #4]
 800831c:	4b25      	ldr	r3, [pc, #148]	@ (80083b4 <vPortFree+0xbc>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4013      	ands	r3, r2
 8008322:	2b00      	cmp	r3, #0
 8008324:	d10b      	bne.n	800833e <vPortFree+0x46>
	__asm volatile
 8008326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800832a:	f383 8811 	msr	BASEPRI, r3
 800832e:	f3bf 8f6f 	isb	sy
 8008332:	f3bf 8f4f 	dsb	sy
 8008336:	60fb      	str	r3, [r7, #12]
}
 8008338:	bf00      	nop
 800833a:	bf00      	nop
 800833c:	e7fd      	b.n	800833a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d00b      	beq.n	800835e <vPortFree+0x66>
	__asm volatile
 8008346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800834a:	f383 8811 	msr	BASEPRI, r3
 800834e:	f3bf 8f6f 	isb	sy
 8008352:	f3bf 8f4f 	dsb	sy
 8008356:	60bb      	str	r3, [r7, #8]
}
 8008358:	bf00      	nop
 800835a:	bf00      	nop
 800835c:	e7fd      	b.n	800835a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	685a      	ldr	r2, [r3, #4]
 8008362:	4b14      	ldr	r3, [pc, #80]	@ (80083b4 <vPortFree+0xbc>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4013      	ands	r3, r2
 8008368:	2b00      	cmp	r3, #0
 800836a:	d01e      	beq.n	80083aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d11a      	bne.n	80083aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	685a      	ldr	r2, [r3, #4]
 8008378:	4b0e      	ldr	r3, [pc, #56]	@ (80083b4 <vPortFree+0xbc>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	43db      	mvns	r3, r3
 800837e:	401a      	ands	r2, r3
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008384:	f7fe fc78 	bl	8006c78 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	685a      	ldr	r2, [r3, #4]
 800838c:	4b0a      	ldr	r3, [pc, #40]	@ (80083b8 <vPortFree+0xc0>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4413      	add	r3, r2
 8008392:	4a09      	ldr	r2, [pc, #36]	@ (80083b8 <vPortFree+0xc0>)
 8008394:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008396:	6938      	ldr	r0, [r7, #16]
 8008398:	f000 f874 	bl	8008484 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800839c:	4b07      	ldr	r3, [pc, #28]	@ (80083bc <vPortFree+0xc4>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	3301      	adds	r3, #1
 80083a2:	4a06      	ldr	r2, [pc, #24]	@ (80083bc <vPortFree+0xc4>)
 80083a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80083a6:	f7fe fc75 	bl	8006c94 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80083aa:	bf00      	nop
 80083ac:	3718      	adds	r7, #24
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}
 80083b2:	bf00      	nop
 80083b4:	20004b3c 	.word	0x20004b3c
 80083b8:	20004b2c 	.word	0x20004b2c
 80083bc:	20004b38 	.word	0x20004b38

080083c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80083c0:	b480      	push	{r7}
 80083c2:	b085      	sub	sp, #20
 80083c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80083c6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80083ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80083cc:	4b27      	ldr	r3, [pc, #156]	@ (800846c <prvHeapInit+0xac>)
 80083ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f003 0307 	and.w	r3, r3, #7
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d00c      	beq.n	80083f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	3307      	adds	r3, #7
 80083de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f023 0307 	bic.w	r3, r3, #7
 80083e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80083e8:	68ba      	ldr	r2, [r7, #8]
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	1ad3      	subs	r3, r2, r3
 80083ee:	4a1f      	ldr	r2, [pc, #124]	@ (800846c <prvHeapInit+0xac>)
 80083f0:	4413      	add	r3, r2
 80083f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80083f8:	4a1d      	ldr	r2, [pc, #116]	@ (8008470 <prvHeapInit+0xb0>)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80083fe:	4b1c      	ldr	r3, [pc, #112]	@ (8008470 <prvHeapInit+0xb0>)
 8008400:	2200      	movs	r2, #0
 8008402:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	68ba      	ldr	r2, [r7, #8]
 8008408:	4413      	add	r3, r2
 800840a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800840c:	2208      	movs	r2, #8
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	1a9b      	subs	r3, r3, r2
 8008412:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f023 0307 	bic.w	r3, r3, #7
 800841a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	4a15      	ldr	r2, [pc, #84]	@ (8008474 <prvHeapInit+0xb4>)
 8008420:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008422:	4b14      	ldr	r3, [pc, #80]	@ (8008474 <prvHeapInit+0xb4>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	2200      	movs	r2, #0
 8008428:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800842a:	4b12      	ldr	r3, [pc, #72]	@ (8008474 <prvHeapInit+0xb4>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	2200      	movs	r2, #0
 8008430:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	68fa      	ldr	r2, [r7, #12]
 800843a:	1ad2      	subs	r2, r2, r3
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008440:	4b0c      	ldr	r3, [pc, #48]	@ (8008474 <prvHeapInit+0xb4>)
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	4a0a      	ldr	r2, [pc, #40]	@ (8008478 <prvHeapInit+0xb8>)
 800844e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	4a09      	ldr	r2, [pc, #36]	@ (800847c <prvHeapInit+0xbc>)
 8008456:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008458:	4b09      	ldr	r3, [pc, #36]	@ (8008480 <prvHeapInit+0xc0>)
 800845a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800845e:	601a      	str	r2, [r3, #0]
}
 8008460:	bf00      	nop
 8008462:	3714      	adds	r7, #20
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr
 800846c:	20000f20 	.word	0x20000f20
 8008470:	20004b20 	.word	0x20004b20
 8008474:	20004b28 	.word	0x20004b28
 8008478:	20004b30 	.word	0x20004b30
 800847c:	20004b2c 	.word	0x20004b2c
 8008480:	20004b3c 	.word	0x20004b3c

08008484 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008484:	b480      	push	{r7}
 8008486:	b085      	sub	sp, #20
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800848c:	4b28      	ldr	r3, [pc, #160]	@ (8008530 <prvInsertBlockIntoFreeList+0xac>)
 800848e:	60fb      	str	r3, [r7, #12]
 8008490:	e002      	b.n	8008498 <prvInsertBlockIntoFreeList+0x14>
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	60fb      	str	r3, [r7, #12]
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	687a      	ldr	r2, [r7, #4]
 800849e:	429a      	cmp	r2, r3
 80084a0:	d8f7      	bhi.n	8008492 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	68ba      	ldr	r2, [r7, #8]
 80084ac:	4413      	add	r3, r2
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d108      	bne.n	80084c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	685a      	ldr	r2, [r3, #4]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	441a      	add	r2, r3
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	68ba      	ldr	r2, [r7, #8]
 80084d0:	441a      	add	r2, r3
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	429a      	cmp	r2, r3
 80084d8:	d118      	bne.n	800850c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681a      	ldr	r2, [r3, #0]
 80084de:	4b15      	ldr	r3, [pc, #84]	@ (8008534 <prvInsertBlockIntoFreeList+0xb0>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d00d      	beq.n	8008502 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	685a      	ldr	r2, [r3, #4]
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	441a      	add	r2, r3
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	681a      	ldr	r2, [r3, #0]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	601a      	str	r2, [r3, #0]
 8008500:	e008      	b.n	8008514 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008502:	4b0c      	ldr	r3, [pc, #48]	@ (8008534 <prvInsertBlockIntoFreeList+0xb0>)
 8008504:	681a      	ldr	r2, [r3, #0]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	601a      	str	r2, [r3, #0]
 800850a:	e003      	b.n	8008514 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008514:	68fa      	ldr	r2, [r7, #12]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	429a      	cmp	r2, r3
 800851a:	d002      	beq.n	8008522 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008522:	bf00      	nop
 8008524:	3714      	adds	r7, #20
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr
 800852e:	bf00      	nop
 8008530:	20004b20 	.word	0x20004b20
 8008534:	20004b28 	.word	0x20004b28

08008538 <roundf>:
 8008538:	ee10 0a10 	vmov	r0, s0
 800853c:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8008540:	3a7f      	subs	r2, #127	@ 0x7f
 8008542:	2a16      	cmp	r2, #22
 8008544:	dc15      	bgt.n	8008572 <roundf+0x3a>
 8008546:	2a00      	cmp	r2, #0
 8008548:	da08      	bge.n	800855c <roundf+0x24>
 800854a:	3201      	adds	r2, #1
 800854c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8008550:	d101      	bne.n	8008556 <roundf+0x1e>
 8008552:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 8008556:	ee00 3a10 	vmov	s0, r3
 800855a:	4770      	bx	lr
 800855c:	4907      	ldr	r1, [pc, #28]	@ (800857c <roundf+0x44>)
 800855e:	4111      	asrs	r1, r2
 8008560:	4201      	tst	r1, r0
 8008562:	d0fa      	beq.n	800855a <roundf+0x22>
 8008564:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8008568:	4113      	asrs	r3, r2
 800856a:	4403      	add	r3, r0
 800856c:	ea23 0301 	bic.w	r3, r3, r1
 8008570:	e7f1      	b.n	8008556 <roundf+0x1e>
 8008572:	2a80      	cmp	r2, #128	@ 0x80
 8008574:	d1f1      	bne.n	800855a <roundf+0x22>
 8008576:	ee30 0a00 	vadd.f32	s0, s0, s0
 800857a:	4770      	bx	lr
 800857c:	007fffff 	.word	0x007fffff

08008580 <__assert_func>:
 8008580:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008582:	4614      	mov	r4, r2
 8008584:	461a      	mov	r2, r3
 8008586:	4b09      	ldr	r3, [pc, #36]	@ (80085ac <__assert_func+0x2c>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4605      	mov	r5, r0
 800858c:	68d8      	ldr	r0, [r3, #12]
 800858e:	b954      	cbnz	r4, 80085a6 <__assert_func+0x26>
 8008590:	4b07      	ldr	r3, [pc, #28]	@ (80085b0 <__assert_func+0x30>)
 8008592:	461c      	mov	r4, r3
 8008594:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008598:	9100      	str	r1, [sp, #0]
 800859a:	462b      	mov	r3, r5
 800859c:	4905      	ldr	r1, [pc, #20]	@ (80085b4 <__assert_func+0x34>)
 800859e:	f000 f8b1 	bl	8008704 <fiprintf>
 80085a2:	f000 f9ac 	bl	80088fe <abort>
 80085a6:	4b04      	ldr	r3, [pc, #16]	@ (80085b8 <__assert_func+0x38>)
 80085a8:	e7f4      	b.n	8008594 <__assert_func+0x14>
 80085aa:	bf00      	nop
 80085ac:	20000028 	.word	0x20000028
 80085b0:	080096db 	.word	0x080096db
 80085b4:	080096ad 	.word	0x080096ad
 80085b8:	080096a0 	.word	0x080096a0

080085bc <std>:
 80085bc:	2300      	movs	r3, #0
 80085be:	b510      	push	{r4, lr}
 80085c0:	4604      	mov	r4, r0
 80085c2:	e9c0 3300 	strd	r3, r3, [r0]
 80085c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80085ca:	6083      	str	r3, [r0, #8]
 80085cc:	8181      	strh	r1, [r0, #12]
 80085ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80085d0:	81c2      	strh	r2, [r0, #14]
 80085d2:	6183      	str	r3, [r0, #24]
 80085d4:	4619      	mov	r1, r3
 80085d6:	2208      	movs	r2, #8
 80085d8:	305c      	adds	r0, #92	@ 0x5c
 80085da:	f000 f906 	bl	80087ea <memset>
 80085de:	4b0d      	ldr	r3, [pc, #52]	@ (8008614 <std+0x58>)
 80085e0:	6263      	str	r3, [r4, #36]	@ 0x24
 80085e2:	4b0d      	ldr	r3, [pc, #52]	@ (8008618 <std+0x5c>)
 80085e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80085e6:	4b0d      	ldr	r3, [pc, #52]	@ (800861c <std+0x60>)
 80085e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80085ea:	4b0d      	ldr	r3, [pc, #52]	@ (8008620 <std+0x64>)
 80085ec:	6323      	str	r3, [r4, #48]	@ 0x30
 80085ee:	4b0d      	ldr	r3, [pc, #52]	@ (8008624 <std+0x68>)
 80085f0:	6224      	str	r4, [r4, #32]
 80085f2:	429c      	cmp	r4, r3
 80085f4:	d006      	beq.n	8008604 <std+0x48>
 80085f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80085fa:	4294      	cmp	r4, r2
 80085fc:	d002      	beq.n	8008604 <std+0x48>
 80085fe:	33d0      	adds	r3, #208	@ 0xd0
 8008600:	429c      	cmp	r4, r3
 8008602:	d105      	bne.n	8008610 <std+0x54>
 8008604:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800860c:	f000 b966 	b.w	80088dc <__retarget_lock_init_recursive>
 8008610:	bd10      	pop	{r4, pc}
 8008612:	bf00      	nop
 8008614:	08008765 	.word	0x08008765
 8008618:	08008787 	.word	0x08008787
 800861c:	080087bf 	.word	0x080087bf
 8008620:	080087e3 	.word	0x080087e3
 8008624:	20004b40 	.word	0x20004b40

08008628 <stdio_exit_handler>:
 8008628:	4a02      	ldr	r2, [pc, #8]	@ (8008634 <stdio_exit_handler+0xc>)
 800862a:	4903      	ldr	r1, [pc, #12]	@ (8008638 <stdio_exit_handler+0x10>)
 800862c:	4803      	ldr	r0, [pc, #12]	@ (800863c <stdio_exit_handler+0x14>)
 800862e:	f000 b87b 	b.w	8008728 <_fwalk_sglue>
 8008632:	bf00      	nop
 8008634:	2000001c 	.word	0x2000001c
 8008638:	080091a5 	.word	0x080091a5
 800863c:	2000002c 	.word	0x2000002c

08008640 <cleanup_stdio>:
 8008640:	6841      	ldr	r1, [r0, #4]
 8008642:	4b0c      	ldr	r3, [pc, #48]	@ (8008674 <cleanup_stdio+0x34>)
 8008644:	4299      	cmp	r1, r3
 8008646:	b510      	push	{r4, lr}
 8008648:	4604      	mov	r4, r0
 800864a:	d001      	beq.n	8008650 <cleanup_stdio+0x10>
 800864c:	f000 fdaa 	bl	80091a4 <_fflush_r>
 8008650:	68a1      	ldr	r1, [r4, #8]
 8008652:	4b09      	ldr	r3, [pc, #36]	@ (8008678 <cleanup_stdio+0x38>)
 8008654:	4299      	cmp	r1, r3
 8008656:	d002      	beq.n	800865e <cleanup_stdio+0x1e>
 8008658:	4620      	mov	r0, r4
 800865a:	f000 fda3 	bl	80091a4 <_fflush_r>
 800865e:	68e1      	ldr	r1, [r4, #12]
 8008660:	4b06      	ldr	r3, [pc, #24]	@ (800867c <cleanup_stdio+0x3c>)
 8008662:	4299      	cmp	r1, r3
 8008664:	d004      	beq.n	8008670 <cleanup_stdio+0x30>
 8008666:	4620      	mov	r0, r4
 8008668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800866c:	f000 bd9a 	b.w	80091a4 <_fflush_r>
 8008670:	bd10      	pop	{r4, pc}
 8008672:	bf00      	nop
 8008674:	20004b40 	.word	0x20004b40
 8008678:	20004ba8 	.word	0x20004ba8
 800867c:	20004c10 	.word	0x20004c10

08008680 <global_stdio_init.part.0>:
 8008680:	b510      	push	{r4, lr}
 8008682:	4b0b      	ldr	r3, [pc, #44]	@ (80086b0 <global_stdio_init.part.0+0x30>)
 8008684:	4c0b      	ldr	r4, [pc, #44]	@ (80086b4 <global_stdio_init.part.0+0x34>)
 8008686:	4a0c      	ldr	r2, [pc, #48]	@ (80086b8 <global_stdio_init.part.0+0x38>)
 8008688:	601a      	str	r2, [r3, #0]
 800868a:	4620      	mov	r0, r4
 800868c:	2200      	movs	r2, #0
 800868e:	2104      	movs	r1, #4
 8008690:	f7ff ff94 	bl	80085bc <std>
 8008694:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008698:	2201      	movs	r2, #1
 800869a:	2109      	movs	r1, #9
 800869c:	f7ff ff8e 	bl	80085bc <std>
 80086a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80086a4:	2202      	movs	r2, #2
 80086a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086aa:	2112      	movs	r1, #18
 80086ac:	f7ff bf86 	b.w	80085bc <std>
 80086b0:	20004c78 	.word	0x20004c78
 80086b4:	20004b40 	.word	0x20004b40
 80086b8:	08008629 	.word	0x08008629

080086bc <__sfp_lock_acquire>:
 80086bc:	4801      	ldr	r0, [pc, #4]	@ (80086c4 <__sfp_lock_acquire+0x8>)
 80086be:	f000 b90e 	b.w	80088de <__retarget_lock_acquire_recursive>
 80086c2:	bf00      	nop
 80086c4:	20004c81 	.word	0x20004c81

080086c8 <__sfp_lock_release>:
 80086c8:	4801      	ldr	r0, [pc, #4]	@ (80086d0 <__sfp_lock_release+0x8>)
 80086ca:	f000 b909 	b.w	80088e0 <__retarget_lock_release_recursive>
 80086ce:	bf00      	nop
 80086d0:	20004c81 	.word	0x20004c81

080086d4 <__sinit>:
 80086d4:	b510      	push	{r4, lr}
 80086d6:	4604      	mov	r4, r0
 80086d8:	f7ff fff0 	bl	80086bc <__sfp_lock_acquire>
 80086dc:	6a23      	ldr	r3, [r4, #32]
 80086de:	b11b      	cbz	r3, 80086e8 <__sinit+0x14>
 80086e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086e4:	f7ff bff0 	b.w	80086c8 <__sfp_lock_release>
 80086e8:	4b04      	ldr	r3, [pc, #16]	@ (80086fc <__sinit+0x28>)
 80086ea:	6223      	str	r3, [r4, #32]
 80086ec:	4b04      	ldr	r3, [pc, #16]	@ (8008700 <__sinit+0x2c>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d1f5      	bne.n	80086e0 <__sinit+0xc>
 80086f4:	f7ff ffc4 	bl	8008680 <global_stdio_init.part.0>
 80086f8:	e7f2      	b.n	80086e0 <__sinit+0xc>
 80086fa:	bf00      	nop
 80086fc:	08008641 	.word	0x08008641
 8008700:	20004c78 	.word	0x20004c78

08008704 <fiprintf>:
 8008704:	b40e      	push	{r1, r2, r3}
 8008706:	b503      	push	{r0, r1, lr}
 8008708:	4601      	mov	r1, r0
 800870a:	ab03      	add	r3, sp, #12
 800870c:	4805      	ldr	r0, [pc, #20]	@ (8008724 <fiprintf+0x20>)
 800870e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008712:	6800      	ldr	r0, [r0, #0]
 8008714:	9301      	str	r3, [sp, #4]
 8008716:	f000 fa1b 	bl	8008b50 <_vfiprintf_r>
 800871a:	b002      	add	sp, #8
 800871c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008720:	b003      	add	sp, #12
 8008722:	4770      	bx	lr
 8008724:	20000028 	.word	0x20000028

08008728 <_fwalk_sglue>:
 8008728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800872c:	4607      	mov	r7, r0
 800872e:	4688      	mov	r8, r1
 8008730:	4614      	mov	r4, r2
 8008732:	2600      	movs	r6, #0
 8008734:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008738:	f1b9 0901 	subs.w	r9, r9, #1
 800873c:	d505      	bpl.n	800874a <_fwalk_sglue+0x22>
 800873e:	6824      	ldr	r4, [r4, #0]
 8008740:	2c00      	cmp	r4, #0
 8008742:	d1f7      	bne.n	8008734 <_fwalk_sglue+0xc>
 8008744:	4630      	mov	r0, r6
 8008746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800874a:	89ab      	ldrh	r3, [r5, #12]
 800874c:	2b01      	cmp	r3, #1
 800874e:	d907      	bls.n	8008760 <_fwalk_sglue+0x38>
 8008750:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008754:	3301      	adds	r3, #1
 8008756:	d003      	beq.n	8008760 <_fwalk_sglue+0x38>
 8008758:	4629      	mov	r1, r5
 800875a:	4638      	mov	r0, r7
 800875c:	47c0      	blx	r8
 800875e:	4306      	orrs	r6, r0
 8008760:	3568      	adds	r5, #104	@ 0x68
 8008762:	e7e9      	b.n	8008738 <_fwalk_sglue+0x10>

08008764 <__sread>:
 8008764:	b510      	push	{r4, lr}
 8008766:	460c      	mov	r4, r1
 8008768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800876c:	f000 f868 	bl	8008840 <_read_r>
 8008770:	2800      	cmp	r0, #0
 8008772:	bfab      	itete	ge
 8008774:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008776:	89a3      	ldrhlt	r3, [r4, #12]
 8008778:	181b      	addge	r3, r3, r0
 800877a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800877e:	bfac      	ite	ge
 8008780:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008782:	81a3      	strhlt	r3, [r4, #12]
 8008784:	bd10      	pop	{r4, pc}

08008786 <__swrite>:
 8008786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800878a:	461f      	mov	r7, r3
 800878c:	898b      	ldrh	r3, [r1, #12]
 800878e:	05db      	lsls	r3, r3, #23
 8008790:	4605      	mov	r5, r0
 8008792:	460c      	mov	r4, r1
 8008794:	4616      	mov	r6, r2
 8008796:	d505      	bpl.n	80087a4 <__swrite+0x1e>
 8008798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800879c:	2302      	movs	r3, #2
 800879e:	2200      	movs	r2, #0
 80087a0:	f000 f83c 	bl	800881c <_lseek_r>
 80087a4:	89a3      	ldrh	r3, [r4, #12]
 80087a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80087ae:	81a3      	strh	r3, [r4, #12]
 80087b0:	4632      	mov	r2, r6
 80087b2:	463b      	mov	r3, r7
 80087b4:	4628      	mov	r0, r5
 80087b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087ba:	f000 b853 	b.w	8008864 <_write_r>

080087be <__sseek>:
 80087be:	b510      	push	{r4, lr}
 80087c0:	460c      	mov	r4, r1
 80087c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087c6:	f000 f829 	bl	800881c <_lseek_r>
 80087ca:	1c43      	adds	r3, r0, #1
 80087cc:	89a3      	ldrh	r3, [r4, #12]
 80087ce:	bf15      	itete	ne
 80087d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80087d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80087d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80087da:	81a3      	strheq	r3, [r4, #12]
 80087dc:	bf18      	it	ne
 80087de:	81a3      	strhne	r3, [r4, #12]
 80087e0:	bd10      	pop	{r4, pc}

080087e2 <__sclose>:
 80087e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087e6:	f000 b809 	b.w	80087fc <_close_r>

080087ea <memset>:
 80087ea:	4402      	add	r2, r0
 80087ec:	4603      	mov	r3, r0
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d100      	bne.n	80087f4 <memset+0xa>
 80087f2:	4770      	bx	lr
 80087f4:	f803 1b01 	strb.w	r1, [r3], #1
 80087f8:	e7f9      	b.n	80087ee <memset+0x4>
	...

080087fc <_close_r>:
 80087fc:	b538      	push	{r3, r4, r5, lr}
 80087fe:	4d06      	ldr	r5, [pc, #24]	@ (8008818 <_close_r+0x1c>)
 8008800:	2300      	movs	r3, #0
 8008802:	4604      	mov	r4, r0
 8008804:	4608      	mov	r0, r1
 8008806:	602b      	str	r3, [r5, #0]
 8008808:	f7f8 fdd2 	bl	80013b0 <_close>
 800880c:	1c43      	adds	r3, r0, #1
 800880e:	d102      	bne.n	8008816 <_close_r+0x1a>
 8008810:	682b      	ldr	r3, [r5, #0]
 8008812:	b103      	cbz	r3, 8008816 <_close_r+0x1a>
 8008814:	6023      	str	r3, [r4, #0]
 8008816:	bd38      	pop	{r3, r4, r5, pc}
 8008818:	20004c7c 	.word	0x20004c7c

0800881c <_lseek_r>:
 800881c:	b538      	push	{r3, r4, r5, lr}
 800881e:	4d07      	ldr	r5, [pc, #28]	@ (800883c <_lseek_r+0x20>)
 8008820:	4604      	mov	r4, r0
 8008822:	4608      	mov	r0, r1
 8008824:	4611      	mov	r1, r2
 8008826:	2200      	movs	r2, #0
 8008828:	602a      	str	r2, [r5, #0]
 800882a:	461a      	mov	r2, r3
 800882c:	f7f8 fde7 	bl	80013fe <_lseek>
 8008830:	1c43      	adds	r3, r0, #1
 8008832:	d102      	bne.n	800883a <_lseek_r+0x1e>
 8008834:	682b      	ldr	r3, [r5, #0]
 8008836:	b103      	cbz	r3, 800883a <_lseek_r+0x1e>
 8008838:	6023      	str	r3, [r4, #0]
 800883a:	bd38      	pop	{r3, r4, r5, pc}
 800883c:	20004c7c 	.word	0x20004c7c

08008840 <_read_r>:
 8008840:	b538      	push	{r3, r4, r5, lr}
 8008842:	4d07      	ldr	r5, [pc, #28]	@ (8008860 <_read_r+0x20>)
 8008844:	4604      	mov	r4, r0
 8008846:	4608      	mov	r0, r1
 8008848:	4611      	mov	r1, r2
 800884a:	2200      	movs	r2, #0
 800884c:	602a      	str	r2, [r5, #0]
 800884e:	461a      	mov	r2, r3
 8008850:	f7f8 fd75 	bl	800133e <_read>
 8008854:	1c43      	adds	r3, r0, #1
 8008856:	d102      	bne.n	800885e <_read_r+0x1e>
 8008858:	682b      	ldr	r3, [r5, #0]
 800885a:	b103      	cbz	r3, 800885e <_read_r+0x1e>
 800885c:	6023      	str	r3, [r4, #0]
 800885e:	bd38      	pop	{r3, r4, r5, pc}
 8008860:	20004c7c 	.word	0x20004c7c

08008864 <_write_r>:
 8008864:	b538      	push	{r3, r4, r5, lr}
 8008866:	4d07      	ldr	r5, [pc, #28]	@ (8008884 <_write_r+0x20>)
 8008868:	4604      	mov	r4, r0
 800886a:	4608      	mov	r0, r1
 800886c:	4611      	mov	r1, r2
 800886e:	2200      	movs	r2, #0
 8008870:	602a      	str	r2, [r5, #0]
 8008872:	461a      	mov	r2, r3
 8008874:	f7f8 fd80 	bl	8001378 <_write>
 8008878:	1c43      	adds	r3, r0, #1
 800887a:	d102      	bne.n	8008882 <_write_r+0x1e>
 800887c:	682b      	ldr	r3, [r5, #0]
 800887e:	b103      	cbz	r3, 8008882 <_write_r+0x1e>
 8008880:	6023      	str	r3, [r4, #0]
 8008882:	bd38      	pop	{r3, r4, r5, pc}
 8008884:	20004c7c 	.word	0x20004c7c

08008888 <__errno>:
 8008888:	4b01      	ldr	r3, [pc, #4]	@ (8008890 <__errno+0x8>)
 800888a:	6818      	ldr	r0, [r3, #0]
 800888c:	4770      	bx	lr
 800888e:	bf00      	nop
 8008890:	20000028 	.word	0x20000028

08008894 <__libc_init_array>:
 8008894:	b570      	push	{r4, r5, r6, lr}
 8008896:	4d0d      	ldr	r5, [pc, #52]	@ (80088cc <__libc_init_array+0x38>)
 8008898:	4c0d      	ldr	r4, [pc, #52]	@ (80088d0 <__libc_init_array+0x3c>)
 800889a:	1b64      	subs	r4, r4, r5
 800889c:	10a4      	asrs	r4, r4, #2
 800889e:	2600      	movs	r6, #0
 80088a0:	42a6      	cmp	r6, r4
 80088a2:	d109      	bne.n	80088b8 <__libc_init_array+0x24>
 80088a4:	4d0b      	ldr	r5, [pc, #44]	@ (80088d4 <__libc_init_array+0x40>)
 80088a6:	4c0c      	ldr	r4, [pc, #48]	@ (80088d8 <__libc_init_array+0x44>)
 80088a8:	f000 fe10 	bl	80094cc <_init>
 80088ac:	1b64      	subs	r4, r4, r5
 80088ae:	10a4      	asrs	r4, r4, #2
 80088b0:	2600      	movs	r6, #0
 80088b2:	42a6      	cmp	r6, r4
 80088b4:	d105      	bne.n	80088c2 <__libc_init_array+0x2e>
 80088b6:	bd70      	pop	{r4, r5, r6, pc}
 80088b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80088bc:	4798      	blx	r3
 80088be:	3601      	adds	r6, #1
 80088c0:	e7ee      	b.n	80088a0 <__libc_init_array+0xc>
 80088c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80088c6:	4798      	blx	r3
 80088c8:	3601      	adds	r6, #1
 80088ca:	e7f2      	b.n	80088b2 <__libc_init_array+0x1e>
 80088cc:	08009718 	.word	0x08009718
 80088d0:	08009718 	.word	0x08009718
 80088d4:	08009718 	.word	0x08009718
 80088d8:	0800971c 	.word	0x0800971c

080088dc <__retarget_lock_init_recursive>:
 80088dc:	4770      	bx	lr

080088de <__retarget_lock_acquire_recursive>:
 80088de:	4770      	bx	lr

080088e0 <__retarget_lock_release_recursive>:
 80088e0:	4770      	bx	lr

080088e2 <memcpy>:
 80088e2:	440a      	add	r2, r1
 80088e4:	4291      	cmp	r1, r2
 80088e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80088ea:	d100      	bne.n	80088ee <memcpy+0xc>
 80088ec:	4770      	bx	lr
 80088ee:	b510      	push	{r4, lr}
 80088f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088f8:	4291      	cmp	r1, r2
 80088fa:	d1f9      	bne.n	80088f0 <memcpy+0xe>
 80088fc:	bd10      	pop	{r4, pc}

080088fe <abort>:
 80088fe:	b508      	push	{r3, lr}
 8008900:	2006      	movs	r0, #6
 8008902:	f000 fd33 	bl	800936c <raise>
 8008906:	2001      	movs	r0, #1
 8008908:	f7f8 fd0e 	bl	8001328 <_exit>

0800890c <_free_r>:
 800890c:	b538      	push	{r3, r4, r5, lr}
 800890e:	4605      	mov	r5, r0
 8008910:	2900      	cmp	r1, #0
 8008912:	d041      	beq.n	8008998 <_free_r+0x8c>
 8008914:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008918:	1f0c      	subs	r4, r1, #4
 800891a:	2b00      	cmp	r3, #0
 800891c:	bfb8      	it	lt
 800891e:	18e4      	addlt	r4, r4, r3
 8008920:	f000 f8e0 	bl	8008ae4 <__malloc_lock>
 8008924:	4a1d      	ldr	r2, [pc, #116]	@ (800899c <_free_r+0x90>)
 8008926:	6813      	ldr	r3, [r2, #0]
 8008928:	b933      	cbnz	r3, 8008938 <_free_r+0x2c>
 800892a:	6063      	str	r3, [r4, #4]
 800892c:	6014      	str	r4, [r2, #0]
 800892e:	4628      	mov	r0, r5
 8008930:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008934:	f000 b8dc 	b.w	8008af0 <__malloc_unlock>
 8008938:	42a3      	cmp	r3, r4
 800893a:	d908      	bls.n	800894e <_free_r+0x42>
 800893c:	6820      	ldr	r0, [r4, #0]
 800893e:	1821      	adds	r1, r4, r0
 8008940:	428b      	cmp	r3, r1
 8008942:	bf01      	itttt	eq
 8008944:	6819      	ldreq	r1, [r3, #0]
 8008946:	685b      	ldreq	r3, [r3, #4]
 8008948:	1809      	addeq	r1, r1, r0
 800894a:	6021      	streq	r1, [r4, #0]
 800894c:	e7ed      	b.n	800892a <_free_r+0x1e>
 800894e:	461a      	mov	r2, r3
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	b10b      	cbz	r3, 8008958 <_free_r+0x4c>
 8008954:	42a3      	cmp	r3, r4
 8008956:	d9fa      	bls.n	800894e <_free_r+0x42>
 8008958:	6811      	ldr	r1, [r2, #0]
 800895a:	1850      	adds	r0, r2, r1
 800895c:	42a0      	cmp	r0, r4
 800895e:	d10b      	bne.n	8008978 <_free_r+0x6c>
 8008960:	6820      	ldr	r0, [r4, #0]
 8008962:	4401      	add	r1, r0
 8008964:	1850      	adds	r0, r2, r1
 8008966:	4283      	cmp	r3, r0
 8008968:	6011      	str	r1, [r2, #0]
 800896a:	d1e0      	bne.n	800892e <_free_r+0x22>
 800896c:	6818      	ldr	r0, [r3, #0]
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	6053      	str	r3, [r2, #4]
 8008972:	4408      	add	r0, r1
 8008974:	6010      	str	r0, [r2, #0]
 8008976:	e7da      	b.n	800892e <_free_r+0x22>
 8008978:	d902      	bls.n	8008980 <_free_r+0x74>
 800897a:	230c      	movs	r3, #12
 800897c:	602b      	str	r3, [r5, #0]
 800897e:	e7d6      	b.n	800892e <_free_r+0x22>
 8008980:	6820      	ldr	r0, [r4, #0]
 8008982:	1821      	adds	r1, r4, r0
 8008984:	428b      	cmp	r3, r1
 8008986:	bf04      	itt	eq
 8008988:	6819      	ldreq	r1, [r3, #0]
 800898a:	685b      	ldreq	r3, [r3, #4]
 800898c:	6063      	str	r3, [r4, #4]
 800898e:	bf04      	itt	eq
 8008990:	1809      	addeq	r1, r1, r0
 8008992:	6021      	streq	r1, [r4, #0]
 8008994:	6054      	str	r4, [r2, #4]
 8008996:	e7ca      	b.n	800892e <_free_r+0x22>
 8008998:	bd38      	pop	{r3, r4, r5, pc}
 800899a:	bf00      	nop
 800899c:	20004c88 	.word	0x20004c88

080089a0 <sbrk_aligned>:
 80089a0:	b570      	push	{r4, r5, r6, lr}
 80089a2:	4e0f      	ldr	r6, [pc, #60]	@ (80089e0 <sbrk_aligned+0x40>)
 80089a4:	460c      	mov	r4, r1
 80089a6:	6831      	ldr	r1, [r6, #0]
 80089a8:	4605      	mov	r5, r0
 80089aa:	b911      	cbnz	r1, 80089b2 <sbrk_aligned+0x12>
 80089ac:	f000 fcfa 	bl	80093a4 <_sbrk_r>
 80089b0:	6030      	str	r0, [r6, #0]
 80089b2:	4621      	mov	r1, r4
 80089b4:	4628      	mov	r0, r5
 80089b6:	f000 fcf5 	bl	80093a4 <_sbrk_r>
 80089ba:	1c43      	adds	r3, r0, #1
 80089bc:	d103      	bne.n	80089c6 <sbrk_aligned+0x26>
 80089be:	f04f 34ff 	mov.w	r4, #4294967295
 80089c2:	4620      	mov	r0, r4
 80089c4:	bd70      	pop	{r4, r5, r6, pc}
 80089c6:	1cc4      	adds	r4, r0, #3
 80089c8:	f024 0403 	bic.w	r4, r4, #3
 80089cc:	42a0      	cmp	r0, r4
 80089ce:	d0f8      	beq.n	80089c2 <sbrk_aligned+0x22>
 80089d0:	1a21      	subs	r1, r4, r0
 80089d2:	4628      	mov	r0, r5
 80089d4:	f000 fce6 	bl	80093a4 <_sbrk_r>
 80089d8:	3001      	adds	r0, #1
 80089da:	d1f2      	bne.n	80089c2 <sbrk_aligned+0x22>
 80089dc:	e7ef      	b.n	80089be <sbrk_aligned+0x1e>
 80089de:	bf00      	nop
 80089e0:	20004c84 	.word	0x20004c84

080089e4 <_malloc_r>:
 80089e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089e8:	1ccd      	adds	r5, r1, #3
 80089ea:	f025 0503 	bic.w	r5, r5, #3
 80089ee:	3508      	adds	r5, #8
 80089f0:	2d0c      	cmp	r5, #12
 80089f2:	bf38      	it	cc
 80089f4:	250c      	movcc	r5, #12
 80089f6:	2d00      	cmp	r5, #0
 80089f8:	4606      	mov	r6, r0
 80089fa:	db01      	blt.n	8008a00 <_malloc_r+0x1c>
 80089fc:	42a9      	cmp	r1, r5
 80089fe:	d904      	bls.n	8008a0a <_malloc_r+0x26>
 8008a00:	230c      	movs	r3, #12
 8008a02:	6033      	str	r3, [r6, #0]
 8008a04:	2000      	movs	r0, #0
 8008a06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008ae0 <_malloc_r+0xfc>
 8008a0e:	f000 f869 	bl	8008ae4 <__malloc_lock>
 8008a12:	f8d8 3000 	ldr.w	r3, [r8]
 8008a16:	461c      	mov	r4, r3
 8008a18:	bb44      	cbnz	r4, 8008a6c <_malloc_r+0x88>
 8008a1a:	4629      	mov	r1, r5
 8008a1c:	4630      	mov	r0, r6
 8008a1e:	f7ff ffbf 	bl	80089a0 <sbrk_aligned>
 8008a22:	1c43      	adds	r3, r0, #1
 8008a24:	4604      	mov	r4, r0
 8008a26:	d158      	bne.n	8008ada <_malloc_r+0xf6>
 8008a28:	f8d8 4000 	ldr.w	r4, [r8]
 8008a2c:	4627      	mov	r7, r4
 8008a2e:	2f00      	cmp	r7, #0
 8008a30:	d143      	bne.n	8008aba <_malloc_r+0xd6>
 8008a32:	2c00      	cmp	r4, #0
 8008a34:	d04b      	beq.n	8008ace <_malloc_r+0xea>
 8008a36:	6823      	ldr	r3, [r4, #0]
 8008a38:	4639      	mov	r1, r7
 8008a3a:	4630      	mov	r0, r6
 8008a3c:	eb04 0903 	add.w	r9, r4, r3
 8008a40:	f000 fcb0 	bl	80093a4 <_sbrk_r>
 8008a44:	4581      	cmp	r9, r0
 8008a46:	d142      	bne.n	8008ace <_malloc_r+0xea>
 8008a48:	6821      	ldr	r1, [r4, #0]
 8008a4a:	1a6d      	subs	r5, r5, r1
 8008a4c:	4629      	mov	r1, r5
 8008a4e:	4630      	mov	r0, r6
 8008a50:	f7ff ffa6 	bl	80089a0 <sbrk_aligned>
 8008a54:	3001      	adds	r0, #1
 8008a56:	d03a      	beq.n	8008ace <_malloc_r+0xea>
 8008a58:	6823      	ldr	r3, [r4, #0]
 8008a5a:	442b      	add	r3, r5
 8008a5c:	6023      	str	r3, [r4, #0]
 8008a5e:	f8d8 3000 	ldr.w	r3, [r8]
 8008a62:	685a      	ldr	r2, [r3, #4]
 8008a64:	bb62      	cbnz	r2, 8008ac0 <_malloc_r+0xdc>
 8008a66:	f8c8 7000 	str.w	r7, [r8]
 8008a6a:	e00f      	b.n	8008a8c <_malloc_r+0xa8>
 8008a6c:	6822      	ldr	r2, [r4, #0]
 8008a6e:	1b52      	subs	r2, r2, r5
 8008a70:	d420      	bmi.n	8008ab4 <_malloc_r+0xd0>
 8008a72:	2a0b      	cmp	r2, #11
 8008a74:	d917      	bls.n	8008aa6 <_malloc_r+0xc2>
 8008a76:	1961      	adds	r1, r4, r5
 8008a78:	42a3      	cmp	r3, r4
 8008a7a:	6025      	str	r5, [r4, #0]
 8008a7c:	bf18      	it	ne
 8008a7e:	6059      	strne	r1, [r3, #4]
 8008a80:	6863      	ldr	r3, [r4, #4]
 8008a82:	bf08      	it	eq
 8008a84:	f8c8 1000 	streq.w	r1, [r8]
 8008a88:	5162      	str	r2, [r4, r5]
 8008a8a:	604b      	str	r3, [r1, #4]
 8008a8c:	4630      	mov	r0, r6
 8008a8e:	f000 f82f 	bl	8008af0 <__malloc_unlock>
 8008a92:	f104 000b 	add.w	r0, r4, #11
 8008a96:	1d23      	adds	r3, r4, #4
 8008a98:	f020 0007 	bic.w	r0, r0, #7
 8008a9c:	1ac2      	subs	r2, r0, r3
 8008a9e:	bf1c      	itt	ne
 8008aa0:	1a1b      	subne	r3, r3, r0
 8008aa2:	50a3      	strne	r3, [r4, r2]
 8008aa4:	e7af      	b.n	8008a06 <_malloc_r+0x22>
 8008aa6:	6862      	ldr	r2, [r4, #4]
 8008aa8:	42a3      	cmp	r3, r4
 8008aaa:	bf0c      	ite	eq
 8008aac:	f8c8 2000 	streq.w	r2, [r8]
 8008ab0:	605a      	strne	r2, [r3, #4]
 8008ab2:	e7eb      	b.n	8008a8c <_malloc_r+0xa8>
 8008ab4:	4623      	mov	r3, r4
 8008ab6:	6864      	ldr	r4, [r4, #4]
 8008ab8:	e7ae      	b.n	8008a18 <_malloc_r+0x34>
 8008aba:	463c      	mov	r4, r7
 8008abc:	687f      	ldr	r7, [r7, #4]
 8008abe:	e7b6      	b.n	8008a2e <_malloc_r+0x4a>
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	42a3      	cmp	r3, r4
 8008ac6:	d1fb      	bne.n	8008ac0 <_malloc_r+0xdc>
 8008ac8:	2300      	movs	r3, #0
 8008aca:	6053      	str	r3, [r2, #4]
 8008acc:	e7de      	b.n	8008a8c <_malloc_r+0xa8>
 8008ace:	230c      	movs	r3, #12
 8008ad0:	6033      	str	r3, [r6, #0]
 8008ad2:	4630      	mov	r0, r6
 8008ad4:	f000 f80c 	bl	8008af0 <__malloc_unlock>
 8008ad8:	e794      	b.n	8008a04 <_malloc_r+0x20>
 8008ada:	6005      	str	r5, [r0, #0]
 8008adc:	e7d6      	b.n	8008a8c <_malloc_r+0xa8>
 8008ade:	bf00      	nop
 8008ae0:	20004c88 	.word	0x20004c88

08008ae4 <__malloc_lock>:
 8008ae4:	4801      	ldr	r0, [pc, #4]	@ (8008aec <__malloc_lock+0x8>)
 8008ae6:	f7ff befa 	b.w	80088de <__retarget_lock_acquire_recursive>
 8008aea:	bf00      	nop
 8008aec:	20004c80 	.word	0x20004c80

08008af0 <__malloc_unlock>:
 8008af0:	4801      	ldr	r0, [pc, #4]	@ (8008af8 <__malloc_unlock+0x8>)
 8008af2:	f7ff bef5 	b.w	80088e0 <__retarget_lock_release_recursive>
 8008af6:	bf00      	nop
 8008af8:	20004c80 	.word	0x20004c80

08008afc <__sfputc_r>:
 8008afc:	6893      	ldr	r3, [r2, #8]
 8008afe:	3b01      	subs	r3, #1
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	b410      	push	{r4}
 8008b04:	6093      	str	r3, [r2, #8]
 8008b06:	da08      	bge.n	8008b1a <__sfputc_r+0x1e>
 8008b08:	6994      	ldr	r4, [r2, #24]
 8008b0a:	42a3      	cmp	r3, r4
 8008b0c:	db01      	blt.n	8008b12 <__sfputc_r+0x16>
 8008b0e:	290a      	cmp	r1, #10
 8008b10:	d103      	bne.n	8008b1a <__sfputc_r+0x1e>
 8008b12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b16:	f000 bb6d 	b.w	80091f4 <__swbuf_r>
 8008b1a:	6813      	ldr	r3, [r2, #0]
 8008b1c:	1c58      	adds	r0, r3, #1
 8008b1e:	6010      	str	r0, [r2, #0]
 8008b20:	7019      	strb	r1, [r3, #0]
 8008b22:	4608      	mov	r0, r1
 8008b24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b28:	4770      	bx	lr

08008b2a <__sfputs_r>:
 8008b2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b2c:	4606      	mov	r6, r0
 8008b2e:	460f      	mov	r7, r1
 8008b30:	4614      	mov	r4, r2
 8008b32:	18d5      	adds	r5, r2, r3
 8008b34:	42ac      	cmp	r4, r5
 8008b36:	d101      	bne.n	8008b3c <__sfputs_r+0x12>
 8008b38:	2000      	movs	r0, #0
 8008b3a:	e007      	b.n	8008b4c <__sfputs_r+0x22>
 8008b3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b40:	463a      	mov	r2, r7
 8008b42:	4630      	mov	r0, r6
 8008b44:	f7ff ffda 	bl	8008afc <__sfputc_r>
 8008b48:	1c43      	adds	r3, r0, #1
 8008b4a:	d1f3      	bne.n	8008b34 <__sfputs_r+0xa>
 8008b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008b50 <_vfiprintf_r>:
 8008b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b54:	460d      	mov	r5, r1
 8008b56:	b09d      	sub	sp, #116	@ 0x74
 8008b58:	4614      	mov	r4, r2
 8008b5a:	4698      	mov	r8, r3
 8008b5c:	4606      	mov	r6, r0
 8008b5e:	b118      	cbz	r0, 8008b68 <_vfiprintf_r+0x18>
 8008b60:	6a03      	ldr	r3, [r0, #32]
 8008b62:	b90b      	cbnz	r3, 8008b68 <_vfiprintf_r+0x18>
 8008b64:	f7ff fdb6 	bl	80086d4 <__sinit>
 8008b68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b6a:	07d9      	lsls	r1, r3, #31
 8008b6c:	d405      	bmi.n	8008b7a <_vfiprintf_r+0x2a>
 8008b6e:	89ab      	ldrh	r3, [r5, #12]
 8008b70:	059a      	lsls	r2, r3, #22
 8008b72:	d402      	bmi.n	8008b7a <_vfiprintf_r+0x2a>
 8008b74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008b76:	f7ff feb2 	bl	80088de <__retarget_lock_acquire_recursive>
 8008b7a:	89ab      	ldrh	r3, [r5, #12]
 8008b7c:	071b      	lsls	r3, r3, #28
 8008b7e:	d501      	bpl.n	8008b84 <_vfiprintf_r+0x34>
 8008b80:	692b      	ldr	r3, [r5, #16]
 8008b82:	b99b      	cbnz	r3, 8008bac <_vfiprintf_r+0x5c>
 8008b84:	4629      	mov	r1, r5
 8008b86:	4630      	mov	r0, r6
 8008b88:	f000 fb72 	bl	8009270 <__swsetup_r>
 8008b8c:	b170      	cbz	r0, 8008bac <_vfiprintf_r+0x5c>
 8008b8e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b90:	07dc      	lsls	r4, r3, #31
 8008b92:	d504      	bpl.n	8008b9e <_vfiprintf_r+0x4e>
 8008b94:	f04f 30ff 	mov.w	r0, #4294967295
 8008b98:	b01d      	add	sp, #116	@ 0x74
 8008b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b9e:	89ab      	ldrh	r3, [r5, #12]
 8008ba0:	0598      	lsls	r0, r3, #22
 8008ba2:	d4f7      	bmi.n	8008b94 <_vfiprintf_r+0x44>
 8008ba4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ba6:	f7ff fe9b 	bl	80088e0 <__retarget_lock_release_recursive>
 8008baa:	e7f3      	b.n	8008b94 <_vfiprintf_r+0x44>
 8008bac:	2300      	movs	r3, #0
 8008bae:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bb0:	2320      	movs	r3, #32
 8008bb2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008bb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bba:	2330      	movs	r3, #48	@ 0x30
 8008bbc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008d6c <_vfiprintf_r+0x21c>
 8008bc0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008bc4:	f04f 0901 	mov.w	r9, #1
 8008bc8:	4623      	mov	r3, r4
 8008bca:	469a      	mov	sl, r3
 8008bcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bd0:	b10a      	cbz	r2, 8008bd6 <_vfiprintf_r+0x86>
 8008bd2:	2a25      	cmp	r2, #37	@ 0x25
 8008bd4:	d1f9      	bne.n	8008bca <_vfiprintf_r+0x7a>
 8008bd6:	ebba 0b04 	subs.w	fp, sl, r4
 8008bda:	d00b      	beq.n	8008bf4 <_vfiprintf_r+0xa4>
 8008bdc:	465b      	mov	r3, fp
 8008bde:	4622      	mov	r2, r4
 8008be0:	4629      	mov	r1, r5
 8008be2:	4630      	mov	r0, r6
 8008be4:	f7ff ffa1 	bl	8008b2a <__sfputs_r>
 8008be8:	3001      	adds	r0, #1
 8008bea:	f000 80a7 	beq.w	8008d3c <_vfiprintf_r+0x1ec>
 8008bee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008bf0:	445a      	add	r2, fp
 8008bf2:	9209      	str	r2, [sp, #36]	@ 0x24
 8008bf4:	f89a 3000 	ldrb.w	r3, [sl]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	f000 809f 	beq.w	8008d3c <_vfiprintf_r+0x1ec>
 8008bfe:	2300      	movs	r3, #0
 8008c00:	f04f 32ff 	mov.w	r2, #4294967295
 8008c04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c08:	f10a 0a01 	add.w	sl, sl, #1
 8008c0c:	9304      	str	r3, [sp, #16]
 8008c0e:	9307      	str	r3, [sp, #28]
 8008c10:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008c14:	931a      	str	r3, [sp, #104]	@ 0x68
 8008c16:	4654      	mov	r4, sl
 8008c18:	2205      	movs	r2, #5
 8008c1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c1e:	4853      	ldr	r0, [pc, #332]	@ (8008d6c <_vfiprintf_r+0x21c>)
 8008c20:	f7f7 faf6 	bl	8000210 <memchr>
 8008c24:	9a04      	ldr	r2, [sp, #16]
 8008c26:	b9d8      	cbnz	r0, 8008c60 <_vfiprintf_r+0x110>
 8008c28:	06d1      	lsls	r1, r2, #27
 8008c2a:	bf44      	itt	mi
 8008c2c:	2320      	movmi	r3, #32
 8008c2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c32:	0713      	lsls	r3, r2, #28
 8008c34:	bf44      	itt	mi
 8008c36:	232b      	movmi	r3, #43	@ 0x2b
 8008c38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c3c:	f89a 3000 	ldrb.w	r3, [sl]
 8008c40:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c42:	d015      	beq.n	8008c70 <_vfiprintf_r+0x120>
 8008c44:	9a07      	ldr	r2, [sp, #28]
 8008c46:	4654      	mov	r4, sl
 8008c48:	2000      	movs	r0, #0
 8008c4a:	f04f 0c0a 	mov.w	ip, #10
 8008c4e:	4621      	mov	r1, r4
 8008c50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c54:	3b30      	subs	r3, #48	@ 0x30
 8008c56:	2b09      	cmp	r3, #9
 8008c58:	d94b      	bls.n	8008cf2 <_vfiprintf_r+0x1a2>
 8008c5a:	b1b0      	cbz	r0, 8008c8a <_vfiprintf_r+0x13a>
 8008c5c:	9207      	str	r2, [sp, #28]
 8008c5e:	e014      	b.n	8008c8a <_vfiprintf_r+0x13a>
 8008c60:	eba0 0308 	sub.w	r3, r0, r8
 8008c64:	fa09 f303 	lsl.w	r3, r9, r3
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	9304      	str	r3, [sp, #16]
 8008c6c:	46a2      	mov	sl, r4
 8008c6e:	e7d2      	b.n	8008c16 <_vfiprintf_r+0xc6>
 8008c70:	9b03      	ldr	r3, [sp, #12]
 8008c72:	1d19      	adds	r1, r3, #4
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	9103      	str	r1, [sp, #12]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	bfbb      	ittet	lt
 8008c7c:	425b      	neglt	r3, r3
 8008c7e:	f042 0202 	orrlt.w	r2, r2, #2
 8008c82:	9307      	strge	r3, [sp, #28]
 8008c84:	9307      	strlt	r3, [sp, #28]
 8008c86:	bfb8      	it	lt
 8008c88:	9204      	strlt	r2, [sp, #16]
 8008c8a:	7823      	ldrb	r3, [r4, #0]
 8008c8c:	2b2e      	cmp	r3, #46	@ 0x2e
 8008c8e:	d10a      	bne.n	8008ca6 <_vfiprintf_r+0x156>
 8008c90:	7863      	ldrb	r3, [r4, #1]
 8008c92:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c94:	d132      	bne.n	8008cfc <_vfiprintf_r+0x1ac>
 8008c96:	9b03      	ldr	r3, [sp, #12]
 8008c98:	1d1a      	adds	r2, r3, #4
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	9203      	str	r2, [sp, #12]
 8008c9e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008ca2:	3402      	adds	r4, #2
 8008ca4:	9305      	str	r3, [sp, #20]
 8008ca6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008d7c <_vfiprintf_r+0x22c>
 8008caa:	7821      	ldrb	r1, [r4, #0]
 8008cac:	2203      	movs	r2, #3
 8008cae:	4650      	mov	r0, sl
 8008cb0:	f7f7 faae 	bl	8000210 <memchr>
 8008cb4:	b138      	cbz	r0, 8008cc6 <_vfiprintf_r+0x176>
 8008cb6:	9b04      	ldr	r3, [sp, #16]
 8008cb8:	eba0 000a 	sub.w	r0, r0, sl
 8008cbc:	2240      	movs	r2, #64	@ 0x40
 8008cbe:	4082      	lsls	r2, r0
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	3401      	adds	r4, #1
 8008cc4:	9304      	str	r3, [sp, #16]
 8008cc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cca:	4829      	ldr	r0, [pc, #164]	@ (8008d70 <_vfiprintf_r+0x220>)
 8008ccc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008cd0:	2206      	movs	r2, #6
 8008cd2:	f7f7 fa9d 	bl	8000210 <memchr>
 8008cd6:	2800      	cmp	r0, #0
 8008cd8:	d03f      	beq.n	8008d5a <_vfiprintf_r+0x20a>
 8008cda:	4b26      	ldr	r3, [pc, #152]	@ (8008d74 <_vfiprintf_r+0x224>)
 8008cdc:	bb1b      	cbnz	r3, 8008d26 <_vfiprintf_r+0x1d6>
 8008cde:	9b03      	ldr	r3, [sp, #12]
 8008ce0:	3307      	adds	r3, #7
 8008ce2:	f023 0307 	bic.w	r3, r3, #7
 8008ce6:	3308      	adds	r3, #8
 8008ce8:	9303      	str	r3, [sp, #12]
 8008cea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cec:	443b      	add	r3, r7
 8008cee:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cf0:	e76a      	b.n	8008bc8 <_vfiprintf_r+0x78>
 8008cf2:	fb0c 3202 	mla	r2, ip, r2, r3
 8008cf6:	460c      	mov	r4, r1
 8008cf8:	2001      	movs	r0, #1
 8008cfa:	e7a8      	b.n	8008c4e <_vfiprintf_r+0xfe>
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	3401      	adds	r4, #1
 8008d00:	9305      	str	r3, [sp, #20]
 8008d02:	4619      	mov	r1, r3
 8008d04:	f04f 0c0a 	mov.w	ip, #10
 8008d08:	4620      	mov	r0, r4
 8008d0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d0e:	3a30      	subs	r2, #48	@ 0x30
 8008d10:	2a09      	cmp	r2, #9
 8008d12:	d903      	bls.n	8008d1c <_vfiprintf_r+0x1cc>
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d0c6      	beq.n	8008ca6 <_vfiprintf_r+0x156>
 8008d18:	9105      	str	r1, [sp, #20]
 8008d1a:	e7c4      	b.n	8008ca6 <_vfiprintf_r+0x156>
 8008d1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d20:	4604      	mov	r4, r0
 8008d22:	2301      	movs	r3, #1
 8008d24:	e7f0      	b.n	8008d08 <_vfiprintf_r+0x1b8>
 8008d26:	ab03      	add	r3, sp, #12
 8008d28:	9300      	str	r3, [sp, #0]
 8008d2a:	462a      	mov	r2, r5
 8008d2c:	4b12      	ldr	r3, [pc, #72]	@ (8008d78 <_vfiprintf_r+0x228>)
 8008d2e:	a904      	add	r1, sp, #16
 8008d30:	4630      	mov	r0, r6
 8008d32:	f3af 8000 	nop.w
 8008d36:	4607      	mov	r7, r0
 8008d38:	1c78      	adds	r0, r7, #1
 8008d3a:	d1d6      	bne.n	8008cea <_vfiprintf_r+0x19a>
 8008d3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d3e:	07d9      	lsls	r1, r3, #31
 8008d40:	d405      	bmi.n	8008d4e <_vfiprintf_r+0x1fe>
 8008d42:	89ab      	ldrh	r3, [r5, #12]
 8008d44:	059a      	lsls	r2, r3, #22
 8008d46:	d402      	bmi.n	8008d4e <_vfiprintf_r+0x1fe>
 8008d48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d4a:	f7ff fdc9 	bl	80088e0 <__retarget_lock_release_recursive>
 8008d4e:	89ab      	ldrh	r3, [r5, #12]
 8008d50:	065b      	lsls	r3, r3, #25
 8008d52:	f53f af1f 	bmi.w	8008b94 <_vfiprintf_r+0x44>
 8008d56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008d58:	e71e      	b.n	8008b98 <_vfiprintf_r+0x48>
 8008d5a:	ab03      	add	r3, sp, #12
 8008d5c:	9300      	str	r3, [sp, #0]
 8008d5e:	462a      	mov	r2, r5
 8008d60:	4b05      	ldr	r3, [pc, #20]	@ (8008d78 <_vfiprintf_r+0x228>)
 8008d62:	a904      	add	r1, sp, #16
 8008d64:	4630      	mov	r0, r6
 8008d66:	f000 f879 	bl	8008e5c <_printf_i>
 8008d6a:	e7e4      	b.n	8008d36 <_vfiprintf_r+0x1e6>
 8008d6c:	080096dc 	.word	0x080096dc
 8008d70:	080096e6 	.word	0x080096e6
 8008d74:	00000000 	.word	0x00000000
 8008d78:	08008b2b 	.word	0x08008b2b
 8008d7c:	080096e2 	.word	0x080096e2

08008d80 <_printf_common>:
 8008d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d84:	4616      	mov	r6, r2
 8008d86:	4698      	mov	r8, r3
 8008d88:	688a      	ldr	r2, [r1, #8]
 8008d8a:	690b      	ldr	r3, [r1, #16]
 8008d8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008d90:	4293      	cmp	r3, r2
 8008d92:	bfb8      	it	lt
 8008d94:	4613      	movlt	r3, r2
 8008d96:	6033      	str	r3, [r6, #0]
 8008d98:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008d9c:	4607      	mov	r7, r0
 8008d9e:	460c      	mov	r4, r1
 8008da0:	b10a      	cbz	r2, 8008da6 <_printf_common+0x26>
 8008da2:	3301      	adds	r3, #1
 8008da4:	6033      	str	r3, [r6, #0]
 8008da6:	6823      	ldr	r3, [r4, #0]
 8008da8:	0699      	lsls	r1, r3, #26
 8008daa:	bf42      	ittt	mi
 8008dac:	6833      	ldrmi	r3, [r6, #0]
 8008dae:	3302      	addmi	r3, #2
 8008db0:	6033      	strmi	r3, [r6, #0]
 8008db2:	6825      	ldr	r5, [r4, #0]
 8008db4:	f015 0506 	ands.w	r5, r5, #6
 8008db8:	d106      	bne.n	8008dc8 <_printf_common+0x48>
 8008dba:	f104 0a19 	add.w	sl, r4, #25
 8008dbe:	68e3      	ldr	r3, [r4, #12]
 8008dc0:	6832      	ldr	r2, [r6, #0]
 8008dc2:	1a9b      	subs	r3, r3, r2
 8008dc4:	42ab      	cmp	r3, r5
 8008dc6:	dc26      	bgt.n	8008e16 <_printf_common+0x96>
 8008dc8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008dcc:	6822      	ldr	r2, [r4, #0]
 8008dce:	3b00      	subs	r3, #0
 8008dd0:	bf18      	it	ne
 8008dd2:	2301      	movne	r3, #1
 8008dd4:	0692      	lsls	r2, r2, #26
 8008dd6:	d42b      	bmi.n	8008e30 <_printf_common+0xb0>
 8008dd8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008ddc:	4641      	mov	r1, r8
 8008dde:	4638      	mov	r0, r7
 8008de0:	47c8      	blx	r9
 8008de2:	3001      	adds	r0, #1
 8008de4:	d01e      	beq.n	8008e24 <_printf_common+0xa4>
 8008de6:	6823      	ldr	r3, [r4, #0]
 8008de8:	6922      	ldr	r2, [r4, #16]
 8008dea:	f003 0306 	and.w	r3, r3, #6
 8008dee:	2b04      	cmp	r3, #4
 8008df0:	bf02      	ittt	eq
 8008df2:	68e5      	ldreq	r5, [r4, #12]
 8008df4:	6833      	ldreq	r3, [r6, #0]
 8008df6:	1aed      	subeq	r5, r5, r3
 8008df8:	68a3      	ldr	r3, [r4, #8]
 8008dfa:	bf0c      	ite	eq
 8008dfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e00:	2500      	movne	r5, #0
 8008e02:	4293      	cmp	r3, r2
 8008e04:	bfc4      	itt	gt
 8008e06:	1a9b      	subgt	r3, r3, r2
 8008e08:	18ed      	addgt	r5, r5, r3
 8008e0a:	2600      	movs	r6, #0
 8008e0c:	341a      	adds	r4, #26
 8008e0e:	42b5      	cmp	r5, r6
 8008e10:	d11a      	bne.n	8008e48 <_printf_common+0xc8>
 8008e12:	2000      	movs	r0, #0
 8008e14:	e008      	b.n	8008e28 <_printf_common+0xa8>
 8008e16:	2301      	movs	r3, #1
 8008e18:	4652      	mov	r2, sl
 8008e1a:	4641      	mov	r1, r8
 8008e1c:	4638      	mov	r0, r7
 8008e1e:	47c8      	blx	r9
 8008e20:	3001      	adds	r0, #1
 8008e22:	d103      	bne.n	8008e2c <_printf_common+0xac>
 8008e24:	f04f 30ff 	mov.w	r0, #4294967295
 8008e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e2c:	3501      	adds	r5, #1
 8008e2e:	e7c6      	b.n	8008dbe <_printf_common+0x3e>
 8008e30:	18e1      	adds	r1, r4, r3
 8008e32:	1c5a      	adds	r2, r3, #1
 8008e34:	2030      	movs	r0, #48	@ 0x30
 8008e36:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008e3a:	4422      	add	r2, r4
 8008e3c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008e40:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008e44:	3302      	adds	r3, #2
 8008e46:	e7c7      	b.n	8008dd8 <_printf_common+0x58>
 8008e48:	2301      	movs	r3, #1
 8008e4a:	4622      	mov	r2, r4
 8008e4c:	4641      	mov	r1, r8
 8008e4e:	4638      	mov	r0, r7
 8008e50:	47c8      	blx	r9
 8008e52:	3001      	adds	r0, #1
 8008e54:	d0e6      	beq.n	8008e24 <_printf_common+0xa4>
 8008e56:	3601      	adds	r6, #1
 8008e58:	e7d9      	b.n	8008e0e <_printf_common+0x8e>
	...

08008e5c <_printf_i>:
 8008e5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e60:	7e0f      	ldrb	r7, [r1, #24]
 8008e62:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008e64:	2f78      	cmp	r7, #120	@ 0x78
 8008e66:	4691      	mov	r9, r2
 8008e68:	4680      	mov	r8, r0
 8008e6a:	460c      	mov	r4, r1
 8008e6c:	469a      	mov	sl, r3
 8008e6e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008e72:	d807      	bhi.n	8008e84 <_printf_i+0x28>
 8008e74:	2f62      	cmp	r7, #98	@ 0x62
 8008e76:	d80a      	bhi.n	8008e8e <_printf_i+0x32>
 8008e78:	2f00      	cmp	r7, #0
 8008e7a:	f000 80d2 	beq.w	8009022 <_printf_i+0x1c6>
 8008e7e:	2f58      	cmp	r7, #88	@ 0x58
 8008e80:	f000 80b9 	beq.w	8008ff6 <_printf_i+0x19a>
 8008e84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e88:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008e8c:	e03a      	b.n	8008f04 <_printf_i+0xa8>
 8008e8e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008e92:	2b15      	cmp	r3, #21
 8008e94:	d8f6      	bhi.n	8008e84 <_printf_i+0x28>
 8008e96:	a101      	add	r1, pc, #4	@ (adr r1, 8008e9c <_printf_i+0x40>)
 8008e98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e9c:	08008ef5 	.word	0x08008ef5
 8008ea0:	08008f09 	.word	0x08008f09
 8008ea4:	08008e85 	.word	0x08008e85
 8008ea8:	08008e85 	.word	0x08008e85
 8008eac:	08008e85 	.word	0x08008e85
 8008eb0:	08008e85 	.word	0x08008e85
 8008eb4:	08008f09 	.word	0x08008f09
 8008eb8:	08008e85 	.word	0x08008e85
 8008ebc:	08008e85 	.word	0x08008e85
 8008ec0:	08008e85 	.word	0x08008e85
 8008ec4:	08008e85 	.word	0x08008e85
 8008ec8:	08009009 	.word	0x08009009
 8008ecc:	08008f33 	.word	0x08008f33
 8008ed0:	08008fc3 	.word	0x08008fc3
 8008ed4:	08008e85 	.word	0x08008e85
 8008ed8:	08008e85 	.word	0x08008e85
 8008edc:	0800902b 	.word	0x0800902b
 8008ee0:	08008e85 	.word	0x08008e85
 8008ee4:	08008f33 	.word	0x08008f33
 8008ee8:	08008e85 	.word	0x08008e85
 8008eec:	08008e85 	.word	0x08008e85
 8008ef0:	08008fcb 	.word	0x08008fcb
 8008ef4:	6833      	ldr	r3, [r6, #0]
 8008ef6:	1d1a      	adds	r2, r3, #4
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	6032      	str	r2, [r6, #0]
 8008efc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008f00:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008f04:	2301      	movs	r3, #1
 8008f06:	e09d      	b.n	8009044 <_printf_i+0x1e8>
 8008f08:	6833      	ldr	r3, [r6, #0]
 8008f0a:	6820      	ldr	r0, [r4, #0]
 8008f0c:	1d19      	adds	r1, r3, #4
 8008f0e:	6031      	str	r1, [r6, #0]
 8008f10:	0606      	lsls	r6, r0, #24
 8008f12:	d501      	bpl.n	8008f18 <_printf_i+0xbc>
 8008f14:	681d      	ldr	r5, [r3, #0]
 8008f16:	e003      	b.n	8008f20 <_printf_i+0xc4>
 8008f18:	0645      	lsls	r5, r0, #25
 8008f1a:	d5fb      	bpl.n	8008f14 <_printf_i+0xb8>
 8008f1c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008f20:	2d00      	cmp	r5, #0
 8008f22:	da03      	bge.n	8008f2c <_printf_i+0xd0>
 8008f24:	232d      	movs	r3, #45	@ 0x2d
 8008f26:	426d      	negs	r5, r5
 8008f28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f2c:	4859      	ldr	r0, [pc, #356]	@ (8009094 <_printf_i+0x238>)
 8008f2e:	230a      	movs	r3, #10
 8008f30:	e011      	b.n	8008f56 <_printf_i+0xfa>
 8008f32:	6821      	ldr	r1, [r4, #0]
 8008f34:	6833      	ldr	r3, [r6, #0]
 8008f36:	0608      	lsls	r0, r1, #24
 8008f38:	f853 5b04 	ldr.w	r5, [r3], #4
 8008f3c:	d402      	bmi.n	8008f44 <_printf_i+0xe8>
 8008f3e:	0649      	lsls	r1, r1, #25
 8008f40:	bf48      	it	mi
 8008f42:	b2ad      	uxthmi	r5, r5
 8008f44:	2f6f      	cmp	r7, #111	@ 0x6f
 8008f46:	4853      	ldr	r0, [pc, #332]	@ (8009094 <_printf_i+0x238>)
 8008f48:	6033      	str	r3, [r6, #0]
 8008f4a:	bf14      	ite	ne
 8008f4c:	230a      	movne	r3, #10
 8008f4e:	2308      	moveq	r3, #8
 8008f50:	2100      	movs	r1, #0
 8008f52:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008f56:	6866      	ldr	r6, [r4, #4]
 8008f58:	60a6      	str	r6, [r4, #8]
 8008f5a:	2e00      	cmp	r6, #0
 8008f5c:	bfa2      	ittt	ge
 8008f5e:	6821      	ldrge	r1, [r4, #0]
 8008f60:	f021 0104 	bicge.w	r1, r1, #4
 8008f64:	6021      	strge	r1, [r4, #0]
 8008f66:	b90d      	cbnz	r5, 8008f6c <_printf_i+0x110>
 8008f68:	2e00      	cmp	r6, #0
 8008f6a:	d04b      	beq.n	8009004 <_printf_i+0x1a8>
 8008f6c:	4616      	mov	r6, r2
 8008f6e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008f72:	fb03 5711 	mls	r7, r3, r1, r5
 8008f76:	5dc7      	ldrb	r7, [r0, r7]
 8008f78:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008f7c:	462f      	mov	r7, r5
 8008f7e:	42bb      	cmp	r3, r7
 8008f80:	460d      	mov	r5, r1
 8008f82:	d9f4      	bls.n	8008f6e <_printf_i+0x112>
 8008f84:	2b08      	cmp	r3, #8
 8008f86:	d10b      	bne.n	8008fa0 <_printf_i+0x144>
 8008f88:	6823      	ldr	r3, [r4, #0]
 8008f8a:	07df      	lsls	r7, r3, #31
 8008f8c:	d508      	bpl.n	8008fa0 <_printf_i+0x144>
 8008f8e:	6923      	ldr	r3, [r4, #16]
 8008f90:	6861      	ldr	r1, [r4, #4]
 8008f92:	4299      	cmp	r1, r3
 8008f94:	bfde      	ittt	le
 8008f96:	2330      	movle	r3, #48	@ 0x30
 8008f98:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008f9c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008fa0:	1b92      	subs	r2, r2, r6
 8008fa2:	6122      	str	r2, [r4, #16]
 8008fa4:	f8cd a000 	str.w	sl, [sp]
 8008fa8:	464b      	mov	r3, r9
 8008faa:	aa03      	add	r2, sp, #12
 8008fac:	4621      	mov	r1, r4
 8008fae:	4640      	mov	r0, r8
 8008fb0:	f7ff fee6 	bl	8008d80 <_printf_common>
 8008fb4:	3001      	adds	r0, #1
 8008fb6:	d14a      	bne.n	800904e <_printf_i+0x1f2>
 8008fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fbc:	b004      	add	sp, #16
 8008fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fc2:	6823      	ldr	r3, [r4, #0]
 8008fc4:	f043 0320 	orr.w	r3, r3, #32
 8008fc8:	6023      	str	r3, [r4, #0]
 8008fca:	4833      	ldr	r0, [pc, #204]	@ (8009098 <_printf_i+0x23c>)
 8008fcc:	2778      	movs	r7, #120	@ 0x78
 8008fce:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008fd2:	6823      	ldr	r3, [r4, #0]
 8008fd4:	6831      	ldr	r1, [r6, #0]
 8008fd6:	061f      	lsls	r7, r3, #24
 8008fd8:	f851 5b04 	ldr.w	r5, [r1], #4
 8008fdc:	d402      	bmi.n	8008fe4 <_printf_i+0x188>
 8008fde:	065f      	lsls	r7, r3, #25
 8008fe0:	bf48      	it	mi
 8008fe2:	b2ad      	uxthmi	r5, r5
 8008fe4:	6031      	str	r1, [r6, #0]
 8008fe6:	07d9      	lsls	r1, r3, #31
 8008fe8:	bf44      	itt	mi
 8008fea:	f043 0320 	orrmi.w	r3, r3, #32
 8008fee:	6023      	strmi	r3, [r4, #0]
 8008ff0:	b11d      	cbz	r5, 8008ffa <_printf_i+0x19e>
 8008ff2:	2310      	movs	r3, #16
 8008ff4:	e7ac      	b.n	8008f50 <_printf_i+0xf4>
 8008ff6:	4827      	ldr	r0, [pc, #156]	@ (8009094 <_printf_i+0x238>)
 8008ff8:	e7e9      	b.n	8008fce <_printf_i+0x172>
 8008ffa:	6823      	ldr	r3, [r4, #0]
 8008ffc:	f023 0320 	bic.w	r3, r3, #32
 8009000:	6023      	str	r3, [r4, #0]
 8009002:	e7f6      	b.n	8008ff2 <_printf_i+0x196>
 8009004:	4616      	mov	r6, r2
 8009006:	e7bd      	b.n	8008f84 <_printf_i+0x128>
 8009008:	6833      	ldr	r3, [r6, #0]
 800900a:	6825      	ldr	r5, [r4, #0]
 800900c:	6961      	ldr	r1, [r4, #20]
 800900e:	1d18      	adds	r0, r3, #4
 8009010:	6030      	str	r0, [r6, #0]
 8009012:	062e      	lsls	r6, r5, #24
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	d501      	bpl.n	800901c <_printf_i+0x1c0>
 8009018:	6019      	str	r1, [r3, #0]
 800901a:	e002      	b.n	8009022 <_printf_i+0x1c6>
 800901c:	0668      	lsls	r0, r5, #25
 800901e:	d5fb      	bpl.n	8009018 <_printf_i+0x1bc>
 8009020:	8019      	strh	r1, [r3, #0]
 8009022:	2300      	movs	r3, #0
 8009024:	6123      	str	r3, [r4, #16]
 8009026:	4616      	mov	r6, r2
 8009028:	e7bc      	b.n	8008fa4 <_printf_i+0x148>
 800902a:	6833      	ldr	r3, [r6, #0]
 800902c:	1d1a      	adds	r2, r3, #4
 800902e:	6032      	str	r2, [r6, #0]
 8009030:	681e      	ldr	r6, [r3, #0]
 8009032:	6862      	ldr	r2, [r4, #4]
 8009034:	2100      	movs	r1, #0
 8009036:	4630      	mov	r0, r6
 8009038:	f7f7 f8ea 	bl	8000210 <memchr>
 800903c:	b108      	cbz	r0, 8009042 <_printf_i+0x1e6>
 800903e:	1b80      	subs	r0, r0, r6
 8009040:	6060      	str	r0, [r4, #4]
 8009042:	6863      	ldr	r3, [r4, #4]
 8009044:	6123      	str	r3, [r4, #16]
 8009046:	2300      	movs	r3, #0
 8009048:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800904c:	e7aa      	b.n	8008fa4 <_printf_i+0x148>
 800904e:	6923      	ldr	r3, [r4, #16]
 8009050:	4632      	mov	r2, r6
 8009052:	4649      	mov	r1, r9
 8009054:	4640      	mov	r0, r8
 8009056:	47d0      	blx	sl
 8009058:	3001      	adds	r0, #1
 800905a:	d0ad      	beq.n	8008fb8 <_printf_i+0x15c>
 800905c:	6823      	ldr	r3, [r4, #0]
 800905e:	079b      	lsls	r3, r3, #30
 8009060:	d413      	bmi.n	800908a <_printf_i+0x22e>
 8009062:	68e0      	ldr	r0, [r4, #12]
 8009064:	9b03      	ldr	r3, [sp, #12]
 8009066:	4298      	cmp	r0, r3
 8009068:	bfb8      	it	lt
 800906a:	4618      	movlt	r0, r3
 800906c:	e7a6      	b.n	8008fbc <_printf_i+0x160>
 800906e:	2301      	movs	r3, #1
 8009070:	4632      	mov	r2, r6
 8009072:	4649      	mov	r1, r9
 8009074:	4640      	mov	r0, r8
 8009076:	47d0      	blx	sl
 8009078:	3001      	adds	r0, #1
 800907a:	d09d      	beq.n	8008fb8 <_printf_i+0x15c>
 800907c:	3501      	adds	r5, #1
 800907e:	68e3      	ldr	r3, [r4, #12]
 8009080:	9903      	ldr	r1, [sp, #12]
 8009082:	1a5b      	subs	r3, r3, r1
 8009084:	42ab      	cmp	r3, r5
 8009086:	dcf2      	bgt.n	800906e <_printf_i+0x212>
 8009088:	e7eb      	b.n	8009062 <_printf_i+0x206>
 800908a:	2500      	movs	r5, #0
 800908c:	f104 0619 	add.w	r6, r4, #25
 8009090:	e7f5      	b.n	800907e <_printf_i+0x222>
 8009092:	bf00      	nop
 8009094:	080096ed 	.word	0x080096ed
 8009098:	080096fe 	.word	0x080096fe

0800909c <__sflush_r>:
 800909c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80090a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090a4:	0716      	lsls	r6, r2, #28
 80090a6:	4605      	mov	r5, r0
 80090a8:	460c      	mov	r4, r1
 80090aa:	d454      	bmi.n	8009156 <__sflush_r+0xba>
 80090ac:	684b      	ldr	r3, [r1, #4]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	dc02      	bgt.n	80090b8 <__sflush_r+0x1c>
 80090b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	dd48      	ble.n	800914a <__sflush_r+0xae>
 80090b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80090ba:	2e00      	cmp	r6, #0
 80090bc:	d045      	beq.n	800914a <__sflush_r+0xae>
 80090be:	2300      	movs	r3, #0
 80090c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80090c4:	682f      	ldr	r7, [r5, #0]
 80090c6:	6a21      	ldr	r1, [r4, #32]
 80090c8:	602b      	str	r3, [r5, #0]
 80090ca:	d030      	beq.n	800912e <__sflush_r+0x92>
 80090cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80090ce:	89a3      	ldrh	r3, [r4, #12]
 80090d0:	0759      	lsls	r1, r3, #29
 80090d2:	d505      	bpl.n	80090e0 <__sflush_r+0x44>
 80090d4:	6863      	ldr	r3, [r4, #4]
 80090d6:	1ad2      	subs	r2, r2, r3
 80090d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80090da:	b10b      	cbz	r3, 80090e0 <__sflush_r+0x44>
 80090dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80090de:	1ad2      	subs	r2, r2, r3
 80090e0:	2300      	movs	r3, #0
 80090e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80090e4:	6a21      	ldr	r1, [r4, #32]
 80090e6:	4628      	mov	r0, r5
 80090e8:	47b0      	blx	r6
 80090ea:	1c43      	adds	r3, r0, #1
 80090ec:	89a3      	ldrh	r3, [r4, #12]
 80090ee:	d106      	bne.n	80090fe <__sflush_r+0x62>
 80090f0:	6829      	ldr	r1, [r5, #0]
 80090f2:	291d      	cmp	r1, #29
 80090f4:	d82b      	bhi.n	800914e <__sflush_r+0xb2>
 80090f6:	4a2a      	ldr	r2, [pc, #168]	@ (80091a0 <__sflush_r+0x104>)
 80090f8:	410a      	asrs	r2, r1
 80090fa:	07d6      	lsls	r6, r2, #31
 80090fc:	d427      	bmi.n	800914e <__sflush_r+0xb2>
 80090fe:	2200      	movs	r2, #0
 8009100:	6062      	str	r2, [r4, #4]
 8009102:	04d9      	lsls	r1, r3, #19
 8009104:	6922      	ldr	r2, [r4, #16]
 8009106:	6022      	str	r2, [r4, #0]
 8009108:	d504      	bpl.n	8009114 <__sflush_r+0x78>
 800910a:	1c42      	adds	r2, r0, #1
 800910c:	d101      	bne.n	8009112 <__sflush_r+0x76>
 800910e:	682b      	ldr	r3, [r5, #0]
 8009110:	b903      	cbnz	r3, 8009114 <__sflush_r+0x78>
 8009112:	6560      	str	r0, [r4, #84]	@ 0x54
 8009114:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009116:	602f      	str	r7, [r5, #0]
 8009118:	b1b9      	cbz	r1, 800914a <__sflush_r+0xae>
 800911a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800911e:	4299      	cmp	r1, r3
 8009120:	d002      	beq.n	8009128 <__sflush_r+0x8c>
 8009122:	4628      	mov	r0, r5
 8009124:	f7ff fbf2 	bl	800890c <_free_r>
 8009128:	2300      	movs	r3, #0
 800912a:	6363      	str	r3, [r4, #52]	@ 0x34
 800912c:	e00d      	b.n	800914a <__sflush_r+0xae>
 800912e:	2301      	movs	r3, #1
 8009130:	4628      	mov	r0, r5
 8009132:	47b0      	blx	r6
 8009134:	4602      	mov	r2, r0
 8009136:	1c50      	adds	r0, r2, #1
 8009138:	d1c9      	bne.n	80090ce <__sflush_r+0x32>
 800913a:	682b      	ldr	r3, [r5, #0]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d0c6      	beq.n	80090ce <__sflush_r+0x32>
 8009140:	2b1d      	cmp	r3, #29
 8009142:	d001      	beq.n	8009148 <__sflush_r+0xac>
 8009144:	2b16      	cmp	r3, #22
 8009146:	d11e      	bne.n	8009186 <__sflush_r+0xea>
 8009148:	602f      	str	r7, [r5, #0]
 800914a:	2000      	movs	r0, #0
 800914c:	e022      	b.n	8009194 <__sflush_r+0xf8>
 800914e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009152:	b21b      	sxth	r3, r3
 8009154:	e01b      	b.n	800918e <__sflush_r+0xf2>
 8009156:	690f      	ldr	r7, [r1, #16]
 8009158:	2f00      	cmp	r7, #0
 800915a:	d0f6      	beq.n	800914a <__sflush_r+0xae>
 800915c:	0793      	lsls	r3, r2, #30
 800915e:	680e      	ldr	r6, [r1, #0]
 8009160:	bf08      	it	eq
 8009162:	694b      	ldreq	r3, [r1, #20]
 8009164:	600f      	str	r7, [r1, #0]
 8009166:	bf18      	it	ne
 8009168:	2300      	movne	r3, #0
 800916a:	eba6 0807 	sub.w	r8, r6, r7
 800916e:	608b      	str	r3, [r1, #8]
 8009170:	f1b8 0f00 	cmp.w	r8, #0
 8009174:	dde9      	ble.n	800914a <__sflush_r+0xae>
 8009176:	6a21      	ldr	r1, [r4, #32]
 8009178:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800917a:	4643      	mov	r3, r8
 800917c:	463a      	mov	r2, r7
 800917e:	4628      	mov	r0, r5
 8009180:	47b0      	blx	r6
 8009182:	2800      	cmp	r0, #0
 8009184:	dc08      	bgt.n	8009198 <__sflush_r+0xfc>
 8009186:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800918a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800918e:	81a3      	strh	r3, [r4, #12]
 8009190:	f04f 30ff 	mov.w	r0, #4294967295
 8009194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009198:	4407      	add	r7, r0
 800919a:	eba8 0800 	sub.w	r8, r8, r0
 800919e:	e7e7      	b.n	8009170 <__sflush_r+0xd4>
 80091a0:	dfbffffe 	.word	0xdfbffffe

080091a4 <_fflush_r>:
 80091a4:	b538      	push	{r3, r4, r5, lr}
 80091a6:	690b      	ldr	r3, [r1, #16]
 80091a8:	4605      	mov	r5, r0
 80091aa:	460c      	mov	r4, r1
 80091ac:	b913      	cbnz	r3, 80091b4 <_fflush_r+0x10>
 80091ae:	2500      	movs	r5, #0
 80091b0:	4628      	mov	r0, r5
 80091b2:	bd38      	pop	{r3, r4, r5, pc}
 80091b4:	b118      	cbz	r0, 80091be <_fflush_r+0x1a>
 80091b6:	6a03      	ldr	r3, [r0, #32]
 80091b8:	b90b      	cbnz	r3, 80091be <_fflush_r+0x1a>
 80091ba:	f7ff fa8b 	bl	80086d4 <__sinit>
 80091be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d0f3      	beq.n	80091ae <_fflush_r+0xa>
 80091c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80091c8:	07d0      	lsls	r0, r2, #31
 80091ca:	d404      	bmi.n	80091d6 <_fflush_r+0x32>
 80091cc:	0599      	lsls	r1, r3, #22
 80091ce:	d402      	bmi.n	80091d6 <_fflush_r+0x32>
 80091d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091d2:	f7ff fb84 	bl	80088de <__retarget_lock_acquire_recursive>
 80091d6:	4628      	mov	r0, r5
 80091d8:	4621      	mov	r1, r4
 80091da:	f7ff ff5f 	bl	800909c <__sflush_r>
 80091de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80091e0:	07da      	lsls	r2, r3, #31
 80091e2:	4605      	mov	r5, r0
 80091e4:	d4e4      	bmi.n	80091b0 <_fflush_r+0xc>
 80091e6:	89a3      	ldrh	r3, [r4, #12]
 80091e8:	059b      	lsls	r3, r3, #22
 80091ea:	d4e1      	bmi.n	80091b0 <_fflush_r+0xc>
 80091ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091ee:	f7ff fb77 	bl	80088e0 <__retarget_lock_release_recursive>
 80091f2:	e7dd      	b.n	80091b0 <_fflush_r+0xc>

080091f4 <__swbuf_r>:
 80091f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091f6:	460e      	mov	r6, r1
 80091f8:	4614      	mov	r4, r2
 80091fa:	4605      	mov	r5, r0
 80091fc:	b118      	cbz	r0, 8009206 <__swbuf_r+0x12>
 80091fe:	6a03      	ldr	r3, [r0, #32]
 8009200:	b90b      	cbnz	r3, 8009206 <__swbuf_r+0x12>
 8009202:	f7ff fa67 	bl	80086d4 <__sinit>
 8009206:	69a3      	ldr	r3, [r4, #24]
 8009208:	60a3      	str	r3, [r4, #8]
 800920a:	89a3      	ldrh	r3, [r4, #12]
 800920c:	071a      	lsls	r2, r3, #28
 800920e:	d501      	bpl.n	8009214 <__swbuf_r+0x20>
 8009210:	6923      	ldr	r3, [r4, #16]
 8009212:	b943      	cbnz	r3, 8009226 <__swbuf_r+0x32>
 8009214:	4621      	mov	r1, r4
 8009216:	4628      	mov	r0, r5
 8009218:	f000 f82a 	bl	8009270 <__swsetup_r>
 800921c:	b118      	cbz	r0, 8009226 <__swbuf_r+0x32>
 800921e:	f04f 37ff 	mov.w	r7, #4294967295
 8009222:	4638      	mov	r0, r7
 8009224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009226:	6823      	ldr	r3, [r4, #0]
 8009228:	6922      	ldr	r2, [r4, #16]
 800922a:	1a98      	subs	r0, r3, r2
 800922c:	6963      	ldr	r3, [r4, #20]
 800922e:	b2f6      	uxtb	r6, r6
 8009230:	4283      	cmp	r3, r0
 8009232:	4637      	mov	r7, r6
 8009234:	dc05      	bgt.n	8009242 <__swbuf_r+0x4e>
 8009236:	4621      	mov	r1, r4
 8009238:	4628      	mov	r0, r5
 800923a:	f7ff ffb3 	bl	80091a4 <_fflush_r>
 800923e:	2800      	cmp	r0, #0
 8009240:	d1ed      	bne.n	800921e <__swbuf_r+0x2a>
 8009242:	68a3      	ldr	r3, [r4, #8]
 8009244:	3b01      	subs	r3, #1
 8009246:	60a3      	str	r3, [r4, #8]
 8009248:	6823      	ldr	r3, [r4, #0]
 800924a:	1c5a      	adds	r2, r3, #1
 800924c:	6022      	str	r2, [r4, #0]
 800924e:	701e      	strb	r6, [r3, #0]
 8009250:	6962      	ldr	r2, [r4, #20]
 8009252:	1c43      	adds	r3, r0, #1
 8009254:	429a      	cmp	r2, r3
 8009256:	d004      	beq.n	8009262 <__swbuf_r+0x6e>
 8009258:	89a3      	ldrh	r3, [r4, #12]
 800925a:	07db      	lsls	r3, r3, #31
 800925c:	d5e1      	bpl.n	8009222 <__swbuf_r+0x2e>
 800925e:	2e0a      	cmp	r6, #10
 8009260:	d1df      	bne.n	8009222 <__swbuf_r+0x2e>
 8009262:	4621      	mov	r1, r4
 8009264:	4628      	mov	r0, r5
 8009266:	f7ff ff9d 	bl	80091a4 <_fflush_r>
 800926a:	2800      	cmp	r0, #0
 800926c:	d0d9      	beq.n	8009222 <__swbuf_r+0x2e>
 800926e:	e7d6      	b.n	800921e <__swbuf_r+0x2a>

08009270 <__swsetup_r>:
 8009270:	b538      	push	{r3, r4, r5, lr}
 8009272:	4b29      	ldr	r3, [pc, #164]	@ (8009318 <__swsetup_r+0xa8>)
 8009274:	4605      	mov	r5, r0
 8009276:	6818      	ldr	r0, [r3, #0]
 8009278:	460c      	mov	r4, r1
 800927a:	b118      	cbz	r0, 8009284 <__swsetup_r+0x14>
 800927c:	6a03      	ldr	r3, [r0, #32]
 800927e:	b90b      	cbnz	r3, 8009284 <__swsetup_r+0x14>
 8009280:	f7ff fa28 	bl	80086d4 <__sinit>
 8009284:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009288:	0719      	lsls	r1, r3, #28
 800928a:	d422      	bmi.n	80092d2 <__swsetup_r+0x62>
 800928c:	06da      	lsls	r2, r3, #27
 800928e:	d407      	bmi.n	80092a0 <__swsetup_r+0x30>
 8009290:	2209      	movs	r2, #9
 8009292:	602a      	str	r2, [r5, #0]
 8009294:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009298:	81a3      	strh	r3, [r4, #12]
 800929a:	f04f 30ff 	mov.w	r0, #4294967295
 800929e:	e033      	b.n	8009308 <__swsetup_r+0x98>
 80092a0:	0758      	lsls	r0, r3, #29
 80092a2:	d512      	bpl.n	80092ca <__swsetup_r+0x5a>
 80092a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80092a6:	b141      	cbz	r1, 80092ba <__swsetup_r+0x4a>
 80092a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80092ac:	4299      	cmp	r1, r3
 80092ae:	d002      	beq.n	80092b6 <__swsetup_r+0x46>
 80092b0:	4628      	mov	r0, r5
 80092b2:	f7ff fb2b 	bl	800890c <_free_r>
 80092b6:	2300      	movs	r3, #0
 80092b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80092ba:	89a3      	ldrh	r3, [r4, #12]
 80092bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80092c0:	81a3      	strh	r3, [r4, #12]
 80092c2:	2300      	movs	r3, #0
 80092c4:	6063      	str	r3, [r4, #4]
 80092c6:	6923      	ldr	r3, [r4, #16]
 80092c8:	6023      	str	r3, [r4, #0]
 80092ca:	89a3      	ldrh	r3, [r4, #12]
 80092cc:	f043 0308 	orr.w	r3, r3, #8
 80092d0:	81a3      	strh	r3, [r4, #12]
 80092d2:	6923      	ldr	r3, [r4, #16]
 80092d4:	b94b      	cbnz	r3, 80092ea <__swsetup_r+0x7a>
 80092d6:	89a3      	ldrh	r3, [r4, #12]
 80092d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80092dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092e0:	d003      	beq.n	80092ea <__swsetup_r+0x7a>
 80092e2:	4621      	mov	r1, r4
 80092e4:	4628      	mov	r0, r5
 80092e6:	f000 f893 	bl	8009410 <__smakebuf_r>
 80092ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092ee:	f013 0201 	ands.w	r2, r3, #1
 80092f2:	d00a      	beq.n	800930a <__swsetup_r+0x9a>
 80092f4:	2200      	movs	r2, #0
 80092f6:	60a2      	str	r2, [r4, #8]
 80092f8:	6962      	ldr	r2, [r4, #20]
 80092fa:	4252      	negs	r2, r2
 80092fc:	61a2      	str	r2, [r4, #24]
 80092fe:	6922      	ldr	r2, [r4, #16]
 8009300:	b942      	cbnz	r2, 8009314 <__swsetup_r+0xa4>
 8009302:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009306:	d1c5      	bne.n	8009294 <__swsetup_r+0x24>
 8009308:	bd38      	pop	{r3, r4, r5, pc}
 800930a:	0799      	lsls	r1, r3, #30
 800930c:	bf58      	it	pl
 800930e:	6962      	ldrpl	r2, [r4, #20]
 8009310:	60a2      	str	r2, [r4, #8]
 8009312:	e7f4      	b.n	80092fe <__swsetup_r+0x8e>
 8009314:	2000      	movs	r0, #0
 8009316:	e7f7      	b.n	8009308 <__swsetup_r+0x98>
 8009318:	20000028 	.word	0x20000028

0800931c <_raise_r>:
 800931c:	291f      	cmp	r1, #31
 800931e:	b538      	push	{r3, r4, r5, lr}
 8009320:	4605      	mov	r5, r0
 8009322:	460c      	mov	r4, r1
 8009324:	d904      	bls.n	8009330 <_raise_r+0x14>
 8009326:	2316      	movs	r3, #22
 8009328:	6003      	str	r3, [r0, #0]
 800932a:	f04f 30ff 	mov.w	r0, #4294967295
 800932e:	bd38      	pop	{r3, r4, r5, pc}
 8009330:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009332:	b112      	cbz	r2, 800933a <_raise_r+0x1e>
 8009334:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009338:	b94b      	cbnz	r3, 800934e <_raise_r+0x32>
 800933a:	4628      	mov	r0, r5
 800933c:	f000 f830 	bl	80093a0 <_getpid_r>
 8009340:	4622      	mov	r2, r4
 8009342:	4601      	mov	r1, r0
 8009344:	4628      	mov	r0, r5
 8009346:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800934a:	f000 b817 	b.w	800937c <_kill_r>
 800934e:	2b01      	cmp	r3, #1
 8009350:	d00a      	beq.n	8009368 <_raise_r+0x4c>
 8009352:	1c59      	adds	r1, r3, #1
 8009354:	d103      	bne.n	800935e <_raise_r+0x42>
 8009356:	2316      	movs	r3, #22
 8009358:	6003      	str	r3, [r0, #0]
 800935a:	2001      	movs	r0, #1
 800935c:	e7e7      	b.n	800932e <_raise_r+0x12>
 800935e:	2100      	movs	r1, #0
 8009360:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009364:	4620      	mov	r0, r4
 8009366:	4798      	blx	r3
 8009368:	2000      	movs	r0, #0
 800936a:	e7e0      	b.n	800932e <_raise_r+0x12>

0800936c <raise>:
 800936c:	4b02      	ldr	r3, [pc, #8]	@ (8009378 <raise+0xc>)
 800936e:	4601      	mov	r1, r0
 8009370:	6818      	ldr	r0, [r3, #0]
 8009372:	f7ff bfd3 	b.w	800931c <_raise_r>
 8009376:	bf00      	nop
 8009378:	20000028 	.word	0x20000028

0800937c <_kill_r>:
 800937c:	b538      	push	{r3, r4, r5, lr}
 800937e:	4d07      	ldr	r5, [pc, #28]	@ (800939c <_kill_r+0x20>)
 8009380:	2300      	movs	r3, #0
 8009382:	4604      	mov	r4, r0
 8009384:	4608      	mov	r0, r1
 8009386:	4611      	mov	r1, r2
 8009388:	602b      	str	r3, [r5, #0]
 800938a:	f7f7 ffbd 	bl	8001308 <_kill>
 800938e:	1c43      	adds	r3, r0, #1
 8009390:	d102      	bne.n	8009398 <_kill_r+0x1c>
 8009392:	682b      	ldr	r3, [r5, #0]
 8009394:	b103      	cbz	r3, 8009398 <_kill_r+0x1c>
 8009396:	6023      	str	r3, [r4, #0]
 8009398:	bd38      	pop	{r3, r4, r5, pc}
 800939a:	bf00      	nop
 800939c:	20004c7c 	.word	0x20004c7c

080093a0 <_getpid_r>:
 80093a0:	f7f7 bfaa 	b.w	80012f8 <_getpid>

080093a4 <_sbrk_r>:
 80093a4:	b538      	push	{r3, r4, r5, lr}
 80093a6:	4d06      	ldr	r5, [pc, #24]	@ (80093c0 <_sbrk_r+0x1c>)
 80093a8:	2300      	movs	r3, #0
 80093aa:	4604      	mov	r4, r0
 80093ac:	4608      	mov	r0, r1
 80093ae:	602b      	str	r3, [r5, #0]
 80093b0:	f7f8 f832 	bl	8001418 <_sbrk>
 80093b4:	1c43      	adds	r3, r0, #1
 80093b6:	d102      	bne.n	80093be <_sbrk_r+0x1a>
 80093b8:	682b      	ldr	r3, [r5, #0]
 80093ba:	b103      	cbz	r3, 80093be <_sbrk_r+0x1a>
 80093bc:	6023      	str	r3, [r4, #0]
 80093be:	bd38      	pop	{r3, r4, r5, pc}
 80093c0:	20004c7c 	.word	0x20004c7c

080093c4 <__swhatbuf_r>:
 80093c4:	b570      	push	{r4, r5, r6, lr}
 80093c6:	460c      	mov	r4, r1
 80093c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093cc:	2900      	cmp	r1, #0
 80093ce:	b096      	sub	sp, #88	@ 0x58
 80093d0:	4615      	mov	r5, r2
 80093d2:	461e      	mov	r6, r3
 80093d4:	da0d      	bge.n	80093f2 <__swhatbuf_r+0x2e>
 80093d6:	89a3      	ldrh	r3, [r4, #12]
 80093d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80093dc:	f04f 0100 	mov.w	r1, #0
 80093e0:	bf14      	ite	ne
 80093e2:	2340      	movne	r3, #64	@ 0x40
 80093e4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80093e8:	2000      	movs	r0, #0
 80093ea:	6031      	str	r1, [r6, #0]
 80093ec:	602b      	str	r3, [r5, #0]
 80093ee:	b016      	add	sp, #88	@ 0x58
 80093f0:	bd70      	pop	{r4, r5, r6, pc}
 80093f2:	466a      	mov	r2, sp
 80093f4:	f000 f848 	bl	8009488 <_fstat_r>
 80093f8:	2800      	cmp	r0, #0
 80093fa:	dbec      	blt.n	80093d6 <__swhatbuf_r+0x12>
 80093fc:	9901      	ldr	r1, [sp, #4]
 80093fe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009402:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009406:	4259      	negs	r1, r3
 8009408:	4159      	adcs	r1, r3
 800940a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800940e:	e7eb      	b.n	80093e8 <__swhatbuf_r+0x24>

08009410 <__smakebuf_r>:
 8009410:	898b      	ldrh	r3, [r1, #12]
 8009412:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009414:	079d      	lsls	r5, r3, #30
 8009416:	4606      	mov	r6, r0
 8009418:	460c      	mov	r4, r1
 800941a:	d507      	bpl.n	800942c <__smakebuf_r+0x1c>
 800941c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009420:	6023      	str	r3, [r4, #0]
 8009422:	6123      	str	r3, [r4, #16]
 8009424:	2301      	movs	r3, #1
 8009426:	6163      	str	r3, [r4, #20]
 8009428:	b003      	add	sp, #12
 800942a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800942c:	ab01      	add	r3, sp, #4
 800942e:	466a      	mov	r2, sp
 8009430:	f7ff ffc8 	bl	80093c4 <__swhatbuf_r>
 8009434:	9f00      	ldr	r7, [sp, #0]
 8009436:	4605      	mov	r5, r0
 8009438:	4639      	mov	r1, r7
 800943a:	4630      	mov	r0, r6
 800943c:	f7ff fad2 	bl	80089e4 <_malloc_r>
 8009440:	b948      	cbnz	r0, 8009456 <__smakebuf_r+0x46>
 8009442:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009446:	059a      	lsls	r2, r3, #22
 8009448:	d4ee      	bmi.n	8009428 <__smakebuf_r+0x18>
 800944a:	f023 0303 	bic.w	r3, r3, #3
 800944e:	f043 0302 	orr.w	r3, r3, #2
 8009452:	81a3      	strh	r3, [r4, #12]
 8009454:	e7e2      	b.n	800941c <__smakebuf_r+0xc>
 8009456:	89a3      	ldrh	r3, [r4, #12]
 8009458:	6020      	str	r0, [r4, #0]
 800945a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800945e:	81a3      	strh	r3, [r4, #12]
 8009460:	9b01      	ldr	r3, [sp, #4]
 8009462:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009466:	b15b      	cbz	r3, 8009480 <__smakebuf_r+0x70>
 8009468:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800946c:	4630      	mov	r0, r6
 800946e:	f000 f81d 	bl	80094ac <_isatty_r>
 8009472:	b128      	cbz	r0, 8009480 <__smakebuf_r+0x70>
 8009474:	89a3      	ldrh	r3, [r4, #12]
 8009476:	f023 0303 	bic.w	r3, r3, #3
 800947a:	f043 0301 	orr.w	r3, r3, #1
 800947e:	81a3      	strh	r3, [r4, #12]
 8009480:	89a3      	ldrh	r3, [r4, #12]
 8009482:	431d      	orrs	r5, r3
 8009484:	81a5      	strh	r5, [r4, #12]
 8009486:	e7cf      	b.n	8009428 <__smakebuf_r+0x18>

08009488 <_fstat_r>:
 8009488:	b538      	push	{r3, r4, r5, lr}
 800948a:	4d07      	ldr	r5, [pc, #28]	@ (80094a8 <_fstat_r+0x20>)
 800948c:	2300      	movs	r3, #0
 800948e:	4604      	mov	r4, r0
 8009490:	4608      	mov	r0, r1
 8009492:	4611      	mov	r1, r2
 8009494:	602b      	str	r3, [r5, #0]
 8009496:	f7f7 ff97 	bl	80013c8 <_fstat>
 800949a:	1c43      	adds	r3, r0, #1
 800949c:	d102      	bne.n	80094a4 <_fstat_r+0x1c>
 800949e:	682b      	ldr	r3, [r5, #0]
 80094a0:	b103      	cbz	r3, 80094a4 <_fstat_r+0x1c>
 80094a2:	6023      	str	r3, [r4, #0]
 80094a4:	bd38      	pop	{r3, r4, r5, pc}
 80094a6:	bf00      	nop
 80094a8:	20004c7c 	.word	0x20004c7c

080094ac <_isatty_r>:
 80094ac:	b538      	push	{r3, r4, r5, lr}
 80094ae:	4d06      	ldr	r5, [pc, #24]	@ (80094c8 <_isatty_r+0x1c>)
 80094b0:	2300      	movs	r3, #0
 80094b2:	4604      	mov	r4, r0
 80094b4:	4608      	mov	r0, r1
 80094b6:	602b      	str	r3, [r5, #0]
 80094b8:	f7f7 ff96 	bl	80013e8 <_isatty>
 80094bc:	1c43      	adds	r3, r0, #1
 80094be:	d102      	bne.n	80094c6 <_isatty_r+0x1a>
 80094c0:	682b      	ldr	r3, [r5, #0]
 80094c2:	b103      	cbz	r3, 80094c6 <_isatty_r+0x1a>
 80094c4:	6023      	str	r3, [r4, #0]
 80094c6:	bd38      	pop	{r3, r4, r5, pc}
 80094c8:	20004c7c 	.word	0x20004c7c

080094cc <_init>:
 80094cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ce:	bf00      	nop
 80094d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094d2:	bc08      	pop	{r3}
 80094d4:	469e      	mov	lr, r3
 80094d6:	4770      	bx	lr

080094d8 <_fini>:
 80094d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094da:	bf00      	nop
 80094dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094de:	bc08      	pop	{r3}
 80094e0:	469e      	mov	lr, r3
 80094e2:	4770      	bx	lr
