
f446re-DAWG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e74  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08007044  08007044  00008044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007154  08007154  00009018  2**0
                  CONTENTS
  4 .ARM          00000008  08007154  08007154  00008154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800715c  0800715c  00009018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800715c  0800715c  0000815c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007160  08007160  00008160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08007164  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004acc  20000018  0800717c  00009018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004ae4  0800717c  00009ae4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a923  00000000  00000000  00009048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037fe  00000000  00000000  0002396b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017a8  00000000  00000000  00027170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001297  00000000  00000000  00028918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003513  00000000  00000000  00029baf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ba67  00000000  00000000  0002d0c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd5d8  00000000  00000000  00048b29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00126101  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000652c  00000000  00000000  00126144  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  0012c670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000018 	.word	0x20000018
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800702c 	.word	0x0800702c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000001c 	.word	0x2000001c
 800020c:	0800702c 	.word	0x0800702c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <blue_button_clicked>:
/* USER CODE BEGIN PFP */
uint8_t USART_RX_BUFFER[1] = {0x00};

uint8_t data[] = "BTN\n";
void blue_button_clicked()
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	HAL_UART_Transmit (&huart2, data, sizeof (data), 10);
 8000504:	230a      	movs	r3, #10
 8000506:	2205      	movs	r2, #5
 8000508:	4902      	ldr	r1, [pc, #8]	@ (8000514 <blue_button_clicked+0x14>)
 800050a:	4803      	ldr	r0, [pc, #12]	@ (8000518 <blue_button_clicked+0x18>)
 800050c:	f002 fd46 	bl	8002f9c <HAL_UART_Transmit>
}
 8000510:	bf00      	nop
 8000512:	bd80      	pop	{r7, pc}
 8000514:	20000000 	.word	0x20000000
 8000518:	20000088 	.word	0x20000088

0800051c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	4603      	mov	r3, r0
 8000524:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B1_Pin)
 8000526:	88fb      	ldrh	r3, [r7, #6]
 8000528:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800052c:	d101      	bne.n	8000532 <HAL_GPIO_EXTI_Callback+0x16>
	{
		blue_button_clicked();
 800052e:	f7ff ffe7 	bl	8000500 <blue_button_clicked>
	}
}
 8000532:	bf00      	nop
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
	...

0800053c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,1);
 8000544:	2201      	movs	r2, #1
 8000546:	2120      	movs	r1, #32
 8000548:	4805      	ldr	r0, [pc, #20]	@ (8000560 <HAL_UART_RxCpltCallback+0x24>)
 800054a:	f001 faa5 	bl	8001a98 <HAL_GPIO_WritePin>
    HAL_UART_Receive_DMA (&huart2, USART_RX_BUFFER, 1);
 800054e:	2201      	movs	r2, #1
 8000550:	4904      	ldr	r1, [pc, #16]	@ (8000564 <HAL_UART_RxCpltCallback+0x28>)
 8000552:	4805      	ldr	r0, [pc, #20]	@ (8000568 <HAL_UART_RxCpltCallback+0x2c>)
 8000554:	f002 fdad 	bl	80030b2 <HAL_UART_Receive_DMA>
}
 8000558:	bf00      	nop
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	40020000 	.word	0x40020000
 8000564:	20000144 	.word	0x20000144
 8000568:	20000088 	.word	0x20000088

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000570:	f000 fbd8 	bl	8000d24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000574:	f000 f85a 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000578:	f000 f93c 	bl	80007f4 <MX_GPIO_Init>
  MX_DMA_Init();
 800057c:	f000 f91a 	bl	80007b4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000580:	f000 f8ee 	bl	8000760 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000584:	f000 f8be 	bl	8000704 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA (&huart2, USART_RX_BUFFER, 1);
 8000588:	2201      	movs	r2, #1
 800058a:	4919      	ldr	r1, [pc, #100]	@ (80005f0 <main+0x84>)
 800058c:	4819      	ldr	r0, [pc, #100]	@ (80005f4 <main+0x88>)
 800058e:	f002 fd90 	bl	80030b2 <HAL_UART_Receive_DMA>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000592:	f003 fedf 	bl	8004354 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of TX_queue */
  TX_queueHandle = osMessageQueueNew (128, sizeof(uint8_t), &TX_queue_attributes);
 8000596:	4a18      	ldr	r2, [pc, #96]	@ (80005f8 <main+0x8c>)
 8000598:	2101      	movs	r1, #1
 800059a:	2080      	movs	r0, #128	@ 0x80
 800059c:	f003 ffd1 	bl	8004542 <osMessageQueueNew>
 80005a0:	4603      	mov	r3, r0
 80005a2:	4a16      	ldr	r2, [pc, #88]	@ (80005fc <main+0x90>)
 80005a4:	6013      	str	r3, [r2, #0]

  /* creation of RX_queue */
  RX_queueHandle = osMessageQueueNew (64, sizeof(uint8_t), &RX_queue_attributes);
 80005a6:	4a16      	ldr	r2, [pc, #88]	@ (8000600 <main+0x94>)
 80005a8:	2101      	movs	r1, #1
 80005aa:	2040      	movs	r0, #64	@ 0x40
 80005ac:	f003 ffc9 	bl	8004542 <osMessageQueueNew>
 80005b0:	4603      	mov	r3, r0
 80005b2:	4a14      	ldr	r2, [pc, #80]	@ (8000604 <main+0x98>)
 80005b4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of heartbeat */
  heartbeatHandle = osThreadNew(StartDefaultTask, NULL, &heartbeat_attributes);
 80005b6:	4a14      	ldr	r2, [pc, #80]	@ (8000608 <main+0x9c>)
 80005b8:	2100      	movs	r1, #0
 80005ba:	4814      	ldr	r0, [pc, #80]	@ (800060c <main+0xa0>)
 80005bc:	f003 ff14 	bl	80043e8 <osThreadNew>
 80005c0:	4603      	mov	r3, r0
 80005c2:	4a13      	ldr	r2, [pc, #76]	@ (8000610 <main+0xa4>)
 80005c4:	6013      	str	r3, [r2, #0]

  /* creation of TX_transmit */
  TX_transmitHandle = osThreadNew(StartTask02, NULL, &TX_transmit_attributes);
 80005c6:	4a13      	ldr	r2, [pc, #76]	@ (8000614 <main+0xa8>)
 80005c8:	2100      	movs	r1, #0
 80005ca:	4813      	ldr	r0, [pc, #76]	@ (8000618 <main+0xac>)
 80005cc:	f003 ff0c 	bl	80043e8 <osThreadNew>
 80005d0:	4603      	mov	r3, r0
 80005d2:	4a12      	ldr	r2, [pc, #72]	@ (800061c <main+0xb0>)
 80005d4:	6013      	str	r3, [r2, #0]

  /* creation of RX_USART */
  RX_USARTHandle = osThreadNew(StartTask03, NULL, &RX_USART_attributes);
 80005d6:	4a12      	ldr	r2, [pc, #72]	@ (8000620 <main+0xb4>)
 80005d8:	2100      	movs	r1, #0
 80005da:	4812      	ldr	r0, [pc, #72]	@ (8000624 <main+0xb8>)
 80005dc:	f003 ff04 	bl	80043e8 <osThreadNew>
 80005e0:	4603      	mov	r3, r0
 80005e2:	4a11      	ldr	r2, [pc, #68]	@ (8000628 <main+0xbc>)
 80005e4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005e6:	f003 fed9 	bl	800439c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ea:	bf00      	nop
 80005ec:	e7fd      	b.n	80005ea <main+0x7e>
 80005ee:	bf00      	nop
 80005f0:	20000144 	.word	0x20000144
 80005f4:	20000088 	.word	0x20000088
 80005f8:	08007104 	.word	0x08007104
 80005fc:	2000013c 	.word	0x2000013c
 8000600:	0800711c 	.word	0x0800711c
 8000604:	20000140 	.word	0x20000140
 8000608:	08007098 	.word	0x08007098
 800060c:	080008e1 	.word	0x080008e1
 8000610:	20000130 	.word	0x20000130
 8000614:	080070bc 	.word	0x080070bc
 8000618:	080008f3 	.word	0x080008f3
 800061c:	20000134 	.word	0x20000134
 8000620:	080070e0 	.word	0x080070e0
 8000624:	08000903 	.word	0x08000903
 8000628:	20000138 	.word	0x20000138

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b094      	sub	sp, #80	@ 0x50
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 031c 	add.w	r3, r7, #28
 8000636:	2234      	movs	r2, #52	@ 0x34
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f006 fcbc 	bl	8006fb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 0308 	add.w	r3, r7, #8
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000650:	2300      	movs	r3, #0
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	4b29      	ldr	r3, [pc, #164]	@ (80006fc <SystemClock_Config+0xd0>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000658:	4a28      	ldr	r2, [pc, #160]	@ (80006fc <SystemClock_Config+0xd0>)
 800065a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800065e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000660:	4b26      	ldr	r3, [pc, #152]	@ (80006fc <SystemClock_Config+0xd0>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000664:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800066c:	2300      	movs	r3, #0
 800066e:	603b      	str	r3, [r7, #0]
 8000670:	4b23      	ldr	r3, [pc, #140]	@ (8000700 <SystemClock_Config+0xd4>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a22      	ldr	r2, [pc, #136]	@ (8000700 <SystemClock_Config+0xd4>)
 8000676:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800067a:	6013      	str	r3, [r2, #0]
 800067c:	4b20      	ldr	r3, [pc, #128]	@ (8000700 <SystemClock_Config+0xd4>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000684:	603b      	str	r3, [r7, #0]
 8000686:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000688:	2302      	movs	r3, #2
 800068a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800068c:	2301      	movs	r3, #1
 800068e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000690:	2310      	movs	r3, #16
 8000692:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000694:	2302      	movs	r3, #2
 8000696:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000698:	2300      	movs	r3, #0
 800069a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800069c:	2308      	movs	r3, #8
 800069e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 80006a0:	23a0      	movs	r3, #160	@ 0xa0
 80006a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a4:	2302      	movs	r3, #2
 80006a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ac:	2302      	movs	r3, #2
 80006ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b0:	f107 031c 	add.w	r3, r7, #28
 80006b4:	4618      	mov	r0, r3
 80006b6:	f001 fee1 	bl	800247c <HAL_RCC_OscConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006c0:	f000 f93a 	bl	8000938 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c4:	230f      	movs	r3, #15
 80006c6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c8:	2302      	movs	r3, #2
 80006ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80006d6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006da:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006dc:	f107 0308 	add.w	r3, r7, #8
 80006e0:	2105      	movs	r1, #5
 80006e2:	4618      	mov	r0, r3
 80006e4:	f001 fb4e 	bl	8001d84 <HAL_RCC_ClockConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006ee:	f000 f923 	bl	8000938 <Error_Handler>
  }
}
 80006f2:	bf00      	nop
 80006f4:	3750      	adds	r7, #80	@ 0x50
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40023800 	.word	0x40023800
 8000700:	40007000 	.word	0x40007000

08000704 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000708:	4b12      	ldr	r3, [pc, #72]	@ (8000754 <MX_I2C1_Init+0x50>)
 800070a:	4a13      	ldr	r2, [pc, #76]	@ (8000758 <MX_I2C1_Init+0x54>)
 800070c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800070e:	4b11      	ldr	r3, [pc, #68]	@ (8000754 <MX_I2C1_Init+0x50>)
 8000710:	4a12      	ldr	r2, [pc, #72]	@ (800075c <MX_I2C1_Init+0x58>)
 8000712:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000714:	4b0f      	ldr	r3, [pc, #60]	@ (8000754 <MX_I2C1_Init+0x50>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800071a:	4b0e      	ldr	r3, [pc, #56]	@ (8000754 <MX_I2C1_Init+0x50>)
 800071c:	2200      	movs	r2, #0
 800071e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000720:	4b0c      	ldr	r3, [pc, #48]	@ (8000754 <MX_I2C1_Init+0x50>)
 8000722:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000726:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000728:	4b0a      	ldr	r3, [pc, #40]	@ (8000754 <MX_I2C1_Init+0x50>)
 800072a:	2200      	movs	r2, #0
 800072c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800072e:	4b09      	ldr	r3, [pc, #36]	@ (8000754 <MX_I2C1_Init+0x50>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000734:	4b07      	ldr	r3, [pc, #28]	@ (8000754 <MX_I2C1_Init+0x50>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800073a:	4b06      	ldr	r3, [pc, #24]	@ (8000754 <MX_I2C1_Init+0x50>)
 800073c:	2200      	movs	r2, #0
 800073e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000740:	4804      	ldr	r0, [pc, #16]	@ (8000754 <MX_I2C1_Init+0x50>)
 8000742:	f001 f9db 	bl	8001afc <HAL_I2C_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800074c:	f000 f8f4 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20000034 	.word	0x20000034
 8000758:	40005400 	.word	0x40005400
 800075c:	00061a80 	.word	0x00061a80

08000760 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000764:	4b11      	ldr	r3, [pc, #68]	@ (80007ac <MX_USART2_UART_Init+0x4c>)
 8000766:	4a12      	ldr	r2, [pc, #72]	@ (80007b0 <MX_USART2_UART_Init+0x50>)
 8000768:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800076a:	4b10      	ldr	r3, [pc, #64]	@ (80007ac <MX_USART2_UART_Init+0x4c>)
 800076c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000770:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000772:	4b0e      	ldr	r3, [pc, #56]	@ (80007ac <MX_USART2_UART_Init+0x4c>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000778:	4b0c      	ldr	r3, [pc, #48]	@ (80007ac <MX_USART2_UART_Init+0x4c>)
 800077a:	2200      	movs	r2, #0
 800077c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800077e:	4b0b      	ldr	r3, [pc, #44]	@ (80007ac <MX_USART2_UART_Init+0x4c>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000784:	4b09      	ldr	r3, [pc, #36]	@ (80007ac <MX_USART2_UART_Init+0x4c>)
 8000786:	220c      	movs	r2, #12
 8000788:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078a:	4b08      	ldr	r3, [pc, #32]	@ (80007ac <MX_USART2_UART_Init+0x4c>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000790:	4b06      	ldr	r3, [pc, #24]	@ (80007ac <MX_USART2_UART_Init+0x4c>)
 8000792:	2200      	movs	r2, #0
 8000794:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000796:	4805      	ldr	r0, [pc, #20]	@ (80007ac <MX_USART2_UART_Init+0x4c>)
 8000798:	f002 fbb0 	bl	8002efc <HAL_UART_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007a2:	f000 f8c9 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000088 	.word	0x20000088
 80007b0:	40004400 	.word	0x40004400

080007b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	4b0c      	ldr	r3, [pc, #48]	@ (80007f0 <MX_DMA_Init+0x3c>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	4a0b      	ldr	r2, [pc, #44]	@ (80007f0 <MX_DMA_Init+0x3c>)
 80007c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ca:	4b09      	ldr	r3, [pc, #36]	@ (80007f0 <MX_DMA_Init+0x3c>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2105      	movs	r1, #5
 80007da:	2010      	movs	r0, #16
 80007dc:	f000 fb9c 	bl	8000f18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80007e0:	2010      	movs	r0, #16
 80007e2:	f000 fbb5 	bl	8000f50 <HAL_NVIC_EnableIRQ>

}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40023800 	.word	0x40023800

080007f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08a      	sub	sp, #40	@ 0x28
 80007f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
 800080e:	4b31      	ldr	r3, [pc, #196]	@ (80008d4 <MX_GPIO_Init+0xe0>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	4a30      	ldr	r2, [pc, #192]	@ (80008d4 <MX_GPIO_Init+0xe0>)
 8000814:	f043 0304 	orr.w	r3, r3, #4
 8000818:	6313      	str	r3, [r2, #48]	@ 0x30
 800081a:	4b2e      	ldr	r3, [pc, #184]	@ (80008d4 <MX_GPIO_Init+0xe0>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	f003 0304 	and.w	r3, r3, #4
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	4b2a      	ldr	r3, [pc, #168]	@ (80008d4 <MX_GPIO_Init+0xe0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	4a29      	ldr	r2, [pc, #164]	@ (80008d4 <MX_GPIO_Init+0xe0>)
 8000830:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000834:	6313      	str	r3, [r2, #48]	@ 0x30
 8000836:	4b27      	ldr	r3, [pc, #156]	@ (80008d4 <MX_GPIO_Init+0xe0>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	4b23      	ldr	r3, [pc, #140]	@ (80008d4 <MX_GPIO_Init+0xe0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	4a22      	ldr	r2, [pc, #136]	@ (80008d4 <MX_GPIO_Init+0xe0>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	6313      	str	r3, [r2, #48]	@ 0x30
 8000852:	4b20      	ldr	r3, [pc, #128]	@ (80008d4 <MX_GPIO_Init+0xe0>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	4b1c      	ldr	r3, [pc, #112]	@ (80008d4 <MX_GPIO_Init+0xe0>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a1b      	ldr	r2, [pc, #108]	@ (80008d4 <MX_GPIO_Init+0xe0>)
 8000868:	f043 0302 	orr.w	r3, r3, #2
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b19      	ldr	r3, [pc, #100]	@ (80008d4 <MX_GPIO_Init+0xe0>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0302 	and.w	r3, r3, #2
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	2120      	movs	r1, #32
 800087e:	4816      	ldr	r0, [pc, #88]	@ (80008d8 <MX_GPIO_Init+0xe4>)
 8000880:	f001 f90a 	bl	8001a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000884:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000888:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800088a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800088e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	4619      	mov	r1, r3
 800089a:	4810      	ldr	r0, [pc, #64]	@ (80008dc <MX_GPIO_Init+0xe8>)
 800089c:	f000 ff68 	bl	8001770 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80008a0:	2320      	movs	r3, #32
 80008a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a4:	2301      	movs	r3, #1
 80008a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	4619      	mov	r1, r3
 80008b6:	4808      	ldr	r0, [pc, #32]	@ (80008d8 <MX_GPIO_Init+0xe4>)
 80008b8:	f000 ff5a 	bl	8001770 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80008bc:	2200      	movs	r2, #0
 80008be:	2105      	movs	r1, #5
 80008c0:	2028      	movs	r0, #40	@ 0x28
 80008c2:	f000 fb29 	bl	8000f18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008c6:	2028      	movs	r0, #40	@ 0x28
 80008c8:	f000 fb42 	bl	8000f50 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008cc:	bf00      	nop
 80008ce:	3728      	adds	r7, #40	@ 0x28
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40023800 	.word	0x40023800
 80008d8:	40020000 	.word	0x40020000
 80008dc:	40020800 	.word	0x40020800

080008e0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  {
	  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
#ifdef HEARTBEAT_LED
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
#endif
	  osDelay(2000);
 80008e8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80008ec:	f003 fe0e 	bl	800450c <osDelay>
 80008f0:	e7fa      	b.n	80008e8 <StartDefaultTask+0x8>

080008f2 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80008f2:	b580      	push	{r7, lr}
 80008f4:	b082      	sub	sp, #8
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008fa:	2001      	movs	r0, #1
 80008fc:	f003 fe06 	bl	800450c <osDelay>
 8000900:	e7fb      	b.n	80008fa <StartTask02+0x8>

08000902 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	b082      	sub	sp, #8
 8000906:	af00      	add	r7, sp, #0
 8000908:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800090a:	2001      	movs	r0, #1
 800090c:	f003 fdfe 	bl	800450c <osDelay>
 8000910:	e7fb      	b.n	800090a <StartTask03+0x8>
	...

08000914 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a04      	ldr	r2, [pc, #16]	@ (8000934 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d101      	bne.n	800092a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000926:	f000 fa1f 	bl	8000d68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40001000 	.word	0x40001000

08000938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800093c:	b672      	cpsid	i
}
 800093e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000940:	bf00      	nop
 8000942:	e7fd      	b.n	8000940 <Error_Handler+0x8>

08000944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	4b12      	ldr	r3, [pc, #72]	@ (8000998 <HAL_MspInit+0x54>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000952:	4a11      	ldr	r2, [pc, #68]	@ (8000998 <HAL_MspInit+0x54>)
 8000954:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000958:	6453      	str	r3, [r2, #68]	@ 0x44
 800095a:	4b0f      	ldr	r3, [pc, #60]	@ (8000998 <HAL_MspInit+0x54>)
 800095c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800095e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	603b      	str	r3, [r7, #0]
 800096a:	4b0b      	ldr	r3, [pc, #44]	@ (8000998 <HAL_MspInit+0x54>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096e:	4a0a      	ldr	r2, [pc, #40]	@ (8000998 <HAL_MspInit+0x54>)
 8000970:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000974:	6413      	str	r3, [r2, #64]	@ 0x40
 8000976:	4b08      	ldr	r3, [pc, #32]	@ (8000998 <HAL_MspInit+0x54>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800097e:	603b      	str	r3, [r7, #0]
 8000980:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000982:	2200      	movs	r2, #0
 8000984:	210f      	movs	r1, #15
 8000986:	f06f 0001 	mvn.w	r0, #1
 800098a:	f000 fac5 	bl	8000f18 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800

0800099c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08a      	sub	sp, #40	@ 0x28
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a19      	ldr	r2, [pc, #100]	@ (8000a20 <HAL_I2C_MspInit+0x84>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d12b      	bne.n	8000a16 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	613b      	str	r3, [r7, #16]
 80009c2:	4b18      	ldr	r3, [pc, #96]	@ (8000a24 <HAL_I2C_MspInit+0x88>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	4a17      	ldr	r2, [pc, #92]	@ (8000a24 <HAL_I2C_MspInit+0x88>)
 80009c8:	f043 0302 	orr.w	r3, r3, #2
 80009cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ce:	4b15      	ldr	r3, [pc, #84]	@ (8000a24 <HAL_I2C_MspInit+0x88>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	f003 0302 	and.w	r3, r3, #2
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009da:	23c0      	movs	r3, #192	@ 0xc0
 80009dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009de:	2312      	movs	r3, #18
 80009e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e6:	2303      	movs	r3, #3
 80009e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009ea:	2304      	movs	r3, #4
 80009ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ee:	f107 0314 	add.w	r3, r7, #20
 80009f2:	4619      	mov	r1, r3
 80009f4:	480c      	ldr	r0, [pc, #48]	@ (8000a28 <HAL_I2C_MspInit+0x8c>)
 80009f6:	f000 febb 	bl	8001770 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	4b09      	ldr	r3, [pc, #36]	@ (8000a24 <HAL_I2C_MspInit+0x88>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a02:	4a08      	ldr	r2, [pc, #32]	@ (8000a24 <HAL_I2C_MspInit+0x88>)
 8000a04:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a0a:	4b06      	ldr	r3, [pc, #24]	@ (8000a24 <HAL_I2C_MspInit+0x88>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a16:	bf00      	nop
 8000a18:	3728      	adds	r7, #40	@ 0x28
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40005400 	.word	0x40005400
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40020400 	.word	0x40020400

08000a2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08a      	sub	sp, #40	@ 0x28
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a34      	ldr	r2, [pc, #208]	@ (8000b1c <HAL_UART_MspInit+0xf0>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d162      	bne.n	8000b14 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	613b      	str	r3, [r7, #16]
 8000a52:	4b33      	ldr	r3, [pc, #204]	@ (8000b20 <HAL_UART_MspInit+0xf4>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a56:	4a32      	ldr	r2, [pc, #200]	@ (8000b20 <HAL_UART_MspInit+0xf4>)
 8000a58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a5e:	4b30      	ldr	r3, [pc, #192]	@ (8000b20 <HAL_UART_MspInit+0xf4>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	4b2c      	ldr	r3, [pc, #176]	@ (8000b20 <HAL_UART_MspInit+0xf4>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a72:	4a2b      	ldr	r2, [pc, #172]	@ (8000b20 <HAL_UART_MspInit+0xf4>)
 8000a74:	f043 0301 	orr.w	r3, r3, #1
 8000a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7a:	4b29      	ldr	r3, [pc, #164]	@ (8000b20 <HAL_UART_MspInit+0xf4>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a86:	230c      	movs	r3, #12
 8000a88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a92:	2303      	movs	r3, #3
 8000a94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a96:	2307      	movs	r3, #7
 8000a98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4820      	ldr	r0, [pc, #128]	@ (8000b24 <HAL_UART_MspInit+0xf8>)
 8000aa2:	f000 fe65 	bl	8001770 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000aa6:	4b20      	ldr	r3, [pc, #128]	@ (8000b28 <HAL_UART_MspInit+0xfc>)
 8000aa8:	4a20      	ldr	r2, [pc, #128]	@ (8000b2c <HAL_UART_MspInit+0x100>)
 8000aaa:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000aac:	4b1e      	ldr	r3, [pc, #120]	@ (8000b28 <HAL_UART_MspInit+0xfc>)
 8000aae:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000ab2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ab4:	4b1c      	ldr	r3, [pc, #112]	@ (8000b28 <HAL_UART_MspInit+0xfc>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000aba:	4b1b      	ldr	r3, [pc, #108]	@ (8000b28 <HAL_UART_MspInit+0xfc>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ac0:	4b19      	ldr	r3, [pc, #100]	@ (8000b28 <HAL_UART_MspInit+0xfc>)
 8000ac2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ac6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ac8:	4b17      	ldr	r3, [pc, #92]	@ (8000b28 <HAL_UART_MspInit+0xfc>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ace:	4b16      	ldr	r3, [pc, #88]	@ (8000b28 <HAL_UART_MspInit+0xfc>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000ad4:	4b14      	ldr	r3, [pc, #80]	@ (8000b28 <HAL_UART_MspInit+0xfc>)
 8000ad6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ada:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000adc:	4b12      	ldr	r3, [pc, #72]	@ (8000b28 <HAL_UART_MspInit+0xfc>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ae2:	4b11      	ldr	r3, [pc, #68]	@ (8000b28 <HAL_UART_MspInit+0xfc>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000ae8:	480f      	ldr	r0, [pc, #60]	@ (8000b28 <HAL_UART_MspInit+0xfc>)
 8000aea:	f000 fa3f 	bl	8000f6c <HAL_DMA_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000af4:	f7ff ff20 	bl	8000938 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	4a0b      	ldr	r2, [pc, #44]	@ (8000b28 <HAL_UART_MspInit+0xfc>)
 8000afc:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000afe:	4a0a      	ldr	r2, [pc, #40]	@ (8000b28 <HAL_UART_MspInit+0xfc>)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000b04:	2200      	movs	r2, #0
 8000b06:	2105      	movs	r1, #5
 8000b08:	2026      	movs	r0, #38	@ 0x26
 8000b0a:	f000 fa05 	bl	8000f18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b0e:	2026      	movs	r0, #38	@ 0x26
 8000b10:	f000 fa1e 	bl	8000f50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b14:	bf00      	nop
 8000b16:	3728      	adds	r7, #40	@ 0x28
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40004400 	.word	0x40004400
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40020000 	.word	0x40020000
 8000b28:	200000d0 	.word	0x200000d0
 8000b2c:	40026088 	.word	0x40026088

08000b30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08e      	sub	sp, #56	@ 0x38
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b40:	2300      	movs	r3, #0
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	4b33      	ldr	r3, [pc, #204]	@ (8000c14 <HAL_InitTick+0xe4>)
 8000b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b48:	4a32      	ldr	r2, [pc, #200]	@ (8000c14 <HAL_InitTick+0xe4>)
 8000b4a:	f043 0310 	orr.w	r3, r3, #16
 8000b4e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b50:	4b30      	ldr	r3, [pc, #192]	@ (8000c14 <HAL_InitTick+0xe4>)
 8000b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b54:	f003 0310 	and.w	r3, r3, #16
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b5c:	f107 0210 	add.w	r2, r7, #16
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	4611      	mov	r1, r2
 8000b66:	4618      	mov	r0, r3
 8000b68:	f001 fa26 	bl	8001fb8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b6c:	6a3b      	ldr	r3, [r7, #32]
 8000b6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d103      	bne.n	8000b7e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b76:	f001 f9f7 	bl	8001f68 <HAL_RCC_GetPCLK1Freq>
 8000b7a:	6378      	str	r0, [r7, #52]	@ 0x34
 8000b7c:	e004      	b.n	8000b88 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b7e:	f001 f9f3 	bl	8001f68 <HAL_RCC_GetPCLK1Freq>
 8000b82:	4603      	mov	r3, r0
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b8a:	4a23      	ldr	r2, [pc, #140]	@ (8000c18 <HAL_InitTick+0xe8>)
 8000b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b90:	0c9b      	lsrs	r3, r3, #18
 8000b92:	3b01      	subs	r3, #1
 8000b94:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b96:	4b21      	ldr	r3, [pc, #132]	@ (8000c1c <HAL_InitTick+0xec>)
 8000b98:	4a21      	ldr	r2, [pc, #132]	@ (8000c20 <HAL_InitTick+0xf0>)
 8000b9a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b9c:	4b1f      	ldr	r3, [pc, #124]	@ (8000c1c <HAL_InitTick+0xec>)
 8000b9e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ba2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ba4:	4a1d      	ldr	r2, [pc, #116]	@ (8000c1c <HAL_InitTick+0xec>)
 8000ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ba8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000baa:	4b1c      	ldr	r3, [pc, #112]	@ (8000c1c <HAL_InitTick+0xec>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c1c <HAL_InitTick+0xec>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb6:	4b19      	ldr	r3, [pc, #100]	@ (8000c1c <HAL_InitTick+0xec>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000bbc:	4817      	ldr	r0, [pc, #92]	@ (8000c1c <HAL_InitTick+0xec>)
 8000bbe:	f001 fefb 	bl	80029b8 <HAL_TIM_Base_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000bc8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d11b      	bne.n	8000c08 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000bd0:	4812      	ldr	r0, [pc, #72]	@ (8000c1c <HAL_InitTick+0xec>)
 8000bd2:	f001 ff4b 	bl	8002a6c <HAL_TIM_Base_Start_IT>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000bdc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d111      	bne.n	8000c08 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000be4:	2036      	movs	r0, #54	@ 0x36
 8000be6:	f000 f9b3 	bl	8000f50 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2b0f      	cmp	r3, #15
 8000bee:	d808      	bhi.n	8000c02 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	6879      	ldr	r1, [r7, #4]
 8000bf4:	2036      	movs	r0, #54	@ 0x36
 8000bf6:	f000 f98f 	bl	8000f18 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8000c24 <HAL_InitTick+0xf4>)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6013      	str	r3, [r2, #0]
 8000c00:	e002      	b.n	8000c08 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
 8000c04:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c08:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3738      	adds	r7, #56	@ 0x38
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40023800 	.word	0x40023800
 8000c18:	431bde83 	.word	0x431bde83
 8000c1c:	20000148 	.word	0x20000148
 8000c20:	40001000 	.word	0x40001000
 8000c24:	2000000c 	.word	0x2000000c

08000c28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c2c:	bf00      	nop
 8000c2e:	e7fd      	b.n	8000c2c <NMI_Handler+0x4>

08000c30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c34:	bf00      	nop
 8000c36:	e7fd      	b.n	8000c34 <HardFault_Handler+0x4>

08000c38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c3c:	bf00      	nop
 8000c3e:	e7fd      	b.n	8000c3c <MemManage_Handler+0x4>

08000c40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <BusFault_Handler+0x4>

08000c48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c4c:	bf00      	nop
 8000c4e:	e7fd      	b.n	8000c4c <UsageFault_Handler+0x4>

08000c50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
	...

08000c60 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000c64:	4802      	ldr	r0, [pc, #8]	@ (8000c70 <DMA1_Stream5_IRQHandler+0x10>)
 8000c66:	f000 fb19 	bl	800129c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	200000d0 	.word	0x200000d0

08000c74 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c78:	4802      	ldr	r0, [pc, #8]	@ (8000c84 <USART2_IRQHandler+0x10>)
 8000c7a:	f002 fa3f 	bl	80030fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000088 	.word	0x20000088

08000c88 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000c8c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000c90:	f000 ff1c 	bl	8001acc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c9c:	4802      	ldr	r0, [pc, #8]	@ (8000ca8 <TIM6_DAC_IRQHandler+0x10>)
 8000c9e:	f001 ff55 	bl	8002b4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000148 	.word	0x20000148

08000cac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cb0:	4b06      	ldr	r3, [pc, #24]	@ (8000ccc <SystemInit+0x20>)
 8000cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cb6:	4a05      	ldr	r2, [pc, #20]	@ (8000ccc <SystemInit+0x20>)
 8000cb8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cbc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cd0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d08 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cd4:	f7ff ffea 	bl	8000cac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cd8:	480c      	ldr	r0, [pc, #48]	@ (8000d0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cda:	490d      	ldr	r1, [pc, #52]	@ (8000d10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cdc:	4a0d      	ldr	r2, [pc, #52]	@ (8000d14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce0:	e002      	b.n	8000ce8 <LoopCopyDataInit>

08000ce2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ce2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ce6:	3304      	adds	r3, #4

08000ce8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cec:	d3f9      	bcc.n	8000ce2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cee:	4a0a      	ldr	r2, [pc, #40]	@ (8000d18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cf0:	4c0a      	ldr	r4, [pc, #40]	@ (8000d1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf4:	e001      	b.n	8000cfa <LoopFillZerobss>

08000cf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf8:	3204      	adds	r2, #4

08000cfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cfc:	d3fb      	bcc.n	8000cf6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000cfe:	f006 f963 	bl	8006fc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d02:	f7ff fc33 	bl	800056c <main>
  bx  lr    
 8000d06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d10:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000d14:	08007164 	.word	0x08007164
  ldr r2, =_sbss
 8000d18:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000d1c:	20004ae4 	.word	0x20004ae4

08000d20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d20:	e7fe      	b.n	8000d20 <ADC_IRQHandler>
	...

08000d24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d28:	4b0e      	ldr	r3, [pc, #56]	@ (8000d64 <HAL_Init+0x40>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d64 <HAL_Init+0x40>)
 8000d2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d34:	4b0b      	ldr	r3, [pc, #44]	@ (8000d64 <HAL_Init+0x40>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a0a      	ldr	r2, [pc, #40]	@ (8000d64 <HAL_Init+0x40>)
 8000d3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d40:	4b08      	ldr	r3, [pc, #32]	@ (8000d64 <HAL_Init+0x40>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a07      	ldr	r2, [pc, #28]	@ (8000d64 <HAL_Init+0x40>)
 8000d46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d4c:	2003      	movs	r0, #3
 8000d4e:	f000 f8d8 	bl	8000f02 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d52:	200f      	movs	r0, #15
 8000d54:	f7ff feec 	bl	8000b30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d58:	f7ff fdf4 	bl	8000944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40023c00 	.word	0x40023c00

08000d68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d6c:	4b06      	ldr	r3, [pc, #24]	@ (8000d88 <HAL_IncTick+0x20>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	461a      	mov	r2, r3
 8000d72:	4b06      	ldr	r3, [pc, #24]	@ (8000d8c <HAL_IncTick+0x24>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4413      	add	r3, r2
 8000d78:	4a04      	ldr	r2, [pc, #16]	@ (8000d8c <HAL_IncTick+0x24>)
 8000d7a:	6013      	str	r3, [r2, #0]
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	20000010 	.word	0x20000010
 8000d8c:	20000190 	.word	0x20000190

08000d90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  return uwTick;
 8000d94:	4b03      	ldr	r3, [pc, #12]	@ (8000da4 <HAL_GetTick+0x14>)
 8000d96:	681b      	ldr	r3, [r3, #0]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	20000190 	.word	0x20000190

08000da8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f003 0307 	and.w	r3, r3, #7
 8000db6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db8:	4b0c      	ldr	r3, [pc, #48]	@ (8000dec <__NVIC_SetPriorityGrouping+0x44>)
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dbe:	68ba      	ldr	r2, [r7, #8]
 8000dc0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dd0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dda:	4a04      	ldr	r2, [pc, #16]	@ (8000dec <__NVIC_SetPriorityGrouping+0x44>)
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	60d3      	str	r3, [r2, #12]
}
 8000de0:	bf00      	nop
 8000de2:	3714      	adds	r7, #20
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df4:	4b04      	ldr	r3, [pc, #16]	@ (8000e08 <__NVIC_GetPriorityGrouping+0x18>)
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	0a1b      	lsrs	r3, r3, #8
 8000dfa:	f003 0307 	and.w	r3, r3, #7
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	db0b      	blt.n	8000e36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	f003 021f 	and.w	r2, r3, #31
 8000e24:	4907      	ldr	r1, [pc, #28]	@ (8000e44 <__NVIC_EnableIRQ+0x38>)
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	095b      	lsrs	r3, r3, #5
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e36:	bf00      	nop
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	e000e100 	.word	0xe000e100

08000e48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	6039      	str	r1, [r7, #0]
 8000e52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	db0a      	blt.n	8000e72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	b2da      	uxtb	r2, r3
 8000e60:	490c      	ldr	r1, [pc, #48]	@ (8000e94 <__NVIC_SetPriority+0x4c>)
 8000e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e66:	0112      	lsls	r2, r2, #4
 8000e68:	b2d2      	uxtb	r2, r2
 8000e6a:	440b      	add	r3, r1
 8000e6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e70:	e00a      	b.n	8000e88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	4908      	ldr	r1, [pc, #32]	@ (8000e98 <__NVIC_SetPriority+0x50>)
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	f003 030f 	and.w	r3, r3, #15
 8000e7e:	3b04      	subs	r3, #4
 8000e80:	0112      	lsls	r2, r2, #4
 8000e82:	b2d2      	uxtb	r2, r2
 8000e84:	440b      	add	r3, r1
 8000e86:	761a      	strb	r2, [r3, #24]
}
 8000e88:	bf00      	nop
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	e000e100 	.word	0xe000e100
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b089      	sub	sp, #36	@ 0x24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	f1c3 0307 	rsb	r3, r3, #7
 8000eb6:	2b04      	cmp	r3, #4
 8000eb8:	bf28      	it	cs
 8000eba:	2304      	movcs	r3, #4
 8000ebc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	3304      	adds	r3, #4
 8000ec2:	2b06      	cmp	r3, #6
 8000ec4:	d902      	bls.n	8000ecc <NVIC_EncodePriority+0x30>
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	3b03      	subs	r3, #3
 8000eca:	e000      	b.n	8000ece <NVIC_EncodePriority+0x32>
 8000ecc:	2300      	movs	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43da      	mvns	r2, r3
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	401a      	ands	r2, r3
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	fa01 f303 	lsl.w	r3, r1, r3
 8000eee:	43d9      	mvns	r1, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef4:	4313      	orrs	r3, r2
         );
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3724      	adds	r7, #36	@ 0x24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f7ff ff4c 	bl	8000da8 <__NVIC_SetPriorityGrouping>
}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
 8000f24:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f2a:	f7ff ff61 	bl	8000df0 <__NVIC_GetPriorityGrouping>
 8000f2e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	68b9      	ldr	r1, [r7, #8]
 8000f34:	6978      	ldr	r0, [r7, #20]
 8000f36:	f7ff ffb1 	bl	8000e9c <NVIC_EncodePriority>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f40:	4611      	mov	r1, r2
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff ff80 	bl	8000e48 <__NVIC_SetPriority>
}
 8000f48:	bf00      	nop
 8000f4a:	3718      	adds	r7, #24
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff ff54 	bl	8000e0c <__NVIC_EnableIRQ>
}
 8000f64:	bf00      	nop
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000f78:	f7ff ff0a 	bl	8000d90 <HAL_GetTick>
 8000f7c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d101      	bne.n	8000f88 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	e099      	b.n	80010bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2202      	movs	r2, #2
 8000f8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2200      	movs	r2, #0
 8000f94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f022 0201 	bic.w	r2, r2, #1
 8000fa6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fa8:	e00f      	b.n	8000fca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000faa:	f7ff fef1 	bl	8000d90 <HAL_GetTick>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	2b05      	cmp	r3, #5
 8000fb6:	d908      	bls.n	8000fca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2220      	movs	r2, #32
 8000fbc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2203      	movs	r2, #3
 8000fc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	e078      	b.n	80010bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f003 0301 	and.w	r3, r3, #1
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d1e8      	bne.n	8000faa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000fe0:	697a      	ldr	r2, [r7, #20]
 8000fe2:	4b38      	ldr	r3, [pc, #224]	@ (80010c4 <HAL_DMA_Init+0x158>)
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	685a      	ldr	r2, [r3, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ff6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	691b      	ldr	r3, [r3, #16]
 8000ffc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001002:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800100e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6a1b      	ldr	r3, [r3, #32]
 8001014:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001016:	697a      	ldr	r2, [r7, #20]
 8001018:	4313      	orrs	r3, r2
 800101a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001020:	2b04      	cmp	r3, #4
 8001022:	d107      	bne.n	8001034 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102c:	4313      	orrs	r3, r2
 800102e:	697a      	ldr	r2, [r7, #20]
 8001030:	4313      	orrs	r3, r2
 8001032:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	697a      	ldr	r2, [r7, #20]
 800103a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	f023 0307 	bic.w	r3, r3, #7
 800104a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001050:	697a      	ldr	r2, [r7, #20]
 8001052:	4313      	orrs	r3, r2
 8001054:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800105a:	2b04      	cmp	r3, #4
 800105c:	d117      	bne.n	800108e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001062:	697a      	ldr	r2, [r7, #20]
 8001064:	4313      	orrs	r3, r2
 8001066:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800106c:	2b00      	cmp	r3, #0
 800106e:	d00e      	beq.n	800108e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f000 fb01 	bl	8001678 <DMA_CheckFifoParam>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d008      	beq.n	800108e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2240      	movs	r2, #64	@ 0x40
 8001080:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2201      	movs	r2, #1
 8001086:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800108a:	2301      	movs	r3, #1
 800108c:	e016      	b.n	80010bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	697a      	ldr	r2, [r7, #20]
 8001094:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f000 fab8 	bl	800160c <DMA_CalcBaseAndBitshift>
 800109c:	4603      	mov	r3, r0
 800109e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010a4:	223f      	movs	r2, #63	@ 0x3f
 80010a6:	409a      	lsls	r2, r3
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2200      	movs	r2, #0
 80010b0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2201      	movs	r2, #1
 80010b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80010ba:	2300      	movs	r3, #0
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	f010803f 	.word	0xf010803f

080010c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
 80010d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010d6:	2300      	movs	r3, #0
 80010d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010de:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d101      	bne.n	80010ee <HAL_DMA_Start_IT+0x26>
 80010ea:	2302      	movs	r3, #2
 80010ec:	e040      	b.n	8001170 <HAL_DMA_Start_IT+0xa8>
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	2201      	movs	r2, #1
 80010f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d12f      	bne.n	8001162 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	2202      	movs	r2, #2
 8001106:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	2200      	movs	r2, #0
 800110e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	68b9      	ldr	r1, [r7, #8]
 8001116:	68f8      	ldr	r0, [r7, #12]
 8001118:	f000 fa4a 	bl	80015b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001120:	223f      	movs	r2, #63	@ 0x3f
 8001122:	409a      	lsls	r2, r3
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f042 0216 	orr.w	r2, r2, #22
 8001136:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113c:	2b00      	cmp	r3, #0
 800113e:	d007      	beq.n	8001150 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f042 0208 	orr.w	r2, r2, #8
 800114e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f042 0201 	orr.w	r2, r2, #1
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	e005      	b.n	800116e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	2200      	movs	r2, #0
 8001166:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800116a:	2302      	movs	r3, #2
 800116c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800116e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001170:	4618      	mov	r0, r3
 8001172:	3718      	adds	r7, #24
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001184:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001186:	f7ff fe03 	bl	8000d90 <HAL_GetTick>
 800118a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001192:	b2db      	uxtb	r3, r3
 8001194:	2b02      	cmp	r3, #2
 8001196:	d008      	beq.n	80011aa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2280      	movs	r2, #128	@ 0x80
 800119c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e052      	b.n	8001250 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f022 0216 	bic.w	r2, r2, #22
 80011b8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	695a      	ldr	r2, [r3, #20]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80011c8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d103      	bne.n	80011da <HAL_DMA_Abort+0x62>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d007      	beq.n	80011ea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f022 0208 	bic.w	r2, r2, #8
 80011e8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f022 0201 	bic.w	r2, r2, #1
 80011f8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011fa:	e013      	b.n	8001224 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011fc:	f7ff fdc8 	bl	8000d90 <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	2b05      	cmp	r3, #5
 8001208:	d90c      	bls.n	8001224 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2220      	movs	r2, #32
 800120e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2203      	movs	r2, #3
 8001214:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001220:	2303      	movs	r3, #3
 8001222:	e015      	b.n	8001250 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	2b00      	cmp	r3, #0
 8001230:	d1e4      	bne.n	80011fc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001236:	223f      	movs	r2, #63	@ 0x3f
 8001238:	409a      	lsls	r2, r3
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2201      	movs	r2, #1
 8001242:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2200      	movs	r2, #0
 800124a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800124e:	2300      	movs	r3, #0
}
 8001250:	4618      	mov	r0, r3
 8001252:	3710      	adds	r7, #16
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001266:	b2db      	uxtb	r3, r3
 8001268:	2b02      	cmp	r3, #2
 800126a:	d004      	beq.n	8001276 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2280      	movs	r2, #128	@ 0x80
 8001270:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e00c      	b.n	8001290 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2205      	movs	r2, #5
 800127a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f022 0201 	bic.w	r2, r2, #1
 800128c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800128e:	2300      	movs	r3, #0
}
 8001290:	4618      	mov	r0, r3
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80012a4:	2300      	movs	r3, #0
 80012a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80012a8:	4b8e      	ldr	r3, [pc, #568]	@ (80014e4 <HAL_DMA_IRQHandler+0x248>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a8e      	ldr	r2, [pc, #568]	@ (80014e8 <HAL_DMA_IRQHandler+0x24c>)
 80012ae:	fba2 2303 	umull	r2, r3, r2, r3
 80012b2:	0a9b      	lsrs	r3, r3, #10
 80012b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012c6:	2208      	movs	r2, #8
 80012c8:	409a      	lsls	r2, r3
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	4013      	ands	r3, r2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d01a      	beq.n	8001308 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 0304 	and.w	r3, r3, #4
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d013      	beq.n	8001308 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f022 0204 	bic.w	r2, r2, #4
 80012ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012f4:	2208      	movs	r2, #8
 80012f6:	409a      	lsls	r2, r3
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001300:	f043 0201 	orr.w	r2, r3, #1
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800130c:	2201      	movs	r2, #1
 800130e:	409a      	lsls	r2, r3
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	4013      	ands	r3, r2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d012      	beq.n	800133e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	695b      	ldr	r3, [r3, #20]
 800131e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001322:	2b00      	cmp	r3, #0
 8001324:	d00b      	beq.n	800133e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800132a:	2201      	movs	r2, #1
 800132c:	409a      	lsls	r2, r3
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001336:	f043 0202 	orr.w	r2, r3, #2
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001342:	2204      	movs	r2, #4
 8001344:	409a      	lsls	r2, r3
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	4013      	ands	r3, r2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d012      	beq.n	8001374 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	2b00      	cmp	r3, #0
 800135a:	d00b      	beq.n	8001374 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001360:	2204      	movs	r2, #4
 8001362:	409a      	lsls	r2, r3
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800136c:	f043 0204 	orr.w	r2, r3, #4
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001378:	2210      	movs	r2, #16
 800137a:	409a      	lsls	r2, r3
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	4013      	ands	r3, r2
 8001380:	2b00      	cmp	r3, #0
 8001382:	d043      	beq.n	800140c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0308 	and.w	r3, r3, #8
 800138e:	2b00      	cmp	r3, #0
 8001390:	d03c      	beq.n	800140c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001396:	2210      	movs	r2, #16
 8001398:	409a      	lsls	r2, r3
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d018      	beq.n	80013de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d108      	bne.n	80013cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d024      	beq.n	800140c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	4798      	blx	r3
 80013ca:	e01f      	b.n	800140c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d01b      	beq.n	800140c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	4798      	blx	r3
 80013dc:	e016      	b.n	800140c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d107      	bne.n	80013fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f022 0208 	bic.w	r2, r2, #8
 80013fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001400:	2b00      	cmp	r3, #0
 8001402:	d003      	beq.n	800140c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001410:	2220      	movs	r2, #32
 8001412:	409a      	lsls	r2, r3
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	4013      	ands	r3, r2
 8001418:	2b00      	cmp	r3, #0
 800141a:	f000 808f 	beq.w	800153c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0310 	and.w	r3, r3, #16
 8001428:	2b00      	cmp	r3, #0
 800142a:	f000 8087 	beq.w	800153c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001432:	2220      	movs	r2, #32
 8001434:	409a      	lsls	r2, r3
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001440:	b2db      	uxtb	r3, r3
 8001442:	2b05      	cmp	r3, #5
 8001444:	d136      	bne.n	80014b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f022 0216 	bic.w	r2, r2, #22
 8001454:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	695a      	ldr	r2, [r3, #20]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001464:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146a:	2b00      	cmp	r3, #0
 800146c:	d103      	bne.n	8001476 <HAL_DMA_IRQHandler+0x1da>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001472:	2b00      	cmp	r3, #0
 8001474:	d007      	beq.n	8001486 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f022 0208 	bic.w	r2, r2, #8
 8001484:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800148a:	223f      	movs	r2, #63	@ 0x3f
 800148c:	409a      	lsls	r2, r3
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2201      	movs	r2, #1
 8001496:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d07e      	beq.n	80015a8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	4798      	blx	r3
        }
        return;
 80014b2:	e079      	b.n	80015a8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d01d      	beq.n	80014fe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d10d      	bne.n	80014ec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d031      	beq.n	800153c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	4798      	blx	r3
 80014e0:	e02c      	b.n	800153c <HAL_DMA_IRQHandler+0x2a0>
 80014e2:	bf00      	nop
 80014e4:	20000008 	.word	0x20000008
 80014e8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d023      	beq.n	800153c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	4798      	blx	r3
 80014fc:	e01e      	b.n	800153c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001508:	2b00      	cmp	r3, #0
 800150a:	d10f      	bne.n	800152c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f022 0210 	bic.w	r2, r2, #16
 800151a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2201      	movs	r2, #1
 8001520:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001530:	2b00      	cmp	r3, #0
 8001532:	d003      	beq.n	800153c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001540:	2b00      	cmp	r3, #0
 8001542:	d032      	beq.n	80015aa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	2b00      	cmp	r3, #0
 800154e:	d022      	beq.n	8001596 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2205      	movs	r2, #5
 8001554:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f022 0201 	bic.w	r2, r2, #1
 8001566:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	3301      	adds	r3, #1
 800156c:	60bb      	str	r3, [r7, #8]
 800156e:	697a      	ldr	r2, [r7, #20]
 8001570:	429a      	cmp	r2, r3
 8001572:	d307      	bcc.n	8001584 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1f2      	bne.n	8001568 <HAL_DMA_IRQHandler+0x2cc>
 8001582:	e000      	b.n	8001586 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001584:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2201      	movs	r2, #1
 800158a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159a:	2b00      	cmp	r3, #0
 800159c:	d005      	beq.n	80015aa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	4798      	blx	r3
 80015a6:	e000      	b.n	80015aa <HAL_DMA_IRQHandler+0x30e>
        return;
 80015a8:	bf00      	nop
    }
  }
}
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
 80015bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80015cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	683a      	ldr	r2, [r7, #0]
 80015d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	2b40      	cmp	r3, #64	@ 0x40
 80015dc:	d108      	bne.n	80015f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	68ba      	ldr	r2, [r7, #8]
 80015ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80015ee:	e007      	b.n	8001600 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	68ba      	ldr	r2, [r7, #8]
 80015f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	60da      	str	r2, [r3, #12]
}
 8001600:	bf00      	nop
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	b2db      	uxtb	r3, r3
 800161a:	3b10      	subs	r3, #16
 800161c:	4a14      	ldr	r2, [pc, #80]	@ (8001670 <DMA_CalcBaseAndBitshift+0x64>)
 800161e:	fba2 2303 	umull	r2, r3, r2, r3
 8001622:	091b      	lsrs	r3, r3, #4
 8001624:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001626:	4a13      	ldr	r2, [pc, #76]	@ (8001674 <DMA_CalcBaseAndBitshift+0x68>)
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	4413      	add	r3, r2
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	461a      	mov	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2b03      	cmp	r3, #3
 8001638:	d909      	bls.n	800164e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001642:	f023 0303 	bic.w	r3, r3, #3
 8001646:	1d1a      	adds	r2, r3, #4
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	659a      	str	r2, [r3, #88]	@ 0x58
 800164c:	e007      	b.n	800165e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001656:	f023 0303 	bic.w	r3, r3, #3
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001662:	4618      	mov	r0, r3
 8001664:	3714      	adds	r7, #20
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	aaaaaaab 	.word	0xaaaaaaab
 8001674:	0800714c 	.word	0x0800714c

08001678 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001680:	2300      	movs	r3, #0
 8001682:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001688:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d11f      	bne.n	80016d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	2b03      	cmp	r3, #3
 8001696:	d856      	bhi.n	8001746 <DMA_CheckFifoParam+0xce>
 8001698:	a201      	add	r2, pc, #4	@ (adr r2, 80016a0 <DMA_CheckFifoParam+0x28>)
 800169a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800169e:	bf00      	nop
 80016a0:	080016b1 	.word	0x080016b1
 80016a4:	080016c3 	.word	0x080016c3
 80016a8:	080016b1 	.word	0x080016b1
 80016ac:	08001747 	.word	0x08001747
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d046      	beq.n	800174a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016c0:	e043      	b.n	800174a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016c6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80016ca:	d140      	bne.n	800174e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016d0:	e03d      	b.n	800174e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80016da:	d121      	bne.n	8001720 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	2b03      	cmp	r3, #3
 80016e0:	d837      	bhi.n	8001752 <DMA_CheckFifoParam+0xda>
 80016e2:	a201      	add	r2, pc, #4	@ (adr r2, 80016e8 <DMA_CheckFifoParam+0x70>)
 80016e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e8:	080016f9 	.word	0x080016f9
 80016ec:	080016ff 	.word	0x080016ff
 80016f0:	080016f9 	.word	0x080016f9
 80016f4:	08001711 	.word	0x08001711
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	73fb      	strb	r3, [r7, #15]
      break;
 80016fc:	e030      	b.n	8001760 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001702:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d025      	beq.n	8001756 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800170e:	e022      	b.n	8001756 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001714:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001718:	d11f      	bne.n	800175a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800171e:	e01c      	b.n	800175a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	2b02      	cmp	r3, #2
 8001724:	d903      	bls.n	800172e <DMA_CheckFifoParam+0xb6>
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	2b03      	cmp	r3, #3
 800172a:	d003      	beq.n	8001734 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800172c:	e018      	b.n	8001760 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	73fb      	strb	r3, [r7, #15]
      break;
 8001732:	e015      	b.n	8001760 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001738:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d00e      	beq.n	800175e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	73fb      	strb	r3, [r7, #15]
      break;
 8001744:	e00b      	b.n	800175e <DMA_CheckFifoParam+0xe6>
      break;
 8001746:	bf00      	nop
 8001748:	e00a      	b.n	8001760 <DMA_CheckFifoParam+0xe8>
      break;
 800174a:	bf00      	nop
 800174c:	e008      	b.n	8001760 <DMA_CheckFifoParam+0xe8>
      break;
 800174e:	bf00      	nop
 8001750:	e006      	b.n	8001760 <DMA_CheckFifoParam+0xe8>
      break;
 8001752:	bf00      	nop
 8001754:	e004      	b.n	8001760 <DMA_CheckFifoParam+0xe8>
      break;
 8001756:	bf00      	nop
 8001758:	e002      	b.n	8001760 <DMA_CheckFifoParam+0xe8>
      break;   
 800175a:	bf00      	nop
 800175c:	e000      	b.n	8001760 <DMA_CheckFifoParam+0xe8>
      break;
 800175e:	bf00      	nop
    }
  } 
  
  return status; 
 8001760:	7bfb      	ldrb	r3, [r7, #15]
}
 8001762:	4618      	mov	r0, r3
 8001764:	3714      	adds	r7, #20
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop

08001770 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001770:	b480      	push	{r7}
 8001772:	b089      	sub	sp, #36	@ 0x24
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800177a:	2300      	movs	r3, #0
 800177c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800177e:	2300      	movs	r3, #0
 8001780:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001782:	2300      	movs	r3, #0
 8001784:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001786:	2300      	movs	r3, #0
 8001788:	61fb      	str	r3, [r7, #28]
 800178a:	e165      	b.n	8001a58 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800178c:	2201      	movs	r2, #1
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	697a      	ldr	r2, [r7, #20]
 800179c:	4013      	ands	r3, r2
 800179e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	f040 8154 	bne.w	8001a52 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f003 0303 	and.w	r3, r3, #3
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d005      	beq.n	80017c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d130      	bne.n	8001824 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	2203      	movs	r2, #3
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43db      	mvns	r3, r3
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	4013      	ands	r3, r2
 80017d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	68da      	ldr	r2, [r3, #12]
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017f8:	2201      	movs	r2, #1
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	4013      	ands	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	091b      	lsrs	r3, r3, #4
 800180e:	f003 0201 	and.w	r2, r3, #1
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	4313      	orrs	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f003 0303 	and.w	r3, r3, #3
 800182c:	2b03      	cmp	r3, #3
 800182e:	d017      	beq.n	8001860 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	2203      	movs	r2, #3
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	4013      	ands	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	4313      	orrs	r3, r2
 8001858:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f003 0303 	and.w	r3, r3, #3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d123      	bne.n	80018b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	08da      	lsrs	r2, r3, #3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3208      	adds	r2, #8
 8001874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001878:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	f003 0307 	and.w	r3, r3, #7
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	220f      	movs	r2, #15
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	43db      	mvns	r3, r3
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	4013      	ands	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	691a      	ldr	r2, [r3, #16]
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	08da      	lsrs	r2, r3, #3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	3208      	adds	r2, #8
 80018ae:	69b9      	ldr	r1, [r7, #24]
 80018b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	2203      	movs	r2, #3
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	43db      	mvns	r3, r3
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	4013      	ands	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f003 0203 	and.w	r2, r3, #3
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	4313      	orrs	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	f000 80ae 	beq.w	8001a52 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	4b5d      	ldr	r3, [pc, #372]	@ (8001a70 <HAL_GPIO_Init+0x300>)
 80018fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018fe:	4a5c      	ldr	r2, [pc, #368]	@ (8001a70 <HAL_GPIO_Init+0x300>)
 8001900:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001904:	6453      	str	r3, [r2, #68]	@ 0x44
 8001906:	4b5a      	ldr	r3, [pc, #360]	@ (8001a70 <HAL_GPIO_Init+0x300>)
 8001908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800190a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001912:	4a58      	ldr	r2, [pc, #352]	@ (8001a74 <HAL_GPIO_Init+0x304>)
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	089b      	lsrs	r3, r3, #2
 8001918:	3302      	adds	r3, #2
 800191a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800191e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	f003 0303 	and.w	r3, r3, #3
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	220f      	movs	r2, #15
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	43db      	mvns	r3, r3
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	4013      	ands	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a4f      	ldr	r2, [pc, #316]	@ (8001a78 <HAL_GPIO_Init+0x308>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d025      	beq.n	800198a <HAL_GPIO_Init+0x21a>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a4e      	ldr	r2, [pc, #312]	@ (8001a7c <HAL_GPIO_Init+0x30c>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d01f      	beq.n	8001986 <HAL_GPIO_Init+0x216>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a4d      	ldr	r2, [pc, #308]	@ (8001a80 <HAL_GPIO_Init+0x310>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d019      	beq.n	8001982 <HAL_GPIO_Init+0x212>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a4c      	ldr	r2, [pc, #304]	@ (8001a84 <HAL_GPIO_Init+0x314>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d013      	beq.n	800197e <HAL_GPIO_Init+0x20e>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a4b      	ldr	r2, [pc, #300]	@ (8001a88 <HAL_GPIO_Init+0x318>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d00d      	beq.n	800197a <HAL_GPIO_Init+0x20a>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a4a      	ldr	r2, [pc, #296]	@ (8001a8c <HAL_GPIO_Init+0x31c>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d007      	beq.n	8001976 <HAL_GPIO_Init+0x206>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a49      	ldr	r2, [pc, #292]	@ (8001a90 <HAL_GPIO_Init+0x320>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d101      	bne.n	8001972 <HAL_GPIO_Init+0x202>
 800196e:	2306      	movs	r3, #6
 8001970:	e00c      	b.n	800198c <HAL_GPIO_Init+0x21c>
 8001972:	2307      	movs	r3, #7
 8001974:	e00a      	b.n	800198c <HAL_GPIO_Init+0x21c>
 8001976:	2305      	movs	r3, #5
 8001978:	e008      	b.n	800198c <HAL_GPIO_Init+0x21c>
 800197a:	2304      	movs	r3, #4
 800197c:	e006      	b.n	800198c <HAL_GPIO_Init+0x21c>
 800197e:	2303      	movs	r3, #3
 8001980:	e004      	b.n	800198c <HAL_GPIO_Init+0x21c>
 8001982:	2302      	movs	r3, #2
 8001984:	e002      	b.n	800198c <HAL_GPIO_Init+0x21c>
 8001986:	2301      	movs	r3, #1
 8001988:	e000      	b.n	800198c <HAL_GPIO_Init+0x21c>
 800198a:	2300      	movs	r3, #0
 800198c:	69fa      	ldr	r2, [r7, #28]
 800198e:	f002 0203 	and.w	r2, r2, #3
 8001992:	0092      	lsls	r2, r2, #2
 8001994:	4093      	lsls	r3, r2
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	4313      	orrs	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800199c:	4935      	ldr	r1, [pc, #212]	@ (8001a74 <HAL_GPIO_Init+0x304>)
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	089b      	lsrs	r3, r3, #2
 80019a2:	3302      	adds	r3, #2
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019aa:	4b3a      	ldr	r3, [pc, #232]	@ (8001a94 <HAL_GPIO_Init+0x324>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	43db      	mvns	r3, r3
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	4013      	ands	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d003      	beq.n	80019ce <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019ce:	4a31      	ldr	r2, [pc, #196]	@ (8001a94 <HAL_GPIO_Init+0x324>)
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019d4:	4b2f      	ldr	r3, [pc, #188]	@ (8001a94 <HAL_GPIO_Init+0x324>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	43db      	mvns	r3, r3
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	4013      	ands	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d003      	beq.n	80019f8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019f8:	4a26      	ldr	r2, [pc, #152]	@ (8001a94 <HAL_GPIO_Init+0x324>)
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019fe:	4b25      	ldr	r3, [pc, #148]	@ (8001a94 <HAL_GPIO_Init+0x324>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	43db      	mvns	r3, r3
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a22:	4a1c      	ldr	r2, [pc, #112]	@ (8001a94 <HAL_GPIO_Init+0x324>)
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a28:	4b1a      	ldr	r3, [pc, #104]	@ (8001a94 <HAL_GPIO_Init+0x324>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	43db      	mvns	r3, r3
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	4013      	ands	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d003      	beq.n	8001a4c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a4c:	4a11      	ldr	r2, [pc, #68]	@ (8001a94 <HAL_GPIO_Init+0x324>)
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	3301      	adds	r3, #1
 8001a56:	61fb      	str	r3, [r7, #28]
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	2b0f      	cmp	r3, #15
 8001a5c:	f67f ae96 	bls.w	800178c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a60:	bf00      	nop
 8001a62:	bf00      	nop
 8001a64:	3724      	adds	r7, #36	@ 0x24
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	40023800 	.word	0x40023800
 8001a74:	40013800 	.word	0x40013800
 8001a78:	40020000 	.word	0x40020000
 8001a7c:	40020400 	.word	0x40020400
 8001a80:	40020800 	.word	0x40020800
 8001a84:	40020c00 	.word	0x40020c00
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	40021400 	.word	0x40021400
 8001a90:	40021800 	.word	0x40021800
 8001a94:	40013c00 	.word	0x40013c00

08001a98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	807b      	strh	r3, [r7, #2]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001aa8:	787b      	ldrb	r3, [r7, #1]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d003      	beq.n	8001ab6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aae:	887a      	ldrh	r2, [r7, #2]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ab4:	e003      	b.n	8001abe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ab6:	887b      	ldrh	r3, [r7, #2]
 8001ab8:	041a      	lsls	r2, r3, #16
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	619a      	str	r2, [r3, #24]
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
	...

08001acc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001ad6:	4b08      	ldr	r3, [pc, #32]	@ (8001af8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ad8:	695a      	ldr	r2, [r3, #20]
 8001ada:	88fb      	ldrh	r3, [r7, #6]
 8001adc:	4013      	ands	r3, r2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d006      	beq.n	8001af0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ae2:	4a05      	ldr	r2, [pc, #20]	@ (8001af8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ae4:	88fb      	ldrh	r3, [r7, #6]
 8001ae6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ae8:	88fb      	ldrh	r3, [r7, #6]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7fe fd16 	bl	800051c <HAL_GPIO_EXTI_Callback>
  }
}
 8001af0:	bf00      	nop
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40013c00 	.word	0x40013c00

08001afc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d101      	bne.n	8001b0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e12b      	b.n	8001d66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d106      	bne.n	8001b28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7fe ff3a 	bl	800099c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2224      	movs	r2, #36	@ 0x24
 8001b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f022 0201 	bic.w	r2, r2, #1
 8001b3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b60:	f000 fa02 	bl	8001f68 <HAL_RCC_GetPCLK1Freq>
 8001b64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	4a81      	ldr	r2, [pc, #516]	@ (8001d70 <HAL_I2C_Init+0x274>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d807      	bhi.n	8001b80 <HAL_I2C_Init+0x84>
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	4a80      	ldr	r2, [pc, #512]	@ (8001d74 <HAL_I2C_Init+0x278>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	bf94      	ite	ls
 8001b78:	2301      	movls	r3, #1
 8001b7a:	2300      	movhi	r3, #0
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	e006      	b.n	8001b8e <HAL_I2C_Init+0x92>
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	4a7d      	ldr	r2, [pc, #500]	@ (8001d78 <HAL_I2C_Init+0x27c>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	bf94      	ite	ls
 8001b88:	2301      	movls	r3, #1
 8001b8a:	2300      	movhi	r3, #0
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e0e7      	b.n	8001d66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	4a78      	ldr	r2, [pc, #480]	@ (8001d7c <HAL_I2C_Init+0x280>)
 8001b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b9e:	0c9b      	lsrs	r3, r3, #18
 8001ba0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	68ba      	ldr	r2, [r7, #8]
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	4a6a      	ldr	r2, [pc, #424]	@ (8001d70 <HAL_I2C_Init+0x274>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d802      	bhi.n	8001bd0 <HAL_I2C_Init+0xd4>
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	e009      	b.n	8001be4 <HAL_I2C_Init+0xe8>
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001bd6:	fb02 f303 	mul.w	r3, r2, r3
 8001bda:	4a69      	ldr	r2, [pc, #420]	@ (8001d80 <HAL_I2C_Init+0x284>)
 8001bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8001be0:	099b      	lsrs	r3, r3, #6
 8001be2:	3301      	adds	r3, #1
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	6812      	ldr	r2, [r2, #0]
 8001be8:	430b      	orrs	r3, r1
 8001bea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	69db      	ldr	r3, [r3, #28]
 8001bf2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001bf6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	495c      	ldr	r1, [pc, #368]	@ (8001d70 <HAL_I2C_Init+0x274>)
 8001c00:	428b      	cmp	r3, r1
 8001c02:	d819      	bhi.n	8001c38 <HAL_I2C_Init+0x13c>
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	1e59      	subs	r1, r3, #1
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c12:	1c59      	adds	r1, r3, #1
 8001c14:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001c18:	400b      	ands	r3, r1
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d00a      	beq.n	8001c34 <HAL_I2C_Init+0x138>
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	1e59      	subs	r1, r3, #1
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c32:	e051      	b.n	8001cd8 <HAL_I2C_Init+0x1dc>
 8001c34:	2304      	movs	r3, #4
 8001c36:	e04f      	b.n	8001cd8 <HAL_I2C_Init+0x1dc>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d111      	bne.n	8001c64 <HAL_I2C_Init+0x168>
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	1e58      	subs	r0, r3, #1
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6859      	ldr	r1, [r3, #4]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	440b      	add	r3, r1
 8001c4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c52:	3301      	adds	r3, #1
 8001c54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	bf0c      	ite	eq
 8001c5c:	2301      	moveq	r3, #1
 8001c5e:	2300      	movne	r3, #0
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	e012      	b.n	8001c8a <HAL_I2C_Init+0x18e>
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	1e58      	subs	r0, r3, #1
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6859      	ldr	r1, [r3, #4]
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	440b      	add	r3, r1
 8001c72:	0099      	lsls	r1, r3, #2
 8001c74:	440b      	add	r3, r1
 8001c76:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	bf0c      	ite	eq
 8001c84:	2301      	moveq	r3, #1
 8001c86:	2300      	movne	r3, #0
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <HAL_I2C_Init+0x196>
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e022      	b.n	8001cd8 <HAL_I2C_Init+0x1dc>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d10e      	bne.n	8001cb8 <HAL_I2C_Init+0x1bc>
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	1e58      	subs	r0, r3, #1
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6859      	ldr	r1, [r3, #4]
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	440b      	add	r3, r1
 8001ca8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cac:	3301      	adds	r3, #1
 8001cae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cb6:	e00f      	b.n	8001cd8 <HAL_I2C_Init+0x1dc>
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	1e58      	subs	r0, r3, #1
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6859      	ldr	r1, [r3, #4]
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	440b      	add	r3, r1
 8001cc6:	0099      	lsls	r1, r3, #2
 8001cc8:	440b      	add	r3, r1
 8001cca:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cce:	3301      	adds	r3, #1
 8001cd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cd4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001cd8:	6879      	ldr	r1, [r7, #4]
 8001cda:	6809      	ldr	r1, [r1, #0]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	69da      	ldr	r2, [r3, #28]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a1b      	ldr	r3, [r3, #32]
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001d06:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	6911      	ldr	r1, [r2, #16]
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	68d2      	ldr	r2, [r2, #12]
 8001d12:	4311      	orrs	r1, r2
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	6812      	ldr	r2, [r2, #0]
 8001d18:	430b      	orrs	r3, r1
 8001d1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	695a      	ldr	r2, [r3, #20]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	431a      	orrs	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	430a      	orrs	r2, r1
 8001d36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f042 0201 	orr.w	r2, r2, #1
 8001d46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2220      	movs	r2, #32
 8001d52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	000186a0 	.word	0x000186a0
 8001d74:	001e847f 	.word	0x001e847f
 8001d78:	003d08ff 	.word	0x003d08ff
 8001d7c:	431bde83 	.word	0x431bde83
 8001d80:	10624dd3 	.word	0x10624dd3

08001d84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d101      	bne.n	8001d98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e0cc      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d98:	4b68      	ldr	r3, [pc, #416]	@ (8001f3c <HAL_RCC_ClockConfig+0x1b8>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 030f 	and.w	r3, r3, #15
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d90c      	bls.n	8001dc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001da6:	4b65      	ldr	r3, [pc, #404]	@ (8001f3c <HAL_RCC_ClockConfig+0x1b8>)
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	b2d2      	uxtb	r2, r2
 8001dac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dae:	4b63      	ldr	r3, [pc, #396]	@ (8001f3c <HAL_RCC_ClockConfig+0x1b8>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 030f 	and.w	r3, r3, #15
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d001      	beq.n	8001dc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e0b8      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d020      	beq.n	8001e0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0304 	and.w	r3, r3, #4
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d005      	beq.n	8001de4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dd8:	4b59      	ldr	r3, [pc, #356]	@ (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	4a58      	ldr	r2, [pc, #352]	@ (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001dde:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001de2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0308 	and.w	r3, r3, #8
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d005      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001df0:	4b53      	ldr	r3, [pc, #332]	@ (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	4a52      	ldr	r2, [pc, #328]	@ (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001df6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001dfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dfc:	4b50      	ldr	r3, [pc, #320]	@ (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	494d      	ldr	r1, [pc, #308]	@ (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d044      	beq.n	8001ea4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d107      	bne.n	8001e32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e22:	4b47      	ldr	r3, [pc, #284]	@ (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d119      	bne.n	8001e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e07f      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d003      	beq.n	8001e42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e3e:	2b03      	cmp	r3, #3
 8001e40:	d107      	bne.n	8001e52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e42:	4b3f      	ldr	r3, [pc, #252]	@ (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d109      	bne.n	8001e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e06f      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e52:	4b3b      	ldr	r3, [pc, #236]	@ (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e067      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e62:	4b37      	ldr	r3, [pc, #220]	@ (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f023 0203 	bic.w	r2, r3, #3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	4934      	ldr	r1, [pc, #208]	@ (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001e70:	4313      	orrs	r3, r2
 8001e72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e74:	f7fe ff8c 	bl	8000d90 <HAL_GetTick>
 8001e78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e7a:	e00a      	b.n	8001e92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e7c:	f7fe ff88 	bl	8000d90 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e04f      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e92:	4b2b      	ldr	r3, [pc, #172]	@ (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f003 020c 	and.w	r2, r3, #12
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d1eb      	bne.n	8001e7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ea4:	4b25      	ldr	r3, [pc, #148]	@ (8001f3c <HAL_RCC_ClockConfig+0x1b8>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 030f 	and.w	r3, r3, #15
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d20c      	bcs.n	8001ecc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eb2:	4b22      	ldr	r3, [pc, #136]	@ (8001f3c <HAL_RCC_ClockConfig+0x1b8>)
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	b2d2      	uxtb	r2, r2
 8001eb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eba:	4b20      	ldr	r3, [pc, #128]	@ (8001f3c <HAL_RCC_ClockConfig+0x1b8>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 030f 	and.w	r3, r3, #15
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d001      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e032      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d008      	beq.n	8001eea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ed8:	4b19      	ldr	r3, [pc, #100]	@ (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	4916      	ldr	r1, [pc, #88]	@ (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0308 	and.w	r3, r3, #8
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d009      	beq.n	8001f0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ef6:	4b12      	ldr	r3, [pc, #72]	@ (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	490e      	ldr	r1, [pc, #56]	@ (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f0a:	f000 f887 	bl	800201c <HAL_RCC_GetSysClockFreq>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	4b0b      	ldr	r3, [pc, #44]	@ (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	091b      	lsrs	r3, r3, #4
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	490a      	ldr	r1, [pc, #40]	@ (8001f44 <HAL_RCC_ClockConfig+0x1c0>)
 8001f1c:	5ccb      	ldrb	r3, [r1, r3]
 8001f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f22:	4a09      	ldr	r2, [pc, #36]	@ (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001f24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f26:	4b09      	ldr	r3, [pc, #36]	@ (8001f4c <HAL_RCC_ClockConfig+0x1c8>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7fe fe00 	bl	8000b30 <HAL_InitTick>

  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40023c00 	.word	0x40023c00
 8001f40:	40023800 	.word	0x40023800
 8001f44:	08007134 	.word	0x08007134
 8001f48:	20000008 	.word	0x20000008
 8001f4c:	2000000c 	.word	0x2000000c

08001f50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f54:	4b03      	ldr	r3, [pc, #12]	@ (8001f64 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f56:	681b      	ldr	r3, [r3, #0]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	20000008 	.word	0x20000008

08001f68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f6c:	f7ff fff0 	bl	8001f50 <HAL_RCC_GetHCLKFreq>
 8001f70:	4602      	mov	r2, r0
 8001f72:	4b05      	ldr	r3, [pc, #20]	@ (8001f88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	0a9b      	lsrs	r3, r3, #10
 8001f78:	f003 0307 	and.w	r3, r3, #7
 8001f7c:	4903      	ldr	r1, [pc, #12]	@ (8001f8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f7e:	5ccb      	ldrb	r3, [r1, r3]
 8001f80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	08007144 	.word	0x08007144

08001f90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f94:	f7ff ffdc 	bl	8001f50 <HAL_RCC_GetHCLKFreq>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	4b05      	ldr	r3, [pc, #20]	@ (8001fb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	0b5b      	lsrs	r3, r3, #13
 8001fa0:	f003 0307 	and.w	r3, r3, #7
 8001fa4:	4903      	ldr	r1, [pc, #12]	@ (8001fb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fa6:	5ccb      	ldrb	r3, [r1, r3]
 8001fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	08007144 	.word	0x08007144

08001fb8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	220f      	movs	r2, #15
 8001fc6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001fc8:	4b12      	ldr	r3, [pc, #72]	@ (8002014 <HAL_RCC_GetClockConfig+0x5c>)
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f003 0203 	and.w	r2, r3, #3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001fd4:	4b0f      	ldr	r3, [pc, #60]	@ (8002014 <HAL_RCC_GetClockConfig+0x5c>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8002014 <HAL_RCC_GetClockConfig+0x5c>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001fec:	4b09      	ldr	r3, [pc, #36]	@ (8002014 <HAL_RCC_GetClockConfig+0x5c>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	08db      	lsrs	r3, r3, #3
 8001ff2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ffa:	4b07      	ldr	r3, [pc, #28]	@ (8002018 <HAL_RCC_GetClockConfig+0x60>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 020f 	and.w	r2, r3, #15
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	601a      	str	r2, [r3, #0]
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	40023800 	.word	0x40023800
 8002018:	40023c00 	.word	0x40023c00

0800201c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800201c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002020:	b0ae      	sub	sp, #184	@ 0xb8
 8002022:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002024:	2300      	movs	r3, #0
 8002026:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800202a:	2300      	movs	r3, #0
 800202c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002030:	2300      	movs	r3, #0
 8002032:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002036:	2300      	movs	r3, #0
 8002038:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800203c:	2300      	movs	r3, #0
 800203e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002042:	4bcb      	ldr	r3, [pc, #812]	@ (8002370 <HAL_RCC_GetSysClockFreq+0x354>)
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f003 030c 	and.w	r3, r3, #12
 800204a:	2b0c      	cmp	r3, #12
 800204c:	f200 8206 	bhi.w	800245c <HAL_RCC_GetSysClockFreq+0x440>
 8002050:	a201      	add	r2, pc, #4	@ (adr r2, 8002058 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002056:	bf00      	nop
 8002058:	0800208d 	.word	0x0800208d
 800205c:	0800245d 	.word	0x0800245d
 8002060:	0800245d 	.word	0x0800245d
 8002064:	0800245d 	.word	0x0800245d
 8002068:	08002095 	.word	0x08002095
 800206c:	0800245d 	.word	0x0800245d
 8002070:	0800245d 	.word	0x0800245d
 8002074:	0800245d 	.word	0x0800245d
 8002078:	0800209d 	.word	0x0800209d
 800207c:	0800245d 	.word	0x0800245d
 8002080:	0800245d 	.word	0x0800245d
 8002084:	0800245d 	.word	0x0800245d
 8002088:	0800228d 	.word	0x0800228d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800208c:	4bb9      	ldr	r3, [pc, #740]	@ (8002374 <HAL_RCC_GetSysClockFreq+0x358>)
 800208e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8002092:	e1e7      	b.n	8002464 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002094:	4bb8      	ldr	r3, [pc, #736]	@ (8002378 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002096:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800209a:	e1e3      	b.n	8002464 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800209c:	4bb4      	ldr	r3, [pc, #720]	@ (8002370 <HAL_RCC_GetSysClockFreq+0x354>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80020a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020a8:	4bb1      	ldr	r3, [pc, #708]	@ (8002370 <HAL_RCC_GetSysClockFreq+0x354>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d071      	beq.n	8002198 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020b4:	4bae      	ldr	r3, [pc, #696]	@ (8002370 <HAL_RCC_GetSysClockFreq+0x354>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	099b      	lsrs	r3, r3, #6
 80020ba:	2200      	movs	r2, #0
 80020bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80020c0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80020c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80020c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80020d0:	2300      	movs	r3, #0
 80020d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80020d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80020da:	4622      	mov	r2, r4
 80020dc:	462b      	mov	r3, r5
 80020de:	f04f 0000 	mov.w	r0, #0
 80020e2:	f04f 0100 	mov.w	r1, #0
 80020e6:	0159      	lsls	r1, r3, #5
 80020e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020ec:	0150      	lsls	r0, r2, #5
 80020ee:	4602      	mov	r2, r0
 80020f0:	460b      	mov	r3, r1
 80020f2:	4621      	mov	r1, r4
 80020f4:	1a51      	subs	r1, r2, r1
 80020f6:	6439      	str	r1, [r7, #64]	@ 0x40
 80020f8:	4629      	mov	r1, r5
 80020fa:	eb63 0301 	sbc.w	r3, r3, r1
 80020fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8002100:	f04f 0200 	mov.w	r2, #0
 8002104:	f04f 0300 	mov.w	r3, #0
 8002108:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800210c:	4649      	mov	r1, r9
 800210e:	018b      	lsls	r3, r1, #6
 8002110:	4641      	mov	r1, r8
 8002112:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002116:	4641      	mov	r1, r8
 8002118:	018a      	lsls	r2, r1, #6
 800211a:	4641      	mov	r1, r8
 800211c:	1a51      	subs	r1, r2, r1
 800211e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002120:	4649      	mov	r1, r9
 8002122:	eb63 0301 	sbc.w	r3, r3, r1
 8002126:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002128:	f04f 0200 	mov.w	r2, #0
 800212c:	f04f 0300 	mov.w	r3, #0
 8002130:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002134:	4649      	mov	r1, r9
 8002136:	00cb      	lsls	r3, r1, #3
 8002138:	4641      	mov	r1, r8
 800213a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800213e:	4641      	mov	r1, r8
 8002140:	00ca      	lsls	r2, r1, #3
 8002142:	4610      	mov	r0, r2
 8002144:	4619      	mov	r1, r3
 8002146:	4603      	mov	r3, r0
 8002148:	4622      	mov	r2, r4
 800214a:	189b      	adds	r3, r3, r2
 800214c:	633b      	str	r3, [r7, #48]	@ 0x30
 800214e:	462b      	mov	r3, r5
 8002150:	460a      	mov	r2, r1
 8002152:	eb42 0303 	adc.w	r3, r2, r3
 8002156:	637b      	str	r3, [r7, #52]	@ 0x34
 8002158:	f04f 0200 	mov.w	r2, #0
 800215c:	f04f 0300 	mov.w	r3, #0
 8002160:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002164:	4629      	mov	r1, r5
 8002166:	024b      	lsls	r3, r1, #9
 8002168:	4621      	mov	r1, r4
 800216a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800216e:	4621      	mov	r1, r4
 8002170:	024a      	lsls	r2, r1, #9
 8002172:	4610      	mov	r0, r2
 8002174:	4619      	mov	r1, r3
 8002176:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800217a:	2200      	movs	r2, #0
 800217c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002180:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002184:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002188:	f7fe f842 	bl	8000210 <__aeabi_uldivmod>
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	4613      	mov	r3, r2
 8002192:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002196:	e067      	b.n	8002268 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002198:	4b75      	ldr	r3, [pc, #468]	@ (8002370 <HAL_RCC_GetSysClockFreq+0x354>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	099b      	lsrs	r3, r3, #6
 800219e:	2200      	movs	r2, #0
 80021a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80021a4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80021a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80021ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80021b2:	2300      	movs	r3, #0
 80021b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80021b6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80021ba:	4622      	mov	r2, r4
 80021bc:	462b      	mov	r3, r5
 80021be:	f04f 0000 	mov.w	r0, #0
 80021c2:	f04f 0100 	mov.w	r1, #0
 80021c6:	0159      	lsls	r1, r3, #5
 80021c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021cc:	0150      	lsls	r0, r2, #5
 80021ce:	4602      	mov	r2, r0
 80021d0:	460b      	mov	r3, r1
 80021d2:	4621      	mov	r1, r4
 80021d4:	1a51      	subs	r1, r2, r1
 80021d6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80021d8:	4629      	mov	r1, r5
 80021da:	eb63 0301 	sbc.w	r3, r3, r1
 80021de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021e0:	f04f 0200 	mov.w	r2, #0
 80021e4:	f04f 0300 	mov.w	r3, #0
 80021e8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80021ec:	4649      	mov	r1, r9
 80021ee:	018b      	lsls	r3, r1, #6
 80021f0:	4641      	mov	r1, r8
 80021f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021f6:	4641      	mov	r1, r8
 80021f8:	018a      	lsls	r2, r1, #6
 80021fa:	4641      	mov	r1, r8
 80021fc:	ebb2 0a01 	subs.w	sl, r2, r1
 8002200:	4649      	mov	r1, r9
 8002202:	eb63 0b01 	sbc.w	fp, r3, r1
 8002206:	f04f 0200 	mov.w	r2, #0
 800220a:	f04f 0300 	mov.w	r3, #0
 800220e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002212:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002216:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800221a:	4692      	mov	sl, r2
 800221c:	469b      	mov	fp, r3
 800221e:	4623      	mov	r3, r4
 8002220:	eb1a 0303 	adds.w	r3, sl, r3
 8002224:	623b      	str	r3, [r7, #32]
 8002226:	462b      	mov	r3, r5
 8002228:	eb4b 0303 	adc.w	r3, fp, r3
 800222c:	627b      	str	r3, [r7, #36]	@ 0x24
 800222e:	f04f 0200 	mov.w	r2, #0
 8002232:	f04f 0300 	mov.w	r3, #0
 8002236:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800223a:	4629      	mov	r1, r5
 800223c:	028b      	lsls	r3, r1, #10
 800223e:	4621      	mov	r1, r4
 8002240:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002244:	4621      	mov	r1, r4
 8002246:	028a      	lsls	r2, r1, #10
 8002248:	4610      	mov	r0, r2
 800224a:	4619      	mov	r1, r3
 800224c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002250:	2200      	movs	r2, #0
 8002252:	673b      	str	r3, [r7, #112]	@ 0x70
 8002254:	677a      	str	r2, [r7, #116]	@ 0x74
 8002256:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800225a:	f7fd ffd9 	bl	8000210 <__aeabi_uldivmod>
 800225e:	4602      	mov	r2, r0
 8002260:	460b      	mov	r3, r1
 8002262:	4613      	mov	r3, r2
 8002264:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002268:	4b41      	ldr	r3, [pc, #260]	@ (8002370 <HAL_RCC_GetSysClockFreq+0x354>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	0c1b      	lsrs	r3, r3, #16
 800226e:	f003 0303 	and.w	r3, r3, #3
 8002272:	3301      	adds	r3, #1
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 800227a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800227e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002282:	fbb2 f3f3 	udiv	r3, r2, r3
 8002286:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800228a:	e0eb      	b.n	8002464 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800228c:	4b38      	ldr	r3, [pc, #224]	@ (8002370 <HAL_RCC_GetSysClockFreq+0x354>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002294:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002298:	4b35      	ldr	r3, [pc, #212]	@ (8002370 <HAL_RCC_GetSysClockFreq+0x354>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d06b      	beq.n	800237c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022a4:	4b32      	ldr	r3, [pc, #200]	@ (8002370 <HAL_RCC_GetSysClockFreq+0x354>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	099b      	lsrs	r3, r3, #6
 80022aa:	2200      	movs	r2, #0
 80022ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80022ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80022b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80022b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022b6:	663b      	str	r3, [r7, #96]	@ 0x60
 80022b8:	2300      	movs	r3, #0
 80022ba:	667b      	str	r3, [r7, #100]	@ 0x64
 80022bc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80022c0:	4622      	mov	r2, r4
 80022c2:	462b      	mov	r3, r5
 80022c4:	f04f 0000 	mov.w	r0, #0
 80022c8:	f04f 0100 	mov.w	r1, #0
 80022cc:	0159      	lsls	r1, r3, #5
 80022ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022d2:	0150      	lsls	r0, r2, #5
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	4621      	mov	r1, r4
 80022da:	1a51      	subs	r1, r2, r1
 80022dc:	61b9      	str	r1, [r7, #24]
 80022de:	4629      	mov	r1, r5
 80022e0:	eb63 0301 	sbc.w	r3, r3, r1
 80022e4:	61fb      	str	r3, [r7, #28]
 80022e6:	f04f 0200 	mov.w	r2, #0
 80022ea:	f04f 0300 	mov.w	r3, #0
 80022ee:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80022f2:	4659      	mov	r1, fp
 80022f4:	018b      	lsls	r3, r1, #6
 80022f6:	4651      	mov	r1, sl
 80022f8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022fc:	4651      	mov	r1, sl
 80022fe:	018a      	lsls	r2, r1, #6
 8002300:	4651      	mov	r1, sl
 8002302:	ebb2 0801 	subs.w	r8, r2, r1
 8002306:	4659      	mov	r1, fp
 8002308:	eb63 0901 	sbc.w	r9, r3, r1
 800230c:	f04f 0200 	mov.w	r2, #0
 8002310:	f04f 0300 	mov.w	r3, #0
 8002314:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002318:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800231c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002320:	4690      	mov	r8, r2
 8002322:	4699      	mov	r9, r3
 8002324:	4623      	mov	r3, r4
 8002326:	eb18 0303 	adds.w	r3, r8, r3
 800232a:	613b      	str	r3, [r7, #16]
 800232c:	462b      	mov	r3, r5
 800232e:	eb49 0303 	adc.w	r3, r9, r3
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	f04f 0200 	mov.w	r2, #0
 8002338:	f04f 0300 	mov.w	r3, #0
 800233c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002340:	4629      	mov	r1, r5
 8002342:	024b      	lsls	r3, r1, #9
 8002344:	4621      	mov	r1, r4
 8002346:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800234a:	4621      	mov	r1, r4
 800234c:	024a      	lsls	r2, r1, #9
 800234e:	4610      	mov	r0, r2
 8002350:	4619      	mov	r1, r3
 8002352:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002356:	2200      	movs	r2, #0
 8002358:	65bb      	str	r3, [r7, #88]	@ 0x58
 800235a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800235c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002360:	f7fd ff56 	bl	8000210 <__aeabi_uldivmod>
 8002364:	4602      	mov	r2, r0
 8002366:	460b      	mov	r3, r1
 8002368:	4613      	mov	r3, r2
 800236a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800236e:	e065      	b.n	800243c <HAL_RCC_GetSysClockFreq+0x420>
 8002370:	40023800 	.word	0x40023800
 8002374:	00f42400 	.word	0x00f42400
 8002378:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800237c:	4b3d      	ldr	r3, [pc, #244]	@ (8002474 <HAL_RCC_GetSysClockFreq+0x458>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	099b      	lsrs	r3, r3, #6
 8002382:	2200      	movs	r2, #0
 8002384:	4618      	mov	r0, r3
 8002386:	4611      	mov	r1, r2
 8002388:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800238c:	653b      	str	r3, [r7, #80]	@ 0x50
 800238e:	2300      	movs	r3, #0
 8002390:	657b      	str	r3, [r7, #84]	@ 0x54
 8002392:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002396:	4642      	mov	r2, r8
 8002398:	464b      	mov	r3, r9
 800239a:	f04f 0000 	mov.w	r0, #0
 800239e:	f04f 0100 	mov.w	r1, #0
 80023a2:	0159      	lsls	r1, r3, #5
 80023a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023a8:	0150      	lsls	r0, r2, #5
 80023aa:	4602      	mov	r2, r0
 80023ac:	460b      	mov	r3, r1
 80023ae:	4641      	mov	r1, r8
 80023b0:	1a51      	subs	r1, r2, r1
 80023b2:	60b9      	str	r1, [r7, #8]
 80023b4:	4649      	mov	r1, r9
 80023b6:	eb63 0301 	sbc.w	r3, r3, r1
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	f04f 0200 	mov.w	r2, #0
 80023c0:	f04f 0300 	mov.w	r3, #0
 80023c4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80023c8:	4659      	mov	r1, fp
 80023ca:	018b      	lsls	r3, r1, #6
 80023cc:	4651      	mov	r1, sl
 80023ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023d2:	4651      	mov	r1, sl
 80023d4:	018a      	lsls	r2, r1, #6
 80023d6:	4651      	mov	r1, sl
 80023d8:	1a54      	subs	r4, r2, r1
 80023da:	4659      	mov	r1, fp
 80023dc:	eb63 0501 	sbc.w	r5, r3, r1
 80023e0:	f04f 0200 	mov.w	r2, #0
 80023e4:	f04f 0300 	mov.w	r3, #0
 80023e8:	00eb      	lsls	r3, r5, #3
 80023ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023ee:	00e2      	lsls	r2, r4, #3
 80023f0:	4614      	mov	r4, r2
 80023f2:	461d      	mov	r5, r3
 80023f4:	4643      	mov	r3, r8
 80023f6:	18e3      	adds	r3, r4, r3
 80023f8:	603b      	str	r3, [r7, #0]
 80023fa:	464b      	mov	r3, r9
 80023fc:	eb45 0303 	adc.w	r3, r5, r3
 8002400:	607b      	str	r3, [r7, #4]
 8002402:	f04f 0200 	mov.w	r2, #0
 8002406:	f04f 0300 	mov.w	r3, #0
 800240a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800240e:	4629      	mov	r1, r5
 8002410:	028b      	lsls	r3, r1, #10
 8002412:	4621      	mov	r1, r4
 8002414:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002418:	4621      	mov	r1, r4
 800241a:	028a      	lsls	r2, r1, #10
 800241c:	4610      	mov	r0, r2
 800241e:	4619      	mov	r1, r3
 8002420:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002424:	2200      	movs	r2, #0
 8002426:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002428:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800242a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800242e:	f7fd feef 	bl	8000210 <__aeabi_uldivmod>
 8002432:	4602      	mov	r2, r0
 8002434:	460b      	mov	r3, r1
 8002436:	4613      	mov	r3, r2
 8002438:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800243c:	4b0d      	ldr	r3, [pc, #52]	@ (8002474 <HAL_RCC_GetSysClockFreq+0x458>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	0f1b      	lsrs	r3, r3, #28
 8002442:	f003 0307 	and.w	r3, r3, #7
 8002446:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800244a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800244e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002452:	fbb2 f3f3 	udiv	r3, r2, r3
 8002456:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800245a:	e003      	b.n	8002464 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800245c:	4b06      	ldr	r3, [pc, #24]	@ (8002478 <HAL_RCC_GetSysClockFreq+0x45c>)
 800245e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002462:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002464:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002468:	4618      	mov	r0, r3
 800246a:	37b8      	adds	r7, #184	@ 0xb8
 800246c:	46bd      	mov	sp, r7
 800246e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002472:	bf00      	nop
 8002474:	40023800 	.word	0x40023800
 8002478:	00f42400 	.word	0x00f42400

0800247c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e28d      	b.n	80029aa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	f000 8083 	beq.w	80025a2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800249c:	4b94      	ldr	r3, [pc, #592]	@ (80026f0 <HAL_RCC_OscConfig+0x274>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f003 030c 	and.w	r3, r3, #12
 80024a4:	2b04      	cmp	r3, #4
 80024a6:	d019      	beq.n	80024dc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80024a8:	4b91      	ldr	r3, [pc, #580]	@ (80026f0 <HAL_RCC_OscConfig+0x274>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80024b0:	2b08      	cmp	r3, #8
 80024b2:	d106      	bne.n	80024c2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80024b4:	4b8e      	ldr	r3, [pc, #568]	@ (80026f0 <HAL_RCC_OscConfig+0x274>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024c0:	d00c      	beq.n	80024dc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024c2:	4b8b      	ldr	r3, [pc, #556]	@ (80026f0 <HAL_RCC_OscConfig+0x274>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80024ca:	2b0c      	cmp	r3, #12
 80024cc:	d112      	bne.n	80024f4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ce:	4b88      	ldr	r3, [pc, #544]	@ (80026f0 <HAL_RCC_OscConfig+0x274>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024da:	d10b      	bne.n	80024f4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024dc:	4b84      	ldr	r3, [pc, #528]	@ (80026f0 <HAL_RCC_OscConfig+0x274>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d05b      	beq.n	80025a0 <HAL_RCC_OscConfig+0x124>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d157      	bne.n	80025a0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e25a      	b.n	80029aa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024fc:	d106      	bne.n	800250c <HAL_RCC_OscConfig+0x90>
 80024fe:	4b7c      	ldr	r3, [pc, #496]	@ (80026f0 <HAL_RCC_OscConfig+0x274>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a7b      	ldr	r2, [pc, #492]	@ (80026f0 <HAL_RCC_OscConfig+0x274>)
 8002504:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	e01d      	b.n	8002548 <HAL_RCC_OscConfig+0xcc>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002514:	d10c      	bne.n	8002530 <HAL_RCC_OscConfig+0xb4>
 8002516:	4b76      	ldr	r3, [pc, #472]	@ (80026f0 <HAL_RCC_OscConfig+0x274>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a75      	ldr	r2, [pc, #468]	@ (80026f0 <HAL_RCC_OscConfig+0x274>)
 800251c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002520:	6013      	str	r3, [r2, #0]
 8002522:	4b73      	ldr	r3, [pc, #460]	@ (80026f0 <HAL_RCC_OscConfig+0x274>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a72      	ldr	r2, [pc, #456]	@ (80026f0 <HAL_RCC_OscConfig+0x274>)
 8002528:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800252c:	6013      	str	r3, [r2, #0]
 800252e:	e00b      	b.n	8002548 <HAL_RCC_OscConfig+0xcc>
 8002530:	4b6f      	ldr	r3, [pc, #444]	@ (80026f0 <HAL_RCC_OscConfig+0x274>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a6e      	ldr	r2, [pc, #440]	@ (80026f0 <HAL_RCC_OscConfig+0x274>)
 8002536:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800253a:	6013      	str	r3, [r2, #0]
 800253c:	4b6c      	ldr	r3, [pc, #432]	@ (80026f0 <HAL_RCC_OscConfig+0x274>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a6b      	ldr	r2, [pc, #428]	@ (80026f0 <HAL_RCC_OscConfig+0x274>)
 8002542:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002546:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d013      	beq.n	8002578 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002550:	f7fe fc1e 	bl	8000d90 <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002558:	f7fe fc1a 	bl	8000d90 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b64      	cmp	r3, #100	@ 0x64
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e21f      	b.n	80029aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800256a:	4b61      	ldr	r3, [pc, #388]	@ (80026f0 <HAL_RCC_OscConfig+0x274>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d0f0      	beq.n	8002558 <HAL_RCC_OscConfig+0xdc>
 8002576:	e014      	b.n	80025a2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002578:	f7fe fc0a 	bl	8000d90 <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002580:	f7fe fc06 	bl	8000d90 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b64      	cmp	r3, #100	@ 0x64
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e20b      	b.n	80029aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002592:	4b57      	ldr	r3, [pc, #348]	@ (80026f0 <HAL_RCC_OscConfig+0x274>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1f0      	bne.n	8002580 <HAL_RCC_OscConfig+0x104>
 800259e:	e000      	b.n	80025a2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d06f      	beq.n	800268e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80025ae:	4b50      	ldr	r3, [pc, #320]	@ (80026f0 <HAL_RCC_OscConfig+0x274>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f003 030c 	and.w	r3, r3, #12
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d017      	beq.n	80025ea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80025ba:	4b4d      	ldr	r3, [pc, #308]	@ (80026f0 <HAL_RCC_OscConfig+0x274>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80025c2:	2b08      	cmp	r3, #8
 80025c4:	d105      	bne.n	80025d2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80025c6:	4b4a      	ldr	r3, [pc, #296]	@ (80026f0 <HAL_RCC_OscConfig+0x274>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00b      	beq.n	80025ea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025d2:	4b47      	ldr	r3, [pc, #284]	@ (80026f0 <HAL_RCC_OscConfig+0x274>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80025da:	2b0c      	cmp	r3, #12
 80025dc:	d11c      	bne.n	8002618 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025de:	4b44      	ldr	r3, [pc, #272]	@ (80026f0 <HAL_RCC_OscConfig+0x274>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d116      	bne.n	8002618 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ea:	4b41      	ldr	r3, [pc, #260]	@ (80026f0 <HAL_RCC_OscConfig+0x274>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d005      	beq.n	8002602 <HAL_RCC_OscConfig+0x186>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d001      	beq.n	8002602 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e1d3      	b.n	80029aa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002602:	4b3b      	ldr	r3, [pc, #236]	@ (80026f0 <HAL_RCC_OscConfig+0x274>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	4937      	ldr	r1, [pc, #220]	@ (80026f0 <HAL_RCC_OscConfig+0x274>)
 8002612:	4313      	orrs	r3, r2
 8002614:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002616:	e03a      	b.n	800268e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d020      	beq.n	8002662 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002620:	4b34      	ldr	r3, [pc, #208]	@ (80026f4 <HAL_RCC_OscConfig+0x278>)
 8002622:	2201      	movs	r2, #1
 8002624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002626:	f7fe fbb3 	bl	8000d90 <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800262c:	e008      	b.n	8002640 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800262e:	f7fe fbaf 	bl	8000d90 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e1b4      	b.n	80029aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002640:	4b2b      	ldr	r3, [pc, #172]	@ (80026f0 <HAL_RCC_OscConfig+0x274>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d0f0      	beq.n	800262e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800264c:	4b28      	ldr	r3, [pc, #160]	@ (80026f0 <HAL_RCC_OscConfig+0x274>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	00db      	lsls	r3, r3, #3
 800265a:	4925      	ldr	r1, [pc, #148]	@ (80026f0 <HAL_RCC_OscConfig+0x274>)
 800265c:	4313      	orrs	r3, r2
 800265e:	600b      	str	r3, [r1, #0]
 8002660:	e015      	b.n	800268e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002662:	4b24      	ldr	r3, [pc, #144]	@ (80026f4 <HAL_RCC_OscConfig+0x278>)
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002668:	f7fe fb92 	bl	8000d90 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002670:	f7fe fb8e 	bl	8000d90 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e193      	b.n	80029aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002682:	4b1b      	ldr	r3, [pc, #108]	@ (80026f0 <HAL_RCC_OscConfig+0x274>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1f0      	bne.n	8002670 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0308 	and.w	r3, r3, #8
 8002696:	2b00      	cmp	r3, #0
 8002698:	d036      	beq.n	8002708 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d016      	beq.n	80026d0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026a2:	4b15      	ldr	r3, [pc, #84]	@ (80026f8 <HAL_RCC_OscConfig+0x27c>)
 80026a4:	2201      	movs	r2, #1
 80026a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a8:	f7fe fb72 	bl	8000d90 <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026b0:	f7fe fb6e 	bl	8000d90 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e173      	b.n	80029aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026c2:	4b0b      	ldr	r3, [pc, #44]	@ (80026f0 <HAL_RCC_OscConfig+0x274>)
 80026c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d0f0      	beq.n	80026b0 <HAL_RCC_OscConfig+0x234>
 80026ce:	e01b      	b.n	8002708 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026d0:	4b09      	ldr	r3, [pc, #36]	@ (80026f8 <HAL_RCC_OscConfig+0x27c>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d6:	f7fe fb5b 	bl	8000d90 <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026dc:	e00e      	b.n	80026fc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026de:	f7fe fb57 	bl	8000d90 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d907      	bls.n	80026fc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e15c      	b.n	80029aa <HAL_RCC_OscConfig+0x52e>
 80026f0:	40023800 	.word	0x40023800
 80026f4:	42470000 	.word	0x42470000
 80026f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026fc:	4b8a      	ldr	r3, [pc, #552]	@ (8002928 <HAL_RCC_OscConfig+0x4ac>)
 80026fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1ea      	bne.n	80026de <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0304 	and.w	r3, r3, #4
 8002710:	2b00      	cmp	r3, #0
 8002712:	f000 8097 	beq.w	8002844 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002716:	2300      	movs	r3, #0
 8002718:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800271a:	4b83      	ldr	r3, [pc, #524]	@ (8002928 <HAL_RCC_OscConfig+0x4ac>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10f      	bne.n	8002746 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	60bb      	str	r3, [r7, #8]
 800272a:	4b7f      	ldr	r3, [pc, #508]	@ (8002928 <HAL_RCC_OscConfig+0x4ac>)
 800272c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800272e:	4a7e      	ldr	r2, [pc, #504]	@ (8002928 <HAL_RCC_OscConfig+0x4ac>)
 8002730:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002734:	6413      	str	r3, [r2, #64]	@ 0x40
 8002736:	4b7c      	ldr	r3, [pc, #496]	@ (8002928 <HAL_RCC_OscConfig+0x4ac>)
 8002738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800273e:	60bb      	str	r3, [r7, #8]
 8002740:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002742:	2301      	movs	r3, #1
 8002744:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002746:	4b79      	ldr	r3, [pc, #484]	@ (800292c <HAL_RCC_OscConfig+0x4b0>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800274e:	2b00      	cmp	r3, #0
 8002750:	d118      	bne.n	8002784 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002752:	4b76      	ldr	r3, [pc, #472]	@ (800292c <HAL_RCC_OscConfig+0x4b0>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a75      	ldr	r2, [pc, #468]	@ (800292c <HAL_RCC_OscConfig+0x4b0>)
 8002758:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800275c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800275e:	f7fe fb17 	bl	8000d90 <HAL_GetTick>
 8002762:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002764:	e008      	b.n	8002778 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002766:	f7fe fb13 	bl	8000d90 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d901      	bls.n	8002778 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e118      	b.n	80029aa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002778:	4b6c      	ldr	r3, [pc, #432]	@ (800292c <HAL_RCC_OscConfig+0x4b0>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002780:	2b00      	cmp	r3, #0
 8002782:	d0f0      	beq.n	8002766 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d106      	bne.n	800279a <HAL_RCC_OscConfig+0x31e>
 800278c:	4b66      	ldr	r3, [pc, #408]	@ (8002928 <HAL_RCC_OscConfig+0x4ac>)
 800278e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002790:	4a65      	ldr	r2, [pc, #404]	@ (8002928 <HAL_RCC_OscConfig+0x4ac>)
 8002792:	f043 0301 	orr.w	r3, r3, #1
 8002796:	6713      	str	r3, [r2, #112]	@ 0x70
 8002798:	e01c      	b.n	80027d4 <HAL_RCC_OscConfig+0x358>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	2b05      	cmp	r3, #5
 80027a0:	d10c      	bne.n	80027bc <HAL_RCC_OscConfig+0x340>
 80027a2:	4b61      	ldr	r3, [pc, #388]	@ (8002928 <HAL_RCC_OscConfig+0x4ac>)
 80027a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027a6:	4a60      	ldr	r2, [pc, #384]	@ (8002928 <HAL_RCC_OscConfig+0x4ac>)
 80027a8:	f043 0304 	orr.w	r3, r3, #4
 80027ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80027ae:	4b5e      	ldr	r3, [pc, #376]	@ (8002928 <HAL_RCC_OscConfig+0x4ac>)
 80027b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027b2:	4a5d      	ldr	r2, [pc, #372]	@ (8002928 <HAL_RCC_OscConfig+0x4ac>)
 80027b4:	f043 0301 	orr.w	r3, r3, #1
 80027b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80027ba:	e00b      	b.n	80027d4 <HAL_RCC_OscConfig+0x358>
 80027bc:	4b5a      	ldr	r3, [pc, #360]	@ (8002928 <HAL_RCC_OscConfig+0x4ac>)
 80027be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027c0:	4a59      	ldr	r2, [pc, #356]	@ (8002928 <HAL_RCC_OscConfig+0x4ac>)
 80027c2:	f023 0301 	bic.w	r3, r3, #1
 80027c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80027c8:	4b57      	ldr	r3, [pc, #348]	@ (8002928 <HAL_RCC_OscConfig+0x4ac>)
 80027ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027cc:	4a56      	ldr	r2, [pc, #344]	@ (8002928 <HAL_RCC_OscConfig+0x4ac>)
 80027ce:	f023 0304 	bic.w	r3, r3, #4
 80027d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d015      	beq.n	8002808 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027dc:	f7fe fad8 	bl	8000d90 <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e2:	e00a      	b.n	80027fa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027e4:	f7fe fad4 	bl	8000d90 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e0d7      	b.n	80029aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027fa:	4b4b      	ldr	r3, [pc, #300]	@ (8002928 <HAL_RCC_OscConfig+0x4ac>)
 80027fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d0ee      	beq.n	80027e4 <HAL_RCC_OscConfig+0x368>
 8002806:	e014      	b.n	8002832 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002808:	f7fe fac2 	bl	8000d90 <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800280e:	e00a      	b.n	8002826 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002810:	f7fe fabe 	bl	8000d90 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800281e:	4293      	cmp	r3, r2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e0c1      	b.n	80029aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002826:	4b40      	ldr	r3, [pc, #256]	@ (8002928 <HAL_RCC_OscConfig+0x4ac>)
 8002828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1ee      	bne.n	8002810 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002832:	7dfb      	ldrb	r3, [r7, #23]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d105      	bne.n	8002844 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002838:	4b3b      	ldr	r3, [pc, #236]	@ (8002928 <HAL_RCC_OscConfig+0x4ac>)
 800283a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283c:	4a3a      	ldr	r2, [pc, #232]	@ (8002928 <HAL_RCC_OscConfig+0x4ac>)
 800283e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002842:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	2b00      	cmp	r3, #0
 800284a:	f000 80ad 	beq.w	80029a8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800284e:	4b36      	ldr	r3, [pc, #216]	@ (8002928 <HAL_RCC_OscConfig+0x4ac>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f003 030c 	and.w	r3, r3, #12
 8002856:	2b08      	cmp	r3, #8
 8002858:	d060      	beq.n	800291c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	2b02      	cmp	r3, #2
 8002860:	d145      	bne.n	80028ee <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002862:	4b33      	ldr	r3, [pc, #204]	@ (8002930 <HAL_RCC_OscConfig+0x4b4>)
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002868:	f7fe fa92 	bl	8000d90 <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002870:	f7fe fa8e 	bl	8000d90 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e093      	b.n	80029aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002882:	4b29      	ldr	r3, [pc, #164]	@ (8002928 <HAL_RCC_OscConfig+0x4ac>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d1f0      	bne.n	8002870 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	69da      	ldr	r2, [r3, #28]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a1b      	ldr	r3, [r3, #32]
 8002896:	431a      	orrs	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289c:	019b      	lsls	r3, r3, #6
 800289e:	431a      	orrs	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a4:	085b      	lsrs	r3, r3, #1
 80028a6:	3b01      	subs	r3, #1
 80028a8:	041b      	lsls	r3, r3, #16
 80028aa:	431a      	orrs	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b0:	061b      	lsls	r3, r3, #24
 80028b2:	431a      	orrs	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b8:	071b      	lsls	r3, r3, #28
 80028ba:	491b      	ldr	r1, [pc, #108]	@ (8002928 <HAL_RCC_OscConfig+0x4ac>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002930 <HAL_RCC_OscConfig+0x4b4>)
 80028c2:	2201      	movs	r2, #1
 80028c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c6:	f7fe fa63 	bl	8000d90 <HAL_GetTick>
 80028ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028cc:	e008      	b.n	80028e0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ce:	f7fe fa5f 	bl	8000d90 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d901      	bls.n	80028e0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e064      	b.n	80029aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028e0:	4b11      	ldr	r3, [pc, #68]	@ (8002928 <HAL_RCC_OscConfig+0x4ac>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d0f0      	beq.n	80028ce <HAL_RCC_OscConfig+0x452>
 80028ec:	e05c      	b.n	80029a8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ee:	4b10      	ldr	r3, [pc, #64]	@ (8002930 <HAL_RCC_OscConfig+0x4b4>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f4:	f7fe fa4c 	bl	8000d90 <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028fc:	f7fe fa48 	bl	8000d90 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e04d      	b.n	80029aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800290e:	4b06      	ldr	r3, [pc, #24]	@ (8002928 <HAL_RCC_OscConfig+0x4ac>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1f0      	bne.n	80028fc <HAL_RCC_OscConfig+0x480>
 800291a:	e045      	b.n	80029a8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d107      	bne.n	8002934 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e040      	b.n	80029aa <HAL_RCC_OscConfig+0x52e>
 8002928:	40023800 	.word	0x40023800
 800292c:	40007000 	.word	0x40007000
 8002930:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002934:	4b1f      	ldr	r3, [pc, #124]	@ (80029b4 <HAL_RCC_OscConfig+0x538>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d030      	beq.n	80029a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800294c:	429a      	cmp	r2, r3
 800294e:	d129      	bne.n	80029a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800295a:	429a      	cmp	r2, r3
 800295c:	d122      	bne.n	80029a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002964:	4013      	ands	r3, r2
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800296a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800296c:	4293      	cmp	r3, r2
 800296e:	d119      	bne.n	80029a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800297a:	085b      	lsrs	r3, r3, #1
 800297c:	3b01      	subs	r3, #1
 800297e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002980:	429a      	cmp	r2, r3
 8002982:	d10f      	bne.n	80029a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800298e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002990:	429a      	cmp	r2, r3
 8002992:	d107      	bne.n	80029a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800299e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d001      	beq.n	80029a8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e000      	b.n	80029aa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3718      	adds	r7, #24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	40023800 	.word	0x40023800

080029b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e041      	b.n	8002a4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d106      	bne.n	80029e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f839 	bl	8002a56 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2202      	movs	r2, #2
 80029e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	3304      	adds	r3, #4
 80029f4:	4619      	mov	r1, r3
 80029f6:	4610      	mov	r0, r2
 80029f8:	f000 f9c0 	bl	8002d7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002a56:	b480      	push	{r7}
 8002a58:	b083      	sub	sp, #12
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002a5e:	bf00      	nop
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
	...

08002a6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d001      	beq.n	8002a84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e04e      	b.n	8002b22 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2202      	movs	r2, #2
 8002a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68da      	ldr	r2, [r3, #12]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f042 0201 	orr.w	r2, r2, #1
 8002a9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a23      	ldr	r2, [pc, #140]	@ (8002b30 <HAL_TIM_Base_Start_IT+0xc4>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d022      	beq.n	8002aec <HAL_TIM_Base_Start_IT+0x80>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002aae:	d01d      	beq.n	8002aec <HAL_TIM_Base_Start_IT+0x80>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a1f      	ldr	r2, [pc, #124]	@ (8002b34 <HAL_TIM_Base_Start_IT+0xc8>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d018      	beq.n	8002aec <HAL_TIM_Base_Start_IT+0x80>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a1e      	ldr	r2, [pc, #120]	@ (8002b38 <HAL_TIM_Base_Start_IT+0xcc>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d013      	beq.n	8002aec <HAL_TIM_Base_Start_IT+0x80>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a1c      	ldr	r2, [pc, #112]	@ (8002b3c <HAL_TIM_Base_Start_IT+0xd0>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d00e      	beq.n	8002aec <HAL_TIM_Base_Start_IT+0x80>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a1b      	ldr	r2, [pc, #108]	@ (8002b40 <HAL_TIM_Base_Start_IT+0xd4>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d009      	beq.n	8002aec <HAL_TIM_Base_Start_IT+0x80>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a19      	ldr	r2, [pc, #100]	@ (8002b44 <HAL_TIM_Base_Start_IT+0xd8>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d004      	beq.n	8002aec <HAL_TIM_Base_Start_IT+0x80>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a18      	ldr	r2, [pc, #96]	@ (8002b48 <HAL_TIM_Base_Start_IT+0xdc>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d111      	bne.n	8002b10 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2b06      	cmp	r3, #6
 8002afc:	d010      	beq.n	8002b20 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f042 0201 	orr.w	r2, r2, #1
 8002b0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b0e:	e007      	b.n	8002b20 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f042 0201 	orr.w	r2, r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3714      	adds	r7, #20
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	40010000 	.word	0x40010000
 8002b34:	40000400 	.word	0x40000400
 8002b38:	40000800 	.word	0x40000800
 8002b3c:	40000c00 	.word	0x40000c00
 8002b40:	40010400 	.word	0x40010400
 8002b44:	40014000 	.word	0x40014000
 8002b48:	40001800 	.word	0x40001800

08002b4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d020      	beq.n	8002bb0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d01b      	beq.n	8002bb0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f06f 0202 	mvn.w	r2, #2
 8002b80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2201      	movs	r2, #1
 8002b86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	f003 0303 	and.w	r3, r3, #3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d003      	beq.n	8002b9e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 f8d2 	bl	8002d40 <HAL_TIM_IC_CaptureCallback>
 8002b9c:	e005      	b.n	8002baa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 f8c4 	bl	8002d2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 f8d5 	bl	8002d54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	f003 0304 	and.w	r3, r3, #4
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d020      	beq.n	8002bfc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f003 0304 	and.w	r3, r3, #4
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d01b      	beq.n	8002bfc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f06f 0204 	mvn.w	r2, #4
 8002bcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2202      	movs	r2, #2
 8002bd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d003      	beq.n	8002bea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 f8ac 	bl	8002d40 <HAL_TIM_IC_CaptureCallback>
 8002be8:	e005      	b.n	8002bf6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f89e 	bl	8002d2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f000 f8af 	bl	8002d54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	f003 0308 	and.w	r3, r3, #8
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d020      	beq.n	8002c48 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f003 0308 	and.w	r3, r3, #8
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d01b      	beq.n	8002c48 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f06f 0208 	mvn.w	r2, #8
 8002c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2204      	movs	r2, #4
 8002c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	f003 0303 	and.w	r3, r3, #3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f886 	bl	8002d40 <HAL_TIM_IC_CaptureCallback>
 8002c34:	e005      	b.n	8002c42 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f878 	bl	8002d2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 f889 	bl	8002d54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	f003 0310 	and.w	r3, r3, #16
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d020      	beq.n	8002c94 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f003 0310 	and.w	r3, r3, #16
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d01b      	beq.n	8002c94 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f06f 0210 	mvn.w	r2, #16
 8002c64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2208      	movs	r2, #8
 8002c6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d003      	beq.n	8002c82 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 f860 	bl	8002d40 <HAL_TIM_IC_CaptureCallback>
 8002c80:	e005      	b.n	8002c8e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f852 	bl	8002d2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 f863 	bl	8002d54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00c      	beq.n	8002cb8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f003 0301 	and.w	r3, r3, #1
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d007      	beq.n	8002cb8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f06f 0201 	mvn.w	r2, #1
 8002cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f7fd fe2e 	bl	8000914 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00c      	beq.n	8002cdc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d007      	beq.n	8002cdc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 f906 	bl	8002ee8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00c      	beq.n	8002d00 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d007      	beq.n	8002d00 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f834 	bl	8002d68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	f003 0320 	and.w	r3, r3, #32
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00c      	beq.n	8002d24 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f003 0320 	and.w	r3, r3, #32
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d007      	beq.n	8002d24 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f06f 0220 	mvn.w	r2, #32
 8002d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 f8d8 	bl	8002ed4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d24:	bf00      	nop
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a46      	ldr	r2, [pc, #280]	@ (8002ea8 <TIM_Base_SetConfig+0x12c>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d013      	beq.n	8002dbc <TIM_Base_SetConfig+0x40>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d9a:	d00f      	beq.n	8002dbc <TIM_Base_SetConfig+0x40>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a43      	ldr	r2, [pc, #268]	@ (8002eac <TIM_Base_SetConfig+0x130>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d00b      	beq.n	8002dbc <TIM_Base_SetConfig+0x40>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a42      	ldr	r2, [pc, #264]	@ (8002eb0 <TIM_Base_SetConfig+0x134>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d007      	beq.n	8002dbc <TIM_Base_SetConfig+0x40>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a41      	ldr	r2, [pc, #260]	@ (8002eb4 <TIM_Base_SetConfig+0x138>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d003      	beq.n	8002dbc <TIM_Base_SetConfig+0x40>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a40      	ldr	r2, [pc, #256]	@ (8002eb8 <TIM_Base_SetConfig+0x13c>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d108      	bne.n	8002dce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	68fa      	ldr	r2, [r7, #12]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a35      	ldr	r2, [pc, #212]	@ (8002ea8 <TIM_Base_SetConfig+0x12c>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d02b      	beq.n	8002e2e <TIM_Base_SetConfig+0xb2>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ddc:	d027      	beq.n	8002e2e <TIM_Base_SetConfig+0xb2>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a32      	ldr	r2, [pc, #200]	@ (8002eac <TIM_Base_SetConfig+0x130>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d023      	beq.n	8002e2e <TIM_Base_SetConfig+0xb2>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a31      	ldr	r2, [pc, #196]	@ (8002eb0 <TIM_Base_SetConfig+0x134>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d01f      	beq.n	8002e2e <TIM_Base_SetConfig+0xb2>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a30      	ldr	r2, [pc, #192]	@ (8002eb4 <TIM_Base_SetConfig+0x138>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d01b      	beq.n	8002e2e <TIM_Base_SetConfig+0xb2>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a2f      	ldr	r2, [pc, #188]	@ (8002eb8 <TIM_Base_SetConfig+0x13c>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d017      	beq.n	8002e2e <TIM_Base_SetConfig+0xb2>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a2e      	ldr	r2, [pc, #184]	@ (8002ebc <TIM_Base_SetConfig+0x140>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d013      	beq.n	8002e2e <TIM_Base_SetConfig+0xb2>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a2d      	ldr	r2, [pc, #180]	@ (8002ec0 <TIM_Base_SetConfig+0x144>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d00f      	beq.n	8002e2e <TIM_Base_SetConfig+0xb2>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a2c      	ldr	r2, [pc, #176]	@ (8002ec4 <TIM_Base_SetConfig+0x148>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d00b      	beq.n	8002e2e <TIM_Base_SetConfig+0xb2>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a2b      	ldr	r2, [pc, #172]	@ (8002ec8 <TIM_Base_SetConfig+0x14c>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d007      	beq.n	8002e2e <TIM_Base_SetConfig+0xb2>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a2a      	ldr	r2, [pc, #168]	@ (8002ecc <TIM_Base_SetConfig+0x150>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d003      	beq.n	8002e2e <TIM_Base_SetConfig+0xb2>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a29      	ldr	r2, [pc, #164]	@ (8002ed0 <TIM_Base_SetConfig+0x154>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d108      	bne.n	8002e40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a10      	ldr	r2, [pc, #64]	@ (8002ea8 <TIM_Base_SetConfig+0x12c>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d003      	beq.n	8002e74 <TIM_Base_SetConfig+0xf8>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a12      	ldr	r2, [pc, #72]	@ (8002eb8 <TIM_Base_SetConfig+0x13c>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d103      	bne.n	8002e7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	691a      	ldr	r2, [r3, #16]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d105      	bne.n	8002e9a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	f023 0201 	bic.w	r2, r3, #1
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	611a      	str	r2, [r3, #16]
  }
}
 8002e9a:	bf00      	nop
 8002e9c:	3714      	adds	r7, #20
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	40010000 	.word	0x40010000
 8002eac:	40000400 	.word	0x40000400
 8002eb0:	40000800 	.word	0x40000800
 8002eb4:	40000c00 	.word	0x40000c00
 8002eb8:	40010400 	.word	0x40010400
 8002ebc:	40014000 	.word	0x40014000
 8002ec0:	40014400 	.word	0x40014400
 8002ec4:	40014800 	.word	0x40014800
 8002ec8:	40001800 	.word	0x40001800
 8002ecc:	40001c00 	.word	0x40001c00
 8002ed0:	40002000 	.word	0x40002000

08002ed4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e042      	b.n	8002f94 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d106      	bne.n	8002f28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f7fd fd82 	bl	8000a2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2224      	movs	r2, #36	@ 0x24
 8002f2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68da      	ldr	r2, [r3, #12]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 ff4f 	bl	8003de4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	691a      	ldr	r2, [r3, #16]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	695a      	ldr	r2, [r3, #20]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68da      	ldr	r2, [r3, #12]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2220      	movs	r2, #32
 8002f80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2220      	movs	r2, #32
 8002f88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3708      	adds	r7, #8
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b08a      	sub	sp, #40	@ 0x28
 8002fa0:	af02      	add	r7, sp, #8
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	603b      	str	r3, [r7, #0]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fac:	2300      	movs	r3, #0
 8002fae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b20      	cmp	r3, #32
 8002fba:	d175      	bne.n	80030a8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d002      	beq.n	8002fc8 <HAL_UART_Transmit+0x2c>
 8002fc2:	88fb      	ldrh	r3, [r7, #6]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d101      	bne.n	8002fcc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e06e      	b.n	80030aa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2221      	movs	r2, #33	@ 0x21
 8002fd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fda:	f7fd fed9 	bl	8000d90 <HAL_GetTick>
 8002fde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	88fa      	ldrh	r2, [r7, #6]
 8002fe4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	88fa      	ldrh	r2, [r7, #6]
 8002fea:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ff4:	d108      	bne.n	8003008 <HAL_UART_Transmit+0x6c>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d104      	bne.n	8003008 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002ffe:	2300      	movs	r3, #0
 8003000:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	61bb      	str	r3, [r7, #24]
 8003006:	e003      	b.n	8003010 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800300c:	2300      	movs	r3, #0
 800300e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003010:	e02e      	b.n	8003070 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	2200      	movs	r2, #0
 800301a:	2180      	movs	r1, #128	@ 0x80
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f000 fc27 	bl	8003870 <UART_WaitOnFlagUntilTimeout>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d005      	beq.n	8003034 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2220      	movs	r2, #32
 800302c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e03a      	b.n	80030aa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10b      	bne.n	8003052 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	881b      	ldrh	r3, [r3, #0]
 800303e:	461a      	mov	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003048:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	3302      	adds	r3, #2
 800304e:	61bb      	str	r3, [r7, #24]
 8003050:	e007      	b.n	8003062 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	781a      	ldrb	r2, [r3, #0]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	3301      	adds	r3, #1
 8003060:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003066:	b29b      	uxth	r3, r3
 8003068:	3b01      	subs	r3, #1
 800306a:	b29a      	uxth	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003074:	b29b      	uxth	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1cb      	bne.n	8003012 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	9300      	str	r3, [sp, #0]
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	2200      	movs	r2, #0
 8003082:	2140      	movs	r1, #64	@ 0x40
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f000 fbf3 	bl	8003870 <UART_WaitOnFlagUntilTimeout>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d005      	beq.n	800309c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2220      	movs	r2, #32
 8003094:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e006      	b.n	80030aa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2220      	movs	r2, #32
 80030a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80030a4:	2300      	movs	r3, #0
 80030a6:	e000      	b.n	80030aa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80030a8:	2302      	movs	r3, #2
  }
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3720      	adds	r7, #32
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b084      	sub	sp, #16
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	60f8      	str	r0, [r7, #12]
 80030ba:	60b9      	str	r1, [r7, #8]
 80030bc:	4613      	mov	r3, r2
 80030be:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b20      	cmp	r3, #32
 80030ca:	d112      	bne.n	80030f2 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d002      	beq.n	80030d8 <HAL_UART_Receive_DMA+0x26>
 80030d2:	88fb      	ldrh	r3, [r7, #6]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e00b      	b.n	80030f4 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80030e2:	88fb      	ldrh	r3, [r7, #6]
 80030e4:	461a      	mov	r2, r3
 80030e6:	68b9      	ldr	r1, [r7, #8]
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 fc1b 	bl	8003924 <UART_Start_Receive_DMA>
 80030ee:	4603      	mov	r3, r0
 80030f0:	e000      	b.n	80030f4 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80030f2:	2302      	movs	r3, #2
  }
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b0ba      	sub	sp, #232	@ 0xe8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003122:	2300      	movs	r3, #0
 8003124:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003128:	2300      	movs	r3, #0
 800312a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800312e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003132:	f003 030f 	and.w	r3, r3, #15
 8003136:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800313a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800313e:	2b00      	cmp	r3, #0
 8003140:	d10f      	bne.n	8003162 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003146:	f003 0320 	and.w	r3, r3, #32
 800314a:	2b00      	cmp	r3, #0
 800314c:	d009      	beq.n	8003162 <HAL_UART_IRQHandler+0x66>
 800314e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003152:	f003 0320 	and.w	r3, r3, #32
 8003156:	2b00      	cmp	r3, #0
 8003158:	d003      	beq.n	8003162 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 fd83 	bl	8003c66 <UART_Receive_IT>
      return;
 8003160:	e25b      	b.n	800361a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003162:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003166:	2b00      	cmp	r3, #0
 8003168:	f000 80de 	beq.w	8003328 <HAL_UART_IRQHandler+0x22c>
 800316c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003170:	f003 0301 	and.w	r3, r3, #1
 8003174:	2b00      	cmp	r3, #0
 8003176:	d106      	bne.n	8003186 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800317c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003180:	2b00      	cmp	r3, #0
 8003182:	f000 80d1 	beq.w	8003328 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00b      	beq.n	80031aa <HAL_UART_IRQHandler+0xae>
 8003192:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003196:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800319a:	2b00      	cmp	r3, #0
 800319c:	d005      	beq.n	80031aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031a2:	f043 0201 	orr.w	r2, r3, #1
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031ae:	f003 0304 	and.w	r3, r3, #4
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00b      	beq.n	80031ce <HAL_UART_IRQHandler+0xd2>
 80031b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d005      	beq.n	80031ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c6:	f043 0202 	orr.w	r2, r3, #2
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00b      	beq.n	80031f2 <HAL_UART_IRQHandler+0xf6>
 80031da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d005      	beq.n	80031f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ea:	f043 0204 	orr.w	r2, r3, #4
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80031f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031f6:	f003 0308 	and.w	r3, r3, #8
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d011      	beq.n	8003222 <HAL_UART_IRQHandler+0x126>
 80031fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003202:	f003 0320 	and.w	r3, r3, #32
 8003206:	2b00      	cmp	r3, #0
 8003208:	d105      	bne.n	8003216 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800320a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b00      	cmp	r3, #0
 8003214:	d005      	beq.n	8003222 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800321a:	f043 0208 	orr.w	r2, r3, #8
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003226:	2b00      	cmp	r3, #0
 8003228:	f000 81f2 	beq.w	8003610 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800322c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003230:	f003 0320 	and.w	r3, r3, #32
 8003234:	2b00      	cmp	r3, #0
 8003236:	d008      	beq.n	800324a <HAL_UART_IRQHandler+0x14e>
 8003238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800323c:	f003 0320 	and.w	r3, r3, #32
 8003240:	2b00      	cmp	r3, #0
 8003242:	d002      	beq.n	800324a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 fd0e 	bl	8003c66 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003254:	2b40      	cmp	r3, #64	@ 0x40
 8003256:	bf0c      	ite	eq
 8003258:	2301      	moveq	r3, #1
 800325a:	2300      	movne	r3, #0
 800325c:	b2db      	uxtb	r3, r3
 800325e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003266:	f003 0308 	and.w	r3, r3, #8
 800326a:	2b00      	cmp	r3, #0
 800326c:	d103      	bne.n	8003276 <HAL_UART_IRQHandler+0x17a>
 800326e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003272:	2b00      	cmp	r3, #0
 8003274:	d04f      	beq.n	8003316 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 fc16 	bl	8003aa8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003286:	2b40      	cmp	r3, #64	@ 0x40
 8003288:	d141      	bne.n	800330e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	3314      	adds	r3, #20
 8003290:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003294:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003298:	e853 3f00 	ldrex	r3, [r3]
 800329c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80032a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80032a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	3314      	adds	r3, #20
 80032b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80032b6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80032ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80032c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80032c6:	e841 2300 	strex	r3, r2, [r1]
 80032ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80032ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1d9      	bne.n	800328a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d013      	beq.n	8003306 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032e2:	4a7e      	ldr	r2, [pc, #504]	@ (80034dc <HAL_UART_IRQHandler+0x3e0>)
 80032e4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7fd ffb4 	bl	8001258 <HAL_DMA_Abort_IT>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d016      	beq.n	8003324 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003300:	4610      	mov	r0, r2
 8003302:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003304:	e00e      	b.n	8003324 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 f99e 	bl	8003648 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800330c:	e00a      	b.n	8003324 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 f99a 	bl	8003648 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003314:	e006      	b.n	8003324 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 f996 	bl	8003648 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003322:	e175      	b.n	8003610 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003324:	bf00      	nop
    return;
 8003326:	e173      	b.n	8003610 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800332c:	2b01      	cmp	r3, #1
 800332e:	f040 814f 	bne.w	80035d0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003336:	f003 0310 	and.w	r3, r3, #16
 800333a:	2b00      	cmp	r3, #0
 800333c:	f000 8148 	beq.w	80035d0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003344:	f003 0310 	and.w	r3, r3, #16
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 8141 	beq.w	80035d0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800334e:	2300      	movs	r3, #0
 8003350:	60bb      	str	r3, [r7, #8]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	60bb      	str	r3, [r7, #8]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	60bb      	str	r3, [r7, #8]
 8003362:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800336e:	2b40      	cmp	r3, #64	@ 0x40
 8003370:	f040 80b6 	bne.w	80034e0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003380:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003384:	2b00      	cmp	r3, #0
 8003386:	f000 8145 	beq.w	8003614 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800338e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003392:	429a      	cmp	r2, r3
 8003394:	f080 813e 	bcs.w	8003614 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800339e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033aa:	f000 8088 	beq.w	80034be <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	330c      	adds	r3, #12
 80033b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80033bc:	e853 3f00 	ldrex	r3, [r3]
 80033c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80033c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	330c      	adds	r3, #12
 80033d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80033da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80033de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80033e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80033ea:	e841 2300 	strex	r3, r2, [r1]
 80033ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80033f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1d9      	bne.n	80033ae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	3314      	adds	r3, #20
 8003400:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003402:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003404:	e853 3f00 	ldrex	r3, [r3]
 8003408:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800340a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800340c:	f023 0301 	bic.w	r3, r3, #1
 8003410:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	3314      	adds	r3, #20
 800341a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800341e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003422:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003424:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003426:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800342a:	e841 2300 	strex	r3, r2, [r1]
 800342e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003430:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1e1      	bne.n	80033fa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	3314      	adds	r3, #20
 800343c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800343e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003440:	e853 3f00 	ldrex	r3, [r3]
 8003444:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003446:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003448:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800344c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	3314      	adds	r3, #20
 8003456:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800345a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800345c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800345e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003460:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003462:	e841 2300 	strex	r3, r2, [r1]
 8003466:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003468:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1e3      	bne.n	8003436 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2220      	movs	r2, #32
 8003472:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	330c      	adds	r3, #12
 8003482:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003484:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003486:	e853 3f00 	ldrex	r3, [r3]
 800348a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800348c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800348e:	f023 0310 	bic.w	r3, r3, #16
 8003492:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	330c      	adds	r3, #12
 800349c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80034a0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80034a2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80034a6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80034a8:	e841 2300 	strex	r3, r2, [r1]
 80034ac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80034ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1e3      	bne.n	800347c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7fd fe5d 	bl	8001178 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2202      	movs	r2, #2
 80034c2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	4619      	mov	r1, r3
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 f8c1 	bl	800365c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80034da:	e09b      	b.n	8003614 <HAL_UART_IRQHandler+0x518>
 80034dc:	08003b6f 	.word	0x08003b6f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f000 808e 	beq.w	8003618 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80034fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003500:	2b00      	cmp	r3, #0
 8003502:	f000 8089 	beq.w	8003618 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	330c      	adds	r3, #12
 800350c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800350e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003510:	e853 3f00 	ldrex	r3, [r3]
 8003514:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003518:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800351c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	330c      	adds	r3, #12
 8003526:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800352a:	647a      	str	r2, [r7, #68]	@ 0x44
 800352c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800352e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003530:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003532:	e841 2300 	strex	r3, r2, [r1]
 8003536:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003538:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1e3      	bne.n	8003506 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	3314      	adds	r3, #20
 8003544:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003548:	e853 3f00 	ldrex	r3, [r3]
 800354c:	623b      	str	r3, [r7, #32]
   return(result);
 800354e:	6a3b      	ldr	r3, [r7, #32]
 8003550:	f023 0301 	bic.w	r3, r3, #1
 8003554:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	3314      	adds	r3, #20
 800355e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003562:	633a      	str	r2, [r7, #48]	@ 0x30
 8003564:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003566:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003568:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800356a:	e841 2300 	strex	r3, r2, [r1]
 800356e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1e3      	bne.n	800353e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2220      	movs	r2, #32
 800357a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	330c      	adds	r3, #12
 800358a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	e853 3f00 	ldrex	r3, [r3]
 8003592:	60fb      	str	r3, [r7, #12]
   return(result);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f023 0310 	bic.w	r3, r3, #16
 800359a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	330c      	adds	r3, #12
 80035a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80035a8:	61fa      	str	r2, [r7, #28]
 80035aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ac:	69b9      	ldr	r1, [r7, #24]
 80035ae:	69fa      	ldr	r2, [r7, #28]
 80035b0:	e841 2300 	strex	r3, r2, [r1]
 80035b4:	617b      	str	r3, [r7, #20]
   return(result);
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1e3      	bne.n	8003584 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2202      	movs	r2, #2
 80035c0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80035c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80035c6:	4619      	mov	r1, r3
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 f847 	bl	800365c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80035ce:	e023      	b.n	8003618 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80035d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d009      	beq.n	80035f0 <HAL_UART_IRQHandler+0x4f4>
 80035dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d003      	beq.n	80035f0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 fad4 	bl	8003b96 <UART_Transmit_IT>
    return;
 80035ee:	e014      	b.n	800361a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80035f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00e      	beq.n	800361a <HAL_UART_IRQHandler+0x51e>
 80035fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003604:	2b00      	cmp	r3, #0
 8003606:	d008      	beq.n	800361a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 fb14 	bl	8003c36 <UART_EndTransmit_IT>
    return;
 800360e:	e004      	b.n	800361a <HAL_UART_IRQHandler+0x51e>
    return;
 8003610:	bf00      	nop
 8003612:	e002      	b.n	800361a <HAL_UART_IRQHandler+0x51e>
      return;
 8003614:	bf00      	nop
 8003616:	e000      	b.n	800361a <HAL_UART_IRQHandler+0x51e>
      return;
 8003618:	bf00      	nop
  }
}
 800361a:	37e8      	adds	r7, #232	@ 0xe8
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	460b      	mov	r3, r1
 8003666:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b09c      	sub	sp, #112	@ 0x70
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003680:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800368c:	2b00      	cmp	r3, #0
 800368e:	d172      	bne.n	8003776 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003690:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003692:	2200      	movs	r2, #0
 8003694:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003696:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	330c      	adds	r3, #12
 800369c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800369e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036a0:	e853 3f00 	ldrex	r3, [r3]
 80036a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80036a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80036ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	330c      	adds	r3, #12
 80036b4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80036b6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80036b8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80036bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80036be:	e841 2300 	strex	r3, r2, [r1]
 80036c2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80036c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1e5      	bne.n	8003696 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	3314      	adds	r3, #20
 80036d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036d4:	e853 3f00 	ldrex	r3, [r3]
 80036d8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80036da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036dc:	f023 0301 	bic.w	r3, r3, #1
 80036e0:	667b      	str	r3, [r7, #100]	@ 0x64
 80036e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	3314      	adds	r3, #20
 80036e8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80036ea:	647a      	str	r2, [r7, #68]	@ 0x44
 80036ec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80036f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80036f2:	e841 2300 	strex	r3, r2, [r1]
 80036f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80036f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1e5      	bne.n	80036ca <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	3314      	adds	r3, #20
 8003704:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003708:	e853 3f00 	ldrex	r3, [r3]
 800370c:	623b      	str	r3, [r7, #32]
   return(result);
 800370e:	6a3b      	ldr	r3, [r7, #32]
 8003710:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003714:	663b      	str	r3, [r7, #96]	@ 0x60
 8003716:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	3314      	adds	r3, #20
 800371c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800371e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003720:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003722:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003724:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003726:	e841 2300 	strex	r3, r2, [r1]
 800372a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800372c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1e5      	bne.n	80036fe <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003732:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003734:	2220      	movs	r2, #32
 8003736:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800373a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800373c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800373e:	2b01      	cmp	r3, #1
 8003740:	d119      	bne.n	8003776 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003742:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	330c      	adds	r3, #12
 8003748:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	e853 3f00 	ldrex	r3, [r3]
 8003750:	60fb      	str	r3, [r7, #12]
   return(result);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f023 0310 	bic.w	r3, r3, #16
 8003758:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800375a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	330c      	adds	r3, #12
 8003760:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003762:	61fa      	str	r2, [r7, #28]
 8003764:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003766:	69b9      	ldr	r1, [r7, #24]
 8003768:	69fa      	ldr	r2, [r7, #28]
 800376a:	e841 2300 	strex	r3, r2, [r1]
 800376e:	617b      	str	r3, [r7, #20]
   return(result);
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1e5      	bne.n	8003742 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003776:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003778:	2200      	movs	r2, #0
 800377a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800377c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800377e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003780:	2b01      	cmp	r3, #1
 8003782:	d106      	bne.n	8003792 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003784:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003786:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003788:	4619      	mov	r1, r3
 800378a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800378c:	f7ff ff66 	bl	800365c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003790:	e002      	b.n	8003798 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003792:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003794:	f7fc fed2 	bl	800053c <HAL_UART_RxCpltCallback>
}
 8003798:	bf00      	nop
 800379a:	3770      	adds	r7, #112	@ 0x70
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ac:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2201      	movs	r2, #1
 80037b2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d108      	bne.n	80037ce <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80037c0:	085b      	lsrs	r3, r3, #1
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	4619      	mov	r1, r3
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f7ff ff48 	bl	800365c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80037cc:	e002      	b.n	80037d4 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f7ff ff30 	bl	8003634 <HAL_UART_RxHalfCpltCallback>
}
 80037d4:	bf00      	nop
 80037d6:	3710      	adds	r7, #16
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80037e4:	2300      	movs	r3, #0
 80037e6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ec:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	695b      	ldr	r3, [r3, #20]
 80037f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037f8:	2b80      	cmp	r3, #128	@ 0x80
 80037fa:	bf0c      	ite	eq
 80037fc:	2301      	moveq	r3, #1
 80037fe:	2300      	movne	r3, #0
 8003800:	b2db      	uxtb	r3, r3
 8003802:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2b21      	cmp	r3, #33	@ 0x21
 800380e:	d108      	bne.n	8003822 <UART_DMAError+0x46>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d005      	beq.n	8003822 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	2200      	movs	r2, #0
 800381a:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800381c:	68b8      	ldr	r0, [r7, #8]
 800381e:	f000 f91b 	bl	8003a58 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	695b      	ldr	r3, [r3, #20]
 8003828:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800382c:	2b40      	cmp	r3, #64	@ 0x40
 800382e:	bf0c      	ite	eq
 8003830:	2301      	moveq	r3, #1
 8003832:	2300      	movne	r3, #0
 8003834:	b2db      	uxtb	r3, r3
 8003836:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800383e:	b2db      	uxtb	r3, r3
 8003840:	2b22      	cmp	r3, #34	@ 0x22
 8003842:	d108      	bne.n	8003856 <UART_DMAError+0x7a>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d005      	beq.n	8003856 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	2200      	movs	r2, #0
 800384e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8003850:	68b8      	ldr	r0, [r7, #8]
 8003852:	f000 f929 	bl	8003aa8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800385a:	f043 0210 	orr.w	r2, r3, #16
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003862:	68b8      	ldr	r0, [r7, #8]
 8003864:	f7ff fef0 	bl	8003648 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003868:	bf00      	nop
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b086      	sub	sp, #24
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	603b      	str	r3, [r7, #0]
 800387c:	4613      	mov	r3, r2
 800387e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003880:	e03b      	b.n	80038fa <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003882:	6a3b      	ldr	r3, [r7, #32]
 8003884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003888:	d037      	beq.n	80038fa <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800388a:	f7fd fa81 	bl	8000d90 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	6a3a      	ldr	r2, [r7, #32]
 8003896:	429a      	cmp	r2, r3
 8003898:	d302      	bcc.n	80038a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800389a:	6a3b      	ldr	r3, [r7, #32]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d101      	bne.n	80038a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e03a      	b.n	800391a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	f003 0304 	and.w	r3, r3, #4
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d023      	beq.n	80038fa <UART_WaitOnFlagUntilTimeout+0x8a>
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	2b80      	cmp	r3, #128	@ 0x80
 80038b6:	d020      	beq.n	80038fa <UART_WaitOnFlagUntilTimeout+0x8a>
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	2b40      	cmp	r3, #64	@ 0x40
 80038bc:	d01d      	beq.n	80038fa <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0308 	and.w	r3, r3, #8
 80038c8:	2b08      	cmp	r3, #8
 80038ca:	d116      	bne.n	80038fa <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80038cc:	2300      	movs	r3, #0
 80038ce:	617b      	str	r3, [r7, #20]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	617b      	str	r3, [r7, #20]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	617b      	str	r3, [r7, #20]
 80038e0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f000 f8e0 	bl	8003aa8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2208      	movs	r2, #8
 80038ec:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e00f      	b.n	800391a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	4013      	ands	r3, r2
 8003904:	68ba      	ldr	r2, [r7, #8]
 8003906:	429a      	cmp	r2, r3
 8003908:	bf0c      	ite	eq
 800390a:	2301      	moveq	r3, #1
 800390c:	2300      	movne	r3, #0
 800390e:	b2db      	uxtb	r3, r3
 8003910:	461a      	mov	r2, r3
 8003912:	79fb      	ldrb	r3, [r7, #7]
 8003914:	429a      	cmp	r2, r3
 8003916:	d0b4      	beq.n	8003882 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3718      	adds	r7, #24
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
	...

08003924 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b098      	sub	sp, #96	@ 0x60
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	4613      	mov	r3, r2
 8003930:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003932:	68ba      	ldr	r2, [r7, #8]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	88fa      	ldrh	r2, [r7, #6]
 800393c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2200      	movs	r2, #0
 8003942:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2222      	movs	r2, #34	@ 0x22
 8003948:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003950:	4a3e      	ldr	r2, [pc, #248]	@ (8003a4c <UART_Start_Receive_DMA+0x128>)
 8003952:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003958:	4a3d      	ldr	r2, [pc, #244]	@ (8003a50 <UART_Start_Receive_DMA+0x12c>)
 800395a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003960:	4a3c      	ldr	r2, [pc, #240]	@ (8003a54 <UART_Start_Receive_DMA+0x130>)
 8003962:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003968:	2200      	movs	r2, #0
 800396a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800396c:	f107 0308 	add.w	r3, r7, #8
 8003970:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	3304      	adds	r3, #4
 800397c:	4619      	mov	r1, r3
 800397e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	88fb      	ldrh	r3, [r7, #6]
 8003984:	f7fd fba0 	bl	80010c8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003988:	2300      	movs	r3, #0
 800398a:	613b      	str	r3, [r7, #16]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	613b      	str	r3, [r7, #16]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	613b      	str	r3, [r7, #16]
 800399c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d019      	beq.n	80039da <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	330c      	adds	r3, #12
 80039ac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039b0:	e853 3f00 	ldrex	r3, [r3]
 80039b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80039b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	330c      	adds	r3, #12
 80039c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80039c6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80039c8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ca:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80039cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80039ce:	e841 2300 	strex	r3, r2, [r1]
 80039d2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80039d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1e5      	bne.n	80039a6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	3314      	adds	r3, #20
 80039e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039e4:	e853 3f00 	ldrex	r3, [r3]
 80039e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80039ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ec:	f043 0301 	orr.w	r3, r3, #1
 80039f0:	657b      	str	r3, [r7, #84]	@ 0x54
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	3314      	adds	r3, #20
 80039f8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80039fa:	63ba      	str	r2, [r7, #56]	@ 0x38
 80039fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039fe:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003a00:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003a02:	e841 2300 	strex	r3, r2, [r1]
 8003a06:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1e5      	bne.n	80039da <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	3314      	adds	r3, #20
 8003a14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	e853 3f00 	ldrex	r3, [r3]
 8003a1c:	617b      	str	r3, [r7, #20]
   return(result);
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a24:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	3314      	adds	r3, #20
 8003a2c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003a2e:	627a      	str	r2, [r7, #36]	@ 0x24
 8003a30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a32:	6a39      	ldr	r1, [r7, #32]
 8003a34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a36:	e841 2300 	strex	r3, r2, [r1]
 8003a3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1e5      	bne.n	8003a0e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3760      	adds	r7, #96	@ 0x60
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	08003675 	.word	0x08003675
 8003a50:	080037a1 	.word	0x080037a1
 8003a54:	080037dd 	.word	0x080037dd

08003a58 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b089      	sub	sp, #36	@ 0x24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	330c      	adds	r3, #12
 8003a66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	e853 3f00 	ldrex	r3, [r3]
 8003a6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003a76:	61fb      	str	r3, [r7, #28]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	330c      	adds	r3, #12
 8003a7e:	69fa      	ldr	r2, [r7, #28]
 8003a80:	61ba      	str	r2, [r7, #24]
 8003a82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a84:	6979      	ldr	r1, [r7, #20]
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	e841 2300 	strex	r3, r2, [r1]
 8003a8c:	613b      	str	r3, [r7, #16]
   return(result);
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1e5      	bne.n	8003a60 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2220      	movs	r2, #32
 8003a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003a9c:	bf00      	nop
 8003a9e:	3724      	adds	r7, #36	@ 0x24
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b095      	sub	sp, #84	@ 0x54
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	330c      	adds	r3, #12
 8003ab6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aba:	e853 3f00 	ldrex	r3, [r3]
 8003abe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ac2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ac6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	330c      	adds	r3, #12
 8003ace:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ad0:	643a      	str	r2, [r7, #64]	@ 0x40
 8003ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ad6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ad8:	e841 2300 	strex	r3, r2, [r1]
 8003adc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1e5      	bne.n	8003ab0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	3314      	adds	r3, #20
 8003aea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aec:	6a3b      	ldr	r3, [r7, #32]
 8003aee:	e853 3f00 	ldrex	r3, [r3]
 8003af2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	f023 0301 	bic.w	r3, r3, #1
 8003afa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	3314      	adds	r3, #20
 8003b02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b04:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b06:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b0c:	e841 2300 	strex	r3, r2, [r1]
 8003b10:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1e5      	bne.n	8003ae4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d119      	bne.n	8003b54 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	330c      	adds	r3, #12
 8003b26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	e853 3f00 	ldrex	r3, [r3]
 8003b2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	f023 0310 	bic.w	r3, r3, #16
 8003b36:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	330c      	adds	r3, #12
 8003b3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b40:	61ba      	str	r2, [r7, #24]
 8003b42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b44:	6979      	ldr	r1, [r7, #20]
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	e841 2300 	strex	r3, r2, [r1]
 8003b4c:	613b      	str	r3, [r7, #16]
   return(result);
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1e5      	bne.n	8003b20 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2220      	movs	r2, #32
 8003b58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003b62:	bf00      	nop
 8003b64:	3754      	adds	r7, #84	@ 0x54
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr

08003b6e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b084      	sub	sp, #16
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b7a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b88:	68f8      	ldr	r0, [r7, #12]
 8003b8a:	f7ff fd5d 	bl	8003648 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b8e:	bf00      	nop
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b96:	b480      	push	{r7}
 8003b98:	b085      	sub	sp, #20
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b21      	cmp	r3, #33	@ 0x21
 8003ba8:	d13e      	bne.n	8003c28 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bb2:	d114      	bne.n	8003bde <UART_Transmit_IT+0x48>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d110      	bne.n	8003bde <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	881b      	ldrh	r3, [r3, #0]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bd0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	1c9a      	adds	r2, r3, #2
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	621a      	str	r2, [r3, #32]
 8003bdc:	e008      	b.n	8003bf0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	1c59      	adds	r1, r3, #1
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	6211      	str	r1, [r2, #32]
 8003be8:	781a      	ldrb	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d10f      	bne.n	8003c24 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68da      	ldr	r2, [r3, #12]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c12:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68da      	ldr	r2, [r3, #12]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c22:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c24:	2300      	movs	r3, #0
 8003c26:	e000      	b.n	8003c2a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003c28:	2302      	movs	r3, #2
  }
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3714      	adds	r7, #20
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b082      	sub	sp, #8
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68da      	ldr	r2, [r3, #12]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c4c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2220      	movs	r2, #32
 8003c52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f7ff fce2 	bl	8003620 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3708      	adds	r7, #8
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b08c      	sub	sp, #48	@ 0x30
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b22      	cmp	r3, #34	@ 0x22
 8003c78:	f040 80ae 	bne.w	8003dd8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c84:	d117      	bne.n	8003cb6 <UART_Receive_IT+0x50>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d113      	bne.n	8003cb6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c96:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ca8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cae:	1c9a      	adds	r2, r3, #2
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	629a      	str	r2, [r3, #40]	@ 0x28
 8003cb4:	e026      	b.n	8003d04 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cc8:	d007      	beq.n	8003cda <UART_Receive_IT+0x74>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d10a      	bne.n	8003ce8 <UART_Receive_IT+0x82>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d106      	bne.n	8003ce8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	b2da      	uxtb	r2, r3
 8003ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ce4:	701a      	strb	r2, [r3, #0]
 8003ce6:	e008      	b.n	8003cfa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cf4:	b2da      	uxtb	r2, r3
 8003cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cf8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cfe:	1c5a      	adds	r2, r3, #1
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	4619      	mov	r1, r3
 8003d12:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d15d      	bne.n	8003dd4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68da      	ldr	r2, [r3, #12]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f022 0220 	bic.w	r2, r2, #32
 8003d26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68da      	ldr	r2, [r3, #12]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	695a      	ldr	r2, [r3, #20]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 0201 	bic.w	r2, r2, #1
 8003d46:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d135      	bne.n	8003dca <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	330c      	adds	r3, #12
 8003d6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	e853 3f00 	ldrex	r3, [r3]
 8003d72:	613b      	str	r3, [r7, #16]
   return(result);
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	f023 0310 	bic.w	r3, r3, #16
 8003d7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	330c      	adds	r3, #12
 8003d82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d84:	623a      	str	r2, [r7, #32]
 8003d86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d88:	69f9      	ldr	r1, [r7, #28]
 8003d8a:	6a3a      	ldr	r2, [r7, #32]
 8003d8c:	e841 2300 	strex	r3, r2, [r1]
 8003d90:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1e5      	bne.n	8003d64 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0310 	and.w	r3, r3, #16
 8003da2:	2b10      	cmp	r3, #16
 8003da4:	d10a      	bne.n	8003dbc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003da6:	2300      	movs	r3, #0
 8003da8:	60fb      	str	r3, [r7, #12]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	60fb      	str	r3, [r7, #12]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	60fb      	str	r3, [r7, #12]
 8003dba:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f7ff fc4a 	bl	800365c <HAL_UARTEx_RxEventCallback>
 8003dc8:	e002      	b.n	8003dd0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7fc fbb6 	bl	800053c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	e002      	b.n	8003dda <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	e000      	b.n	8003dda <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003dd8:	2302      	movs	r3, #2
  }
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3730      	adds	r7, #48	@ 0x30
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
	...

08003de4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003de8:	b0c0      	sub	sp, #256	@ 0x100
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e00:	68d9      	ldr	r1, [r3, #12]
 8003e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	ea40 0301 	orr.w	r3, r0, r1
 8003e0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e12:	689a      	ldr	r2, [r3, #8]
 8003e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	431a      	orrs	r2, r3
 8003e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003e3c:	f021 010c 	bic.w	r1, r1, #12
 8003e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003e4a:	430b      	orrs	r3, r1
 8003e4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e5e:	6999      	ldr	r1, [r3, #24]
 8003e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	ea40 0301 	orr.w	r3, r0, r1
 8003e6a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	4b8f      	ldr	r3, [pc, #572]	@ (80040b0 <UART_SetConfig+0x2cc>)
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d005      	beq.n	8003e84 <UART_SetConfig+0xa0>
 8003e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	4b8d      	ldr	r3, [pc, #564]	@ (80040b4 <UART_SetConfig+0x2d0>)
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d104      	bne.n	8003e8e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e84:	f7fe f884 	bl	8001f90 <HAL_RCC_GetPCLK2Freq>
 8003e88:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003e8c:	e003      	b.n	8003e96 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e8e:	f7fe f86b 	bl	8001f68 <HAL_RCC_GetPCLK1Freq>
 8003e92:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e9a:	69db      	ldr	r3, [r3, #28]
 8003e9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ea0:	f040 810c 	bne.w	80040bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ea4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003eae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003eb2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003eb6:	4622      	mov	r2, r4
 8003eb8:	462b      	mov	r3, r5
 8003eba:	1891      	adds	r1, r2, r2
 8003ebc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003ebe:	415b      	adcs	r3, r3
 8003ec0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003ec2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003ec6:	4621      	mov	r1, r4
 8003ec8:	eb12 0801 	adds.w	r8, r2, r1
 8003ecc:	4629      	mov	r1, r5
 8003ece:	eb43 0901 	adc.w	r9, r3, r1
 8003ed2:	f04f 0200 	mov.w	r2, #0
 8003ed6:	f04f 0300 	mov.w	r3, #0
 8003eda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ede:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ee2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ee6:	4690      	mov	r8, r2
 8003ee8:	4699      	mov	r9, r3
 8003eea:	4623      	mov	r3, r4
 8003eec:	eb18 0303 	adds.w	r3, r8, r3
 8003ef0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003ef4:	462b      	mov	r3, r5
 8003ef6:	eb49 0303 	adc.w	r3, r9, r3
 8003efa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003f0a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003f0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003f12:	460b      	mov	r3, r1
 8003f14:	18db      	adds	r3, r3, r3
 8003f16:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f18:	4613      	mov	r3, r2
 8003f1a:	eb42 0303 	adc.w	r3, r2, r3
 8003f1e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003f24:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003f28:	f7fc f972 	bl	8000210 <__aeabi_uldivmod>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	460b      	mov	r3, r1
 8003f30:	4b61      	ldr	r3, [pc, #388]	@ (80040b8 <UART_SetConfig+0x2d4>)
 8003f32:	fba3 2302 	umull	r2, r3, r3, r2
 8003f36:	095b      	lsrs	r3, r3, #5
 8003f38:	011c      	lsls	r4, r3, #4
 8003f3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f44:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003f48:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003f4c:	4642      	mov	r2, r8
 8003f4e:	464b      	mov	r3, r9
 8003f50:	1891      	adds	r1, r2, r2
 8003f52:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003f54:	415b      	adcs	r3, r3
 8003f56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003f5c:	4641      	mov	r1, r8
 8003f5e:	eb12 0a01 	adds.w	sl, r2, r1
 8003f62:	4649      	mov	r1, r9
 8003f64:	eb43 0b01 	adc.w	fp, r3, r1
 8003f68:	f04f 0200 	mov.w	r2, #0
 8003f6c:	f04f 0300 	mov.w	r3, #0
 8003f70:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f74:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f7c:	4692      	mov	sl, r2
 8003f7e:	469b      	mov	fp, r3
 8003f80:	4643      	mov	r3, r8
 8003f82:	eb1a 0303 	adds.w	r3, sl, r3
 8003f86:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f8a:	464b      	mov	r3, r9
 8003f8c:	eb4b 0303 	adc.w	r3, fp, r3
 8003f90:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003fa0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003fa4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003fa8:	460b      	mov	r3, r1
 8003faa:	18db      	adds	r3, r3, r3
 8003fac:	643b      	str	r3, [r7, #64]	@ 0x40
 8003fae:	4613      	mov	r3, r2
 8003fb0:	eb42 0303 	adc.w	r3, r2, r3
 8003fb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fb6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003fba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003fbe:	f7fc f927 	bl	8000210 <__aeabi_uldivmod>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	4611      	mov	r1, r2
 8003fc8:	4b3b      	ldr	r3, [pc, #236]	@ (80040b8 <UART_SetConfig+0x2d4>)
 8003fca:	fba3 2301 	umull	r2, r3, r3, r1
 8003fce:	095b      	lsrs	r3, r3, #5
 8003fd0:	2264      	movs	r2, #100	@ 0x64
 8003fd2:	fb02 f303 	mul.w	r3, r2, r3
 8003fd6:	1acb      	subs	r3, r1, r3
 8003fd8:	00db      	lsls	r3, r3, #3
 8003fda:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003fde:	4b36      	ldr	r3, [pc, #216]	@ (80040b8 <UART_SetConfig+0x2d4>)
 8003fe0:	fba3 2302 	umull	r2, r3, r3, r2
 8003fe4:	095b      	lsrs	r3, r3, #5
 8003fe6:	005b      	lsls	r3, r3, #1
 8003fe8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003fec:	441c      	add	r4, r3
 8003fee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ff8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003ffc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004000:	4642      	mov	r2, r8
 8004002:	464b      	mov	r3, r9
 8004004:	1891      	adds	r1, r2, r2
 8004006:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004008:	415b      	adcs	r3, r3
 800400a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800400c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004010:	4641      	mov	r1, r8
 8004012:	1851      	adds	r1, r2, r1
 8004014:	6339      	str	r1, [r7, #48]	@ 0x30
 8004016:	4649      	mov	r1, r9
 8004018:	414b      	adcs	r3, r1
 800401a:	637b      	str	r3, [r7, #52]	@ 0x34
 800401c:	f04f 0200 	mov.w	r2, #0
 8004020:	f04f 0300 	mov.w	r3, #0
 8004024:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004028:	4659      	mov	r1, fp
 800402a:	00cb      	lsls	r3, r1, #3
 800402c:	4651      	mov	r1, sl
 800402e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004032:	4651      	mov	r1, sl
 8004034:	00ca      	lsls	r2, r1, #3
 8004036:	4610      	mov	r0, r2
 8004038:	4619      	mov	r1, r3
 800403a:	4603      	mov	r3, r0
 800403c:	4642      	mov	r2, r8
 800403e:	189b      	adds	r3, r3, r2
 8004040:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004044:	464b      	mov	r3, r9
 8004046:	460a      	mov	r2, r1
 8004048:	eb42 0303 	adc.w	r3, r2, r3
 800404c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800405c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004060:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004064:	460b      	mov	r3, r1
 8004066:	18db      	adds	r3, r3, r3
 8004068:	62bb      	str	r3, [r7, #40]	@ 0x28
 800406a:	4613      	mov	r3, r2
 800406c:	eb42 0303 	adc.w	r3, r2, r3
 8004070:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004072:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004076:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800407a:	f7fc f8c9 	bl	8000210 <__aeabi_uldivmod>
 800407e:	4602      	mov	r2, r0
 8004080:	460b      	mov	r3, r1
 8004082:	4b0d      	ldr	r3, [pc, #52]	@ (80040b8 <UART_SetConfig+0x2d4>)
 8004084:	fba3 1302 	umull	r1, r3, r3, r2
 8004088:	095b      	lsrs	r3, r3, #5
 800408a:	2164      	movs	r1, #100	@ 0x64
 800408c:	fb01 f303 	mul.w	r3, r1, r3
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	3332      	adds	r3, #50	@ 0x32
 8004096:	4a08      	ldr	r2, [pc, #32]	@ (80040b8 <UART_SetConfig+0x2d4>)
 8004098:	fba2 2303 	umull	r2, r3, r2, r3
 800409c:	095b      	lsrs	r3, r3, #5
 800409e:	f003 0207 	and.w	r2, r3, #7
 80040a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4422      	add	r2, r4
 80040aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80040ac:	e106      	b.n	80042bc <UART_SetConfig+0x4d8>
 80040ae:	bf00      	nop
 80040b0:	40011000 	.word	0x40011000
 80040b4:	40011400 	.word	0x40011400
 80040b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040c0:	2200      	movs	r2, #0
 80040c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80040c6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80040ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80040ce:	4642      	mov	r2, r8
 80040d0:	464b      	mov	r3, r9
 80040d2:	1891      	adds	r1, r2, r2
 80040d4:	6239      	str	r1, [r7, #32]
 80040d6:	415b      	adcs	r3, r3
 80040d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80040da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80040de:	4641      	mov	r1, r8
 80040e0:	1854      	adds	r4, r2, r1
 80040e2:	4649      	mov	r1, r9
 80040e4:	eb43 0501 	adc.w	r5, r3, r1
 80040e8:	f04f 0200 	mov.w	r2, #0
 80040ec:	f04f 0300 	mov.w	r3, #0
 80040f0:	00eb      	lsls	r3, r5, #3
 80040f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040f6:	00e2      	lsls	r2, r4, #3
 80040f8:	4614      	mov	r4, r2
 80040fa:	461d      	mov	r5, r3
 80040fc:	4643      	mov	r3, r8
 80040fe:	18e3      	adds	r3, r4, r3
 8004100:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004104:	464b      	mov	r3, r9
 8004106:	eb45 0303 	adc.w	r3, r5, r3
 800410a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800410e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800411a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800411e:	f04f 0200 	mov.w	r2, #0
 8004122:	f04f 0300 	mov.w	r3, #0
 8004126:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800412a:	4629      	mov	r1, r5
 800412c:	008b      	lsls	r3, r1, #2
 800412e:	4621      	mov	r1, r4
 8004130:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004134:	4621      	mov	r1, r4
 8004136:	008a      	lsls	r2, r1, #2
 8004138:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800413c:	f7fc f868 	bl	8000210 <__aeabi_uldivmod>
 8004140:	4602      	mov	r2, r0
 8004142:	460b      	mov	r3, r1
 8004144:	4b60      	ldr	r3, [pc, #384]	@ (80042c8 <UART_SetConfig+0x4e4>)
 8004146:	fba3 2302 	umull	r2, r3, r3, r2
 800414a:	095b      	lsrs	r3, r3, #5
 800414c:	011c      	lsls	r4, r3, #4
 800414e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004152:	2200      	movs	r2, #0
 8004154:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004158:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800415c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004160:	4642      	mov	r2, r8
 8004162:	464b      	mov	r3, r9
 8004164:	1891      	adds	r1, r2, r2
 8004166:	61b9      	str	r1, [r7, #24]
 8004168:	415b      	adcs	r3, r3
 800416a:	61fb      	str	r3, [r7, #28]
 800416c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004170:	4641      	mov	r1, r8
 8004172:	1851      	adds	r1, r2, r1
 8004174:	6139      	str	r1, [r7, #16]
 8004176:	4649      	mov	r1, r9
 8004178:	414b      	adcs	r3, r1
 800417a:	617b      	str	r3, [r7, #20]
 800417c:	f04f 0200 	mov.w	r2, #0
 8004180:	f04f 0300 	mov.w	r3, #0
 8004184:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004188:	4659      	mov	r1, fp
 800418a:	00cb      	lsls	r3, r1, #3
 800418c:	4651      	mov	r1, sl
 800418e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004192:	4651      	mov	r1, sl
 8004194:	00ca      	lsls	r2, r1, #3
 8004196:	4610      	mov	r0, r2
 8004198:	4619      	mov	r1, r3
 800419a:	4603      	mov	r3, r0
 800419c:	4642      	mov	r2, r8
 800419e:	189b      	adds	r3, r3, r2
 80041a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80041a4:	464b      	mov	r3, r9
 80041a6:	460a      	mov	r2, r1
 80041a8:	eb42 0303 	adc.w	r3, r2, r3
 80041ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80041b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80041ba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80041bc:	f04f 0200 	mov.w	r2, #0
 80041c0:	f04f 0300 	mov.w	r3, #0
 80041c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80041c8:	4649      	mov	r1, r9
 80041ca:	008b      	lsls	r3, r1, #2
 80041cc:	4641      	mov	r1, r8
 80041ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041d2:	4641      	mov	r1, r8
 80041d4:	008a      	lsls	r2, r1, #2
 80041d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80041da:	f7fc f819 	bl	8000210 <__aeabi_uldivmod>
 80041de:	4602      	mov	r2, r0
 80041e0:	460b      	mov	r3, r1
 80041e2:	4611      	mov	r1, r2
 80041e4:	4b38      	ldr	r3, [pc, #224]	@ (80042c8 <UART_SetConfig+0x4e4>)
 80041e6:	fba3 2301 	umull	r2, r3, r3, r1
 80041ea:	095b      	lsrs	r3, r3, #5
 80041ec:	2264      	movs	r2, #100	@ 0x64
 80041ee:	fb02 f303 	mul.w	r3, r2, r3
 80041f2:	1acb      	subs	r3, r1, r3
 80041f4:	011b      	lsls	r3, r3, #4
 80041f6:	3332      	adds	r3, #50	@ 0x32
 80041f8:	4a33      	ldr	r2, [pc, #204]	@ (80042c8 <UART_SetConfig+0x4e4>)
 80041fa:	fba2 2303 	umull	r2, r3, r2, r3
 80041fe:	095b      	lsrs	r3, r3, #5
 8004200:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004204:	441c      	add	r4, r3
 8004206:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800420a:	2200      	movs	r2, #0
 800420c:	673b      	str	r3, [r7, #112]	@ 0x70
 800420e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004210:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004214:	4642      	mov	r2, r8
 8004216:	464b      	mov	r3, r9
 8004218:	1891      	adds	r1, r2, r2
 800421a:	60b9      	str	r1, [r7, #8]
 800421c:	415b      	adcs	r3, r3
 800421e:	60fb      	str	r3, [r7, #12]
 8004220:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004224:	4641      	mov	r1, r8
 8004226:	1851      	adds	r1, r2, r1
 8004228:	6039      	str	r1, [r7, #0]
 800422a:	4649      	mov	r1, r9
 800422c:	414b      	adcs	r3, r1
 800422e:	607b      	str	r3, [r7, #4]
 8004230:	f04f 0200 	mov.w	r2, #0
 8004234:	f04f 0300 	mov.w	r3, #0
 8004238:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800423c:	4659      	mov	r1, fp
 800423e:	00cb      	lsls	r3, r1, #3
 8004240:	4651      	mov	r1, sl
 8004242:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004246:	4651      	mov	r1, sl
 8004248:	00ca      	lsls	r2, r1, #3
 800424a:	4610      	mov	r0, r2
 800424c:	4619      	mov	r1, r3
 800424e:	4603      	mov	r3, r0
 8004250:	4642      	mov	r2, r8
 8004252:	189b      	adds	r3, r3, r2
 8004254:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004256:	464b      	mov	r3, r9
 8004258:	460a      	mov	r2, r1
 800425a:	eb42 0303 	adc.w	r3, r2, r3
 800425e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	663b      	str	r3, [r7, #96]	@ 0x60
 800426a:	667a      	str	r2, [r7, #100]	@ 0x64
 800426c:	f04f 0200 	mov.w	r2, #0
 8004270:	f04f 0300 	mov.w	r3, #0
 8004274:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004278:	4649      	mov	r1, r9
 800427a:	008b      	lsls	r3, r1, #2
 800427c:	4641      	mov	r1, r8
 800427e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004282:	4641      	mov	r1, r8
 8004284:	008a      	lsls	r2, r1, #2
 8004286:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800428a:	f7fb ffc1 	bl	8000210 <__aeabi_uldivmod>
 800428e:	4602      	mov	r2, r0
 8004290:	460b      	mov	r3, r1
 8004292:	4b0d      	ldr	r3, [pc, #52]	@ (80042c8 <UART_SetConfig+0x4e4>)
 8004294:	fba3 1302 	umull	r1, r3, r3, r2
 8004298:	095b      	lsrs	r3, r3, #5
 800429a:	2164      	movs	r1, #100	@ 0x64
 800429c:	fb01 f303 	mul.w	r3, r1, r3
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	011b      	lsls	r3, r3, #4
 80042a4:	3332      	adds	r3, #50	@ 0x32
 80042a6:	4a08      	ldr	r2, [pc, #32]	@ (80042c8 <UART_SetConfig+0x4e4>)
 80042a8:	fba2 2303 	umull	r2, r3, r2, r3
 80042ac:	095b      	lsrs	r3, r3, #5
 80042ae:	f003 020f 	and.w	r2, r3, #15
 80042b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4422      	add	r2, r4
 80042ba:	609a      	str	r2, [r3, #8]
}
 80042bc:	bf00      	nop
 80042be:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80042c2:	46bd      	mov	sp, r7
 80042c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042c8:	51eb851f 	.word	0x51eb851f

080042cc <__NVIC_SetPriority>:
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	4603      	mov	r3, r0
 80042d4:	6039      	str	r1, [r7, #0]
 80042d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	db0a      	blt.n	80042f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	b2da      	uxtb	r2, r3
 80042e4:	490c      	ldr	r1, [pc, #48]	@ (8004318 <__NVIC_SetPriority+0x4c>)
 80042e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ea:	0112      	lsls	r2, r2, #4
 80042ec:	b2d2      	uxtb	r2, r2
 80042ee:	440b      	add	r3, r1
 80042f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80042f4:	e00a      	b.n	800430c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	b2da      	uxtb	r2, r3
 80042fa:	4908      	ldr	r1, [pc, #32]	@ (800431c <__NVIC_SetPriority+0x50>)
 80042fc:	79fb      	ldrb	r3, [r7, #7]
 80042fe:	f003 030f 	and.w	r3, r3, #15
 8004302:	3b04      	subs	r3, #4
 8004304:	0112      	lsls	r2, r2, #4
 8004306:	b2d2      	uxtb	r2, r2
 8004308:	440b      	add	r3, r1
 800430a:	761a      	strb	r2, [r3, #24]
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	e000e100 	.word	0xe000e100
 800431c:	e000ed00 	.word	0xe000ed00

08004320 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004320:	b580      	push	{r7, lr}
 8004322:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004324:	4b05      	ldr	r3, [pc, #20]	@ (800433c <SysTick_Handler+0x1c>)
 8004326:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004328:	f001 fdc6 	bl	8005eb8 <xTaskGetSchedulerState>
 800432c:	4603      	mov	r3, r0
 800432e:	2b01      	cmp	r3, #1
 8004330:	d001      	beq.n	8004336 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004332:	f002 fbc1 	bl	8006ab8 <xPortSysTickHandler>
  }
}
 8004336:	bf00      	nop
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	e000e010 	.word	0xe000e010

08004340 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004340:	b580      	push	{r7, lr}
 8004342:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004344:	2100      	movs	r1, #0
 8004346:	f06f 0004 	mvn.w	r0, #4
 800434a:	f7ff ffbf 	bl	80042cc <__NVIC_SetPriority>
#endif
}
 800434e:	bf00      	nop
 8004350:	bd80      	pop	{r7, pc}
	...

08004354 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800435a:	f3ef 8305 	mrs	r3, IPSR
 800435e:	603b      	str	r3, [r7, #0]
  return(result);
 8004360:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004362:	2b00      	cmp	r3, #0
 8004364:	d003      	beq.n	800436e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004366:	f06f 0305 	mvn.w	r3, #5
 800436a:	607b      	str	r3, [r7, #4]
 800436c:	e00c      	b.n	8004388 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800436e:	4b0a      	ldr	r3, [pc, #40]	@ (8004398 <osKernelInitialize+0x44>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d105      	bne.n	8004382 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004376:	4b08      	ldr	r3, [pc, #32]	@ (8004398 <osKernelInitialize+0x44>)
 8004378:	2201      	movs	r2, #1
 800437a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800437c:	2300      	movs	r3, #0
 800437e:	607b      	str	r3, [r7, #4]
 8004380:	e002      	b.n	8004388 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004382:	f04f 33ff 	mov.w	r3, #4294967295
 8004386:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004388:	687b      	ldr	r3, [r7, #4]
}
 800438a:	4618      	mov	r0, r3
 800438c:	370c      	adds	r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	20000194 	.word	0x20000194

0800439c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043a2:	f3ef 8305 	mrs	r3, IPSR
 80043a6:	603b      	str	r3, [r7, #0]
  return(result);
 80043a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d003      	beq.n	80043b6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80043ae:	f06f 0305 	mvn.w	r3, #5
 80043b2:	607b      	str	r3, [r7, #4]
 80043b4:	e010      	b.n	80043d8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80043b6:	4b0b      	ldr	r3, [pc, #44]	@ (80043e4 <osKernelStart+0x48>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d109      	bne.n	80043d2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80043be:	f7ff ffbf 	bl	8004340 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80043c2:	4b08      	ldr	r3, [pc, #32]	@ (80043e4 <osKernelStart+0x48>)
 80043c4:	2202      	movs	r2, #2
 80043c6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80043c8:	f001 f928 	bl	800561c <vTaskStartScheduler>
      stat = osOK;
 80043cc:	2300      	movs	r3, #0
 80043ce:	607b      	str	r3, [r7, #4]
 80043d0:	e002      	b.n	80043d8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80043d2:	f04f 33ff 	mov.w	r3, #4294967295
 80043d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80043d8:	687b      	ldr	r3, [r7, #4]
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3708      	adds	r7, #8
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	20000194 	.word	0x20000194

080043e8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b08e      	sub	sp, #56	@ 0x38
 80043ec:	af04      	add	r7, sp, #16
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80043f4:	2300      	movs	r3, #0
 80043f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043f8:	f3ef 8305 	mrs	r3, IPSR
 80043fc:	617b      	str	r3, [r7, #20]
  return(result);
 80043fe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004400:	2b00      	cmp	r3, #0
 8004402:	d17e      	bne.n	8004502 <osThreadNew+0x11a>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d07b      	beq.n	8004502 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800440a:	2380      	movs	r3, #128	@ 0x80
 800440c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800440e:	2318      	movs	r3, #24
 8004410:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004412:	2300      	movs	r3, #0
 8004414:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004416:	f04f 33ff 	mov.w	r3, #4294967295
 800441a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d045      	beq.n	80044ae <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d002      	beq.n	8004430 <osThreadNew+0x48>
        name = attr->name;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d002      	beq.n	800443e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d008      	beq.n	8004456 <osThreadNew+0x6e>
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	2b38      	cmp	r3, #56	@ 0x38
 8004448:	d805      	bhi.n	8004456 <osThreadNew+0x6e>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <osThreadNew+0x72>
        return (NULL);
 8004456:	2300      	movs	r3, #0
 8004458:	e054      	b.n	8004504 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d003      	beq.n	800446a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	089b      	lsrs	r3, r3, #2
 8004468:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00e      	beq.n	8004490 <osThreadNew+0xa8>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	2b5b      	cmp	r3, #91	@ 0x5b
 8004478:	d90a      	bls.n	8004490 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800447e:	2b00      	cmp	r3, #0
 8004480:	d006      	beq.n	8004490 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d002      	beq.n	8004490 <osThreadNew+0xa8>
        mem = 1;
 800448a:	2301      	movs	r3, #1
 800448c:	61bb      	str	r3, [r7, #24]
 800448e:	e010      	b.n	80044b2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d10c      	bne.n	80044b2 <osThreadNew+0xca>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d108      	bne.n	80044b2 <osThreadNew+0xca>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d104      	bne.n	80044b2 <osThreadNew+0xca>
          mem = 0;
 80044a8:	2300      	movs	r3, #0
 80044aa:	61bb      	str	r3, [r7, #24]
 80044ac:	e001      	b.n	80044b2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80044ae:	2300      	movs	r3, #0
 80044b0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d110      	bne.n	80044da <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80044c0:	9202      	str	r2, [sp, #8]
 80044c2:	9301      	str	r3, [sp, #4]
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	9300      	str	r3, [sp, #0]
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	6a3a      	ldr	r2, [r7, #32]
 80044cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f000 fec8 	bl	8005264 <xTaskCreateStatic>
 80044d4:	4603      	mov	r3, r0
 80044d6:	613b      	str	r3, [r7, #16]
 80044d8:	e013      	b.n	8004502 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d110      	bne.n	8004502 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80044e0:	6a3b      	ldr	r3, [r7, #32]
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	f107 0310 	add.w	r3, r7, #16
 80044e8:	9301      	str	r3, [sp, #4]
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	9300      	str	r3, [sp, #0]
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f000 ff16 	bl	8005324 <xTaskCreate>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d001      	beq.n	8004502 <osThreadNew+0x11a>
            hTask = NULL;
 80044fe:	2300      	movs	r3, #0
 8004500:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004502:	693b      	ldr	r3, [r7, #16]
}
 8004504:	4618      	mov	r0, r3
 8004506:	3728      	adds	r7, #40	@ 0x28
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004514:	f3ef 8305 	mrs	r3, IPSR
 8004518:	60bb      	str	r3, [r7, #8]
  return(result);
 800451a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800451c:	2b00      	cmp	r3, #0
 800451e:	d003      	beq.n	8004528 <osDelay+0x1c>
    stat = osErrorISR;
 8004520:	f06f 0305 	mvn.w	r3, #5
 8004524:	60fb      	str	r3, [r7, #12]
 8004526:	e007      	b.n	8004538 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004528:	2300      	movs	r3, #0
 800452a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d002      	beq.n	8004538 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f001 f83c 	bl	80055b0 <vTaskDelay>
    }
  }

  return (stat);
 8004538:	68fb      	ldr	r3, [r7, #12]
}
 800453a:	4618      	mov	r0, r3
 800453c:	3710      	adds	r7, #16
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004542:	b580      	push	{r7, lr}
 8004544:	b08a      	sub	sp, #40	@ 0x28
 8004546:	af02      	add	r7, sp, #8
 8004548:	60f8      	str	r0, [r7, #12]
 800454a:	60b9      	str	r1, [r7, #8]
 800454c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800454e:	2300      	movs	r3, #0
 8004550:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004552:	f3ef 8305 	mrs	r3, IPSR
 8004556:	613b      	str	r3, [r7, #16]
  return(result);
 8004558:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800455a:	2b00      	cmp	r3, #0
 800455c:	d15f      	bne.n	800461e <osMessageQueueNew+0xdc>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d05c      	beq.n	800461e <osMessageQueueNew+0xdc>
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d059      	beq.n	800461e <osMessageQueueNew+0xdc>
    mem = -1;
 800456a:	f04f 33ff 	mov.w	r3, #4294967295
 800456e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d029      	beq.n	80045ca <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d012      	beq.n	80045a4 <osMessageQueueNew+0x62>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	2b4f      	cmp	r3, #79	@ 0x4f
 8004584:	d90e      	bls.n	80045a4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00a      	beq.n	80045a4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	695a      	ldr	r2, [r3, #20]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	68b9      	ldr	r1, [r7, #8]
 8004596:	fb01 f303 	mul.w	r3, r1, r3
 800459a:	429a      	cmp	r2, r3
 800459c:	d302      	bcc.n	80045a4 <osMessageQueueNew+0x62>
        mem = 1;
 800459e:	2301      	movs	r3, #1
 80045a0:	61bb      	str	r3, [r7, #24]
 80045a2:	e014      	b.n	80045ce <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d110      	bne.n	80045ce <osMessageQueueNew+0x8c>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d10c      	bne.n	80045ce <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d108      	bne.n	80045ce <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	695b      	ldr	r3, [r3, #20]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d104      	bne.n	80045ce <osMessageQueueNew+0x8c>
          mem = 0;
 80045c4:	2300      	movs	r3, #0
 80045c6:	61bb      	str	r3, [r7, #24]
 80045c8:	e001      	b.n	80045ce <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80045ca:	2300      	movs	r3, #0
 80045cc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d10b      	bne.n	80045ec <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	691a      	ldr	r2, [r3, #16]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	2100      	movs	r1, #0
 80045de:	9100      	str	r1, [sp, #0]
 80045e0:	68b9      	ldr	r1, [r7, #8]
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f000 f972 	bl	80048cc <xQueueGenericCreateStatic>
 80045e8:	61f8      	str	r0, [r7, #28]
 80045ea:	e008      	b.n	80045fe <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d105      	bne.n	80045fe <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80045f2:	2200      	movs	r2, #0
 80045f4:	68b9      	ldr	r1, [r7, #8]
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f000 f9e5 	bl	80049c6 <xQueueGenericCreate>
 80045fc:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00c      	beq.n	800461e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d003      	beq.n	8004612 <osMessageQueueNew+0xd0>
        name = attr->name;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	617b      	str	r3, [r7, #20]
 8004610:	e001      	b.n	8004616 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8004612:	2300      	movs	r3, #0
 8004614:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8004616:	6979      	ldr	r1, [r7, #20]
 8004618:	69f8      	ldr	r0, [r7, #28]
 800461a:	f000 fdc5 	bl	80051a8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800461e:	69fb      	ldr	r3, [r7, #28]
}
 8004620:	4618      	mov	r0, r3
 8004622:	3720      	adds	r7, #32
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	4a07      	ldr	r2, [pc, #28]	@ (8004654 <vApplicationGetIdleTaskMemory+0x2c>)
 8004638:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	4a06      	ldr	r2, [pc, #24]	@ (8004658 <vApplicationGetIdleTaskMemory+0x30>)
 800463e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2280      	movs	r2, #128	@ 0x80
 8004644:	601a      	str	r2, [r3, #0]
}
 8004646:	bf00      	nop
 8004648:	3714      	adds	r7, #20
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	20000198 	.word	0x20000198
 8004658:	200001f4 	.word	0x200001f4

0800465c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	4a07      	ldr	r2, [pc, #28]	@ (8004688 <vApplicationGetTimerTaskMemory+0x2c>)
 800466c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	4a06      	ldr	r2, [pc, #24]	@ (800468c <vApplicationGetTimerTaskMemory+0x30>)
 8004672:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800467a:	601a      	str	r2, [r3, #0]
}
 800467c:	bf00      	nop
 800467e:	3714      	adds	r7, #20
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr
 8004688:	200003f4 	.word	0x200003f4
 800468c:	20000450 	.word	0x20000450

08004690 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f103 0208 	add.w	r2, r3, #8
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f04f 32ff 	mov.w	r2, #4294967295
 80046a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f103 0208 	add.w	r2, r3, #8
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f103 0208 	add.w	r2, r3, #8
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80046c4:	bf00      	nop
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80046de:	bf00      	nop
 80046e0:	370c      	adds	r7, #12
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr

080046ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80046ea:	b480      	push	{r7}
 80046ec:	b085      	sub	sp, #20
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
 80046f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	689a      	ldr	r2, [r3, #8]
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	683a      	ldr	r2, [r7, #0]
 800470e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	683a      	ldr	r2, [r7, #0]
 8004714:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	1c5a      	adds	r2, r3, #1
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	601a      	str	r2, [r3, #0]
}
 8004726:	bf00      	nop
 8004728:	3714      	adds	r7, #20
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr

08004732 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004732:	b480      	push	{r7}
 8004734:	b085      	sub	sp, #20
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
 800473a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004748:	d103      	bne.n	8004752 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	60fb      	str	r3, [r7, #12]
 8004750:	e00c      	b.n	800476c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	3308      	adds	r3, #8
 8004756:	60fb      	str	r3, [r7, #12]
 8004758:	e002      	b.n	8004760 <vListInsert+0x2e>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	60fb      	str	r3, [r7, #12]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68ba      	ldr	r2, [r7, #8]
 8004768:	429a      	cmp	r2, r3
 800476a:	d2f6      	bcs.n	800475a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	685a      	ldr	r2, [r3, #4]
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	683a      	ldr	r2, [r7, #0]
 800477a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	683a      	ldr	r2, [r7, #0]
 8004786:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	1c5a      	adds	r2, r3, #1
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	601a      	str	r2, [r3, #0]
}
 8004798:	bf00      	nop
 800479a:	3714      	adds	r7, #20
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	6892      	ldr	r2, [r2, #8]
 80047ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	6852      	ldr	r2, [r2, #4]
 80047c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d103      	bne.n	80047d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689a      	ldr	r2, [r3, #8]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	1e5a      	subs	r2, r3, #1
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3714      	adds	r7, #20
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d10b      	bne.n	8004824 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800480c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004810:	f383 8811 	msr	BASEPRI, r3
 8004814:	f3bf 8f6f 	isb	sy
 8004818:	f3bf 8f4f 	dsb	sy
 800481c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800481e:	bf00      	nop
 8004820:	bf00      	nop
 8004822:	e7fd      	b.n	8004820 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004824:	f002 f8b8 	bl	8006998 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004830:	68f9      	ldr	r1, [r7, #12]
 8004832:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004834:	fb01 f303 	mul.w	r3, r1, r3
 8004838:	441a      	add	r2, r3
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004854:	3b01      	subs	r3, #1
 8004856:	68f9      	ldr	r1, [r7, #12]
 8004858:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800485a:	fb01 f303 	mul.w	r3, r1, r3
 800485e:	441a      	add	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	22ff      	movs	r2, #255	@ 0xff
 8004868:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	22ff      	movs	r2, #255	@ 0xff
 8004870:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d114      	bne.n	80048a4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d01a      	beq.n	80048b8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	3310      	adds	r3, #16
 8004886:	4618      	mov	r0, r3
 8004888:	f001 f956 	bl	8005b38 <xTaskRemoveFromEventList>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d012      	beq.n	80048b8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004892:	4b0d      	ldr	r3, [pc, #52]	@ (80048c8 <xQueueGenericReset+0xd0>)
 8004894:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004898:	601a      	str	r2, [r3, #0]
 800489a:	f3bf 8f4f 	dsb	sy
 800489e:	f3bf 8f6f 	isb	sy
 80048a2:	e009      	b.n	80048b8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	3310      	adds	r3, #16
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7ff fef1 	bl	8004690 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	3324      	adds	r3, #36	@ 0x24
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7ff feec 	bl	8004690 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80048b8:	f002 f8a0 	bl	80069fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80048bc:	2301      	movs	r3, #1
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	e000ed04 	.word	0xe000ed04

080048cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b08e      	sub	sp, #56	@ 0x38
 80048d0:	af02      	add	r7, sp, #8
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
 80048d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10b      	bne.n	80048f8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80048e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048e4:	f383 8811 	msr	BASEPRI, r3
 80048e8:	f3bf 8f6f 	isb	sy
 80048ec:	f3bf 8f4f 	dsb	sy
 80048f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80048f2:	bf00      	nop
 80048f4:	bf00      	nop
 80048f6:	e7fd      	b.n	80048f4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d10b      	bne.n	8004916 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80048fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004902:	f383 8811 	msr	BASEPRI, r3
 8004906:	f3bf 8f6f 	isb	sy
 800490a:	f3bf 8f4f 	dsb	sy
 800490e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004910:	bf00      	nop
 8004912:	bf00      	nop
 8004914:	e7fd      	b.n	8004912 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d002      	beq.n	8004922 <xQueueGenericCreateStatic+0x56>
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d001      	beq.n	8004926 <xQueueGenericCreateStatic+0x5a>
 8004922:	2301      	movs	r3, #1
 8004924:	e000      	b.n	8004928 <xQueueGenericCreateStatic+0x5c>
 8004926:	2300      	movs	r3, #0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d10b      	bne.n	8004944 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800492c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004930:	f383 8811 	msr	BASEPRI, r3
 8004934:	f3bf 8f6f 	isb	sy
 8004938:	f3bf 8f4f 	dsb	sy
 800493c:	623b      	str	r3, [r7, #32]
}
 800493e:	bf00      	nop
 8004940:	bf00      	nop
 8004942:	e7fd      	b.n	8004940 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d102      	bne.n	8004950 <xQueueGenericCreateStatic+0x84>
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d101      	bne.n	8004954 <xQueueGenericCreateStatic+0x88>
 8004950:	2301      	movs	r3, #1
 8004952:	e000      	b.n	8004956 <xQueueGenericCreateStatic+0x8a>
 8004954:	2300      	movs	r3, #0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10b      	bne.n	8004972 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800495a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800495e:	f383 8811 	msr	BASEPRI, r3
 8004962:	f3bf 8f6f 	isb	sy
 8004966:	f3bf 8f4f 	dsb	sy
 800496a:	61fb      	str	r3, [r7, #28]
}
 800496c:	bf00      	nop
 800496e:	bf00      	nop
 8004970:	e7fd      	b.n	800496e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004972:	2350      	movs	r3, #80	@ 0x50
 8004974:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	2b50      	cmp	r3, #80	@ 0x50
 800497a:	d00b      	beq.n	8004994 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800497c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004980:	f383 8811 	msr	BASEPRI, r3
 8004984:	f3bf 8f6f 	isb	sy
 8004988:	f3bf 8f4f 	dsb	sy
 800498c:	61bb      	str	r3, [r7, #24]
}
 800498e:	bf00      	nop
 8004990:	bf00      	nop
 8004992:	e7fd      	b.n	8004990 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004994:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800499a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00d      	beq.n	80049bc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80049a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80049a8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80049ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049ae:	9300      	str	r3, [sp, #0]
 80049b0:	4613      	mov	r3, r2
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	68b9      	ldr	r1, [r7, #8]
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f000 f840 	bl	8004a3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80049bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80049be:	4618      	mov	r0, r3
 80049c0:	3730      	adds	r7, #48	@ 0x30
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b08a      	sub	sp, #40	@ 0x28
 80049ca:	af02      	add	r7, sp, #8
 80049cc:	60f8      	str	r0, [r7, #12]
 80049ce:	60b9      	str	r1, [r7, #8]
 80049d0:	4613      	mov	r3, r2
 80049d2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d10b      	bne.n	80049f2 <xQueueGenericCreate+0x2c>
	__asm volatile
 80049da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049de:	f383 8811 	msr	BASEPRI, r3
 80049e2:	f3bf 8f6f 	isb	sy
 80049e6:	f3bf 8f4f 	dsb	sy
 80049ea:	613b      	str	r3, [r7, #16]
}
 80049ec:	bf00      	nop
 80049ee:	bf00      	nop
 80049f0:	e7fd      	b.n	80049ee <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	68ba      	ldr	r2, [r7, #8]
 80049f6:	fb02 f303 	mul.w	r3, r2, r3
 80049fa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	3350      	adds	r3, #80	@ 0x50
 8004a00:	4618      	mov	r0, r3
 8004a02:	f002 f8eb 	bl	8006bdc <pvPortMalloc>
 8004a06:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d011      	beq.n	8004a32 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	3350      	adds	r3, #80	@ 0x50
 8004a16:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a20:	79fa      	ldrb	r2, [r7, #7]
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	9300      	str	r3, [sp, #0]
 8004a26:	4613      	mov	r3, r2
 8004a28:	697a      	ldr	r2, [r7, #20]
 8004a2a:	68b9      	ldr	r1, [r7, #8]
 8004a2c:	68f8      	ldr	r0, [r7, #12]
 8004a2e:	f000 f805 	bl	8004a3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004a32:	69bb      	ldr	r3, [r7, #24]
	}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3720      	adds	r7, #32
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]
 8004a48:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d103      	bne.n	8004a58 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	69ba      	ldr	r2, [r7, #24]
 8004a54:	601a      	str	r2, [r3, #0]
 8004a56:	e002      	b.n	8004a5e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	68ba      	ldr	r2, [r7, #8]
 8004a68:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004a6a:	2101      	movs	r1, #1
 8004a6c:	69b8      	ldr	r0, [r7, #24]
 8004a6e:	f7ff fec3 	bl	80047f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	78fa      	ldrb	r2, [r7, #3]
 8004a76:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004a7a:	bf00      	nop
 8004a7c:	3710      	adds	r7, #16
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
	...

08004a84 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b08e      	sub	sp, #56	@ 0x38
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
 8004a90:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004a92:	2300      	movs	r3, #0
 8004a94:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d10b      	bne.n	8004ab8 <xQueueGenericSend+0x34>
	__asm volatile
 8004aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aa4:	f383 8811 	msr	BASEPRI, r3
 8004aa8:	f3bf 8f6f 	isb	sy
 8004aac:	f3bf 8f4f 	dsb	sy
 8004ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004ab2:	bf00      	nop
 8004ab4:	bf00      	nop
 8004ab6:	e7fd      	b.n	8004ab4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d103      	bne.n	8004ac6 <xQueueGenericSend+0x42>
 8004abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <xQueueGenericSend+0x46>
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e000      	b.n	8004acc <xQueueGenericSend+0x48>
 8004aca:	2300      	movs	r3, #0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d10b      	bne.n	8004ae8 <xQueueGenericSend+0x64>
	__asm volatile
 8004ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ad4:	f383 8811 	msr	BASEPRI, r3
 8004ad8:	f3bf 8f6f 	isb	sy
 8004adc:	f3bf 8f4f 	dsb	sy
 8004ae0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004ae2:	bf00      	nop
 8004ae4:	bf00      	nop
 8004ae6:	e7fd      	b.n	8004ae4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d103      	bne.n	8004af6 <xQueueGenericSend+0x72>
 8004aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004af0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d101      	bne.n	8004afa <xQueueGenericSend+0x76>
 8004af6:	2301      	movs	r3, #1
 8004af8:	e000      	b.n	8004afc <xQueueGenericSend+0x78>
 8004afa:	2300      	movs	r3, #0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d10b      	bne.n	8004b18 <xQueueGenericSend+0x94>
	__asm volatile
 8004b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b04:	f383 8811 	msr	BASEPRI, r3
 8004b08:	f3bf 8f6f 	isb	sy
 8004b0c:	f3bf 8f4f 	dsb	sy
 8004b10:	623b      	str	r3, [r7, #32]
}
 8004b12:	bf00      	nop
 8004b14:	bf00      	nop
 8004b16:	e7fd      	b.n	8004b14 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b18:	f001 f9ce 	bl	8005eb8 <xTaskGetSchedulerState>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d102      	bne.n	8004b28 <xQueueGenericSend+0xa4>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d101      	bne.n	8004b2c <xQueueGenericSend+0xa8>
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e000      	b.n	8004b2e <xQueueGenericSend+0xaa>
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d10b      	bne.n	8004b4a <xQueueGenericSend+0xc6>
	__asm volatile
 8004b32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b36:	f383 8811 	msr	BASEPRI, r3
 8004b3a:	f3bf 8f6f 	isb	sy
 8004b3e:	f3bf 8f4f 	dsb	sy
 8004b42:	61fb      	str	r3, [r7, #28]
}
 8004b44:	bf00      	nop
 8004b46:	bf00      	nop
 8004b48:	e7fd      	b.n	8004b46 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b4a:	f001 ff25 	bl	8006998 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d302      	bcc.n	8004b60 <xQueueGenericSend+0xdc>
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d129      	bne.n	8004bb4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b60:	683a      	ldr	r2, [r7, #0]
 8004b62:	68b9      	ldr	r1, [r7, #8]
 8004b64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004b66:	f000 fa0f 	bl	8004f88 <prvCopyDataToQueue>
 8004b6a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d010      	beq.n	8004b96 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b76:	3324      	adds	r3, #36	@ 0x24
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f000 ffdd 	bl	8005b38 <xTaskRemoveFromEventList>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d013      	beq.n	8004bac <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004b84:	4b3f      	ldr	r3, [pc, #252]	@ (8004c84 <xQueueGenericSend+0x200>)
 8004b86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b8a:	601a      	str	r2, [r3, #0]
 8004b8c:	f3bf 8f4f 	dsb	sy
 8004b90:	f3bf 8f6f 	isb	sy
 8004b94:	e00a      	b.n	8004bac <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004b96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d007      	beq.n	8004bac <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004b9c:	4b39      	ldr	r3, [pc, #228]	@ (8004c84 <xQueueGenericSend+0x200>)
 8004b9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ba2:	601a      	str	r2, [r3, #0]
 8004ba4:	f3bf 8f4f 	dsb	sy
 8004ba8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004bac:	f001 ff26 	bl	80069fc <vPortExitCritical>
				return pdPASS;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e063      	b.n	8004c7c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d103      	bne.n	8004bc2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004bba:	f001 ff1f 	bl	80069fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	e05c      	b.n	8004c7c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004bc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d106      	bne.n	8004bd6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004bc8:	f107 0314 	add.w	r3, r7, #20
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f001 f817 	bl	8005c00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004bd6:	f001 ff11 	bl	80069fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004bda:	f000 fd87 	bl	80056ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004bde:	f001 fedb 	bl	8006998 <vPortEnterCritical>
 8004be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004be4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004be8:	b25b      	sxtb	r3, r3
 8004bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bee:	d103      	bne.n	8004bf8 <xQueueGenericSend+0x174>
 8004bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bfa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004bfe:	b25b      	sxtb	r3, r3
 8004c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c04:	d103      	bne.n	8004c0e <xQueueGenericSend+0x18a>
 8004c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c0e:	f001 fef5 	bl	80069fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c12:	1d3a      	adds	r2, r7, #4
 8004c14:	f107 0314 	add.w	r3, r7, #20
 8004c18:	4611      	mov	r1, r2
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f001 f806 	bl	8005c2c <xTaskCheckForTimeOut>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d124      	bne.n	8004c70 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004c26:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c28:	f000 faa6 	bl	8005178 <prvIsQueueFull>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d018      	beq.n	8004c64 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c34:	3310      	adds	r3, #16
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	4611      	mov	r1, r2
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f000 ff2a 	bl	8005a94 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004c40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c42:	f000 fa31 	bl	80050a8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004c46:	f000 fd5f 	bl	8005708 <xTaskResumeAll>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f47f af7c 	bne.w	8004b4a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004c52:	4b0c      	ldr	r3, [pc, #48]	@ (8004c84 <xQueueGenericSend+0x200>)
 8004c54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c58:	601a      	str	r2, [r3, #0]
 8004c5a:	f3bf 8f4f 	dsb	sy
 8004c5e:	f3bf 8f6f 	isb	sy
 8004c62:	e772      	b.n	8004b4a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004c64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c66:	f000 fa1f 	bl	80050a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c6a:	f000 fd4d 	bl	8005708 <xTaskResumeAll>
 8004c6e:	e76c      	b.n	8004b4a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004c70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c72:	f000 fa19 	bl	80050a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c76:	f000 fd47 	bl	8005708 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004c7a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3738      	adds	r7, #56	@ 0x38
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	e000ed04 	.word	0xe000ed04

08004c88 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b090      	sub	sp, #64	@ 0x40
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
 8004c94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d10b      	bne.n	8004cb8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ca4:	f383 8811 	msr	BASEPRI, r3
 8004ca8:	f3bf 8f6f 	isb	sy
 8004cac:	f3bf 8f4f 	dsb	sy
 8004cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004cb2:	bf00      	nop
 8004cb4:	bf00      	nop
 8004cb6:	e7fd      	b.n	8004cb4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d103      	bne.n	8004cc6 <xQueueGenericSendFromISR+0x3e>
 8004cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d101      	bne.n	8004cca <xQueueGenericSendFromISR+0x42>
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e000      	b.n	8004ccc <xQueueGenericSendFromISR+0x44>
 8004cca:	2300      	movs	r3, #0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d10b      	bne.n	8004ce8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cd4:	f383 8811 	msr	BASEPRI, r3
 8004cd8:	f3bf 8f6f 	isb	sy
 8004cdc:	f3bf 8f4f 	dsb	sy
 8004ce0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004ce2:	bf00      	nop
 8004ce4:	bf00      	nop
 8004ce6:	e7fd      	b.n	8004ce4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d103      	bne.n	8004cf6 <xQueueGenericSendFromISR+0x6e>
 8004cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d101      	bne.n	8004cfa <xQueueGenericSendFromISR+0x72>
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e000      	b.n	8004cfc <xQueueGenericSendFromISR+0x74>
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d10b      	bne.n	8004d18 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d04:	f383 8811 	msr	BASEPRI, r3
 8004d08:	f3bf 8f6f 	isb	sy
 8004d0c:	f3bf 8f4f 	dsb	sy
 8004d10:	623b      	str	r3, [r7, #32]
}
 8004d12:	bf00      	nop
 8004d14:	bf00      	nop
 8004d16:	e7fd      	b.n	8004d14 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d18:	f001 ff1e 	bl	8006b58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004d1c:	f3ef 8211 	mrs	r2, BASEPRI
 8004d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d24:	f383 8811 	msr	BASEPRI, r3
 8004d28:	f3bf 8f6f 	isb	sy
 8004d2c:	f3bf 8f4f 	dsb	sy
 8004d30:	61fa      	str	r2, [r7, #28]
 8004d32:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004d34:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d36:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d302      	bcc.n	8004d4a <xQueueGenericSendFromISR+0xc2>
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d12f      	bne.n	8004daa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d4c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d50:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d5a:	683a      	ldr	r2, [r7, #0]
 8004d5c:	68b9      	ldr	r1, [r7, #8]
 8004d5e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004d60:	f000 f912 	bl	8004f88 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004d64:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d6c:	d112      	bne.n	8004d94 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d016      	beq.n	8004da4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d78:	3324      	adds	r3, #36	@ 0x24
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f000 fedc 	bl	8005b38 <xTaskRemoveFromEventList>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00e      	beq.n	8004da4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00b      	beq.n	8004da4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	601a      	str	r2, [r3, #0]
 8004d92:	e007      	b.n	8004da4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004d94:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004d98:	3301      	adds	r3, #1
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	b25a      	sxtb	r2, r3
 8004d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004da0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004da4:	2301      	movs	r3, #1
 8004da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004da8:	e001      	b.n	8004dae <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004daa:	2300      	movs	r3, #0
 8004dac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004dae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004db0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004db8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004dba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3740      	adds	r7, #64	@ 0x40
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b08c      	sub	sp, #48	@ 0x30
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d10b      	bne.n	8004df6 <xQueueReceive+0x32>
	__asm volatile
 8004dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004de2:	f383 8811 	msr	BASEPRI, r3
 8004de6:	f3bf 8f6f 	isb	sy
 8004dea:	f3bf 8f4f 	dsb	sy
 8004dee:	623b      	str	r3, [r7, #32]
}
 8004df0:	bf00      	nop
 8004df2:	bf00      	nop
 8004df4:	e7fd      	b.n	8004df2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d103      	bne.n	8004e04 <xQueueReceive+0x40>
 8004dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d101      	bne.n	8004e08 <xQueueReceive+0x44>
 8004e04:	2301      	movs	r3, #1
 8004e06:	e000      	b.n	8004e0a <xQueueReceive+0x46>
 8004e08:	2300      	movs	r3, #0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10b      	bne.n	8004e26 <xQueueReceive+0x62>
	__asm volatile
 8004e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e12:	f383 8811 	msr	BASEPRI, r3
 8004e16:	f3bf 8f6f 	isb	sy
 8004e1a:	f3bf 8f4f 	dsb	sy
 8004e1e:	61fb      	str	r3, [r7, #28]
}
 8004e20:	bf00      	nop
 8004e22:	bf00      	nop
 8004e24:	e7fd      	b.n	8004e22 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e26:	f001 f847 	bl	8005eb8 <xTaskGetSchedulerState>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d102      	bne.n	8004e36 <xQueueReceive+0x72>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d101      	bne.n	8004e3a <xQueueReceive+0x76>
 8004e36:	2301      	movs	r3, #1
 8004e38:	e000      	b.n	8004e3c <xQueueReceive+0x78>
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d10b      	bne.n	8004e58 <xQueueReceive+0x94>
	__asm volatile
 8004e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e44:	f383 8811 	msr	BASEPRI, r3
 8004e48:	f3bf 8f6f 	isb	sy
 8004e4c:	f3bf 8f4f 	dsb	sy
 8004e50:	61bb      	str	r3, [r7, #24]
}
 8004e52:	bf00      	nop
 8004e54:	bf00      	nop
 8004e56:	e7fd      	b.n	8004e54 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e58:	f001 fd9e 	bl	8006998 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e60:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d01f      	beq.n	8004ea8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004e68:	68b9      	ldr	r1, [r7, #8]
 8004e6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e6c:	f000 f8f6 	bl	800505c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e72:	1e5a      	subs	r2, r3, #1
 8004e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e76:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00f      	beq.n	8004ea0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e82:	3310      	adds	r3, #16
 8004e84:	4618      	mov	r0, r3
 8004e86:	f000 fe57 	bl	8005b38 <xTaskRemoveFromEventList>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d007      	beq.n	8004ea0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004e90:	4b3c      	ldr	r3, [pc, #240]	@ (8004f84 <xQueueReceive+0x1c0>)
 8004e92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e96:	601a      	str	r2, [r3, #0]
 8004e98:	f3bf 8f4f 	dsb	sy
 8004e9c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004ea0:	f001 fdac 	bl	80069fc <vPortExitCritical>
				return pdPASS;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e069      	b.n	8004f7c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d103      	bne.n	8004eb6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004eae:	f001 fda5 	bl	80069fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	e062      	b.n	8004f7c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d106      	bne.n	8004eca <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ebc:	f107 0310 	add.w	r3, r7, #16
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f000 fe9d 	bl	8005c00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004eca:	f001 fd97 	bl	80069fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ece:	f000 fc0d 	bl	80056ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ed2:	f001 fd61 	bl	8006998 <vPortEnterCritical>
 8004ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ed8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004edc:	b25b      	sxtb	r3, r3
 8004ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee2:	d103      	bne.n	8004eec <xQueueReceive+0x128>
 8004ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ef2:	b25b      	sxtb	r3, r3
 8004ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef8:	d103      	bne.n	8004f02 <xQueueReceive+0x13e>
 8004efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f02:	f001 fd7b 	bl	80069fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f06:	1d3a      	adds	r2, r7, #4
 8004f08:	f107 0310 	add.w	r3, r7, #16
 8004f0c:	4611      	mov	r1, r2
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f000 fe8c 	bl	8005c2c <xTaskCheckForTimeOut>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d123      	bne.n	8004f62 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f1c:	f000 f916 	bl	800514c <prvIsQueueEmpty>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d017      	beq.n	8004f56 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f28:	3324      	adds	r3, #36	@ 0x24
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	4611      	mov	r1, r2
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f000 fdb0 	bl	8005a94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004f34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f36:	f000 f8b7 	bl	80050a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004f3a:	f000 fbe5 	bl	8005708 <xTaskResumeAll>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d189      	bne.n	8004e58 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004f44:	4b0f      	ldr	r3, [pc, #60]	@ (8004f84 <xQueueReceive+0x1c0>)
 8004f46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f4a:	601a      	str	r2, [r3, #0]
 8004f4c:	f3bf 8f4f 	dsb	sy
 8004f50:	f3bf 8f6f 	isb	sy
 8004f54:	e780      	b.n	8004e58 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004f56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f58:	f000 f8a6 	bl	80050a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f5c:	f000 fbd4 	bl	8005708 <xTaskResumeAll>
 8004f60:	e77a      	b.n	8004e58 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004f62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f64:	f000 f8a0 	bl	80050a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f68:	f000 fbce 	bl	8005708 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f6e:	f000 f8ed 	bl	800514c <prvIsQueueEmpty>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f43f af6f 	beq.w	8004e58 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004f7a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3730      	adds	r7, #48	@ 0x30
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	e000ed04 	.word	0xe000ed04

08004f88 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b086      	sub	sp, #24
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004f94:	2300      	movs	r3, #0
 8004f96:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f9c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d10d      	bne.n	8004fc2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d14d      	bne.n	800504a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f000 ff9e 	bl	8005ef4 <xTaskPriorityDisinherit>
 8004fb8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	609a      	str	r2, [r3, #8]
 8004fc0:	e043      	b.n	800504a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d119      	bne.n	8004ffc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6858      	ldr	r0, [r3, #4]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	68b9      	ldr	r1, [r7, #8]
 8004fd4:	f002 f81c 	bl	8007010 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	685a      	ldr	r2, [r3, #4]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe0:	441a      	add	r2, r3
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	685a      	ldr	r2, [r3, #4]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d32b      	bcc.n	800504a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	605a      	str	r2, [r3, #4]
 8004ffa:	e026      	b.n	800504a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	68d8      	ldr	r0, [r3, #12]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005004:	461a      	mov	r2, r3
 8005006:	68b9      	ldr	r1, [r7, #8]
 8005008:	f002 f802 	bl	8007010 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	68da      	ldr	r2, [r3, #12]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005014:	425b      	negs	r3, r3
 8005016:	441a      	add	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	68da      	ldr	r2, [r3, #12]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	429a      	cmp	r2, r3
 8005026:	d207      	bcs.n	8005038 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	689a      	ldr	r2, [r3, #8]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005030:	425b      	negs	r3, r3
 8005032:	441a      	add	r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2b02      	cmp	r3, #2
 800503c:	d105      	bne.n	800504a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d002      	beq.n	800504a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	3b01      	subs	r3, #1
 8005048:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	1c5a      	adds	r2, r3, #1
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005052:	697b      	ldr	r3, [r7, #20]
}
 8005054:	4618      	mov	r0, r3
 8005056:	3718      	adds	r7, #24
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800506a:	2b00      	cmp	r3, #0
 800506c:	d018      	beq.n	80050a0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	68da      	ldr	r2, [r3, #12]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005076:	441a      	add	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	68da      	ldr	r2, [r3, #12]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	429a      	cmp	r2, r3
 8005086:	d303      	bcc.n	8005090 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	68d9      	ldr	r1, [r3, #12]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005098:	461a      	mov	r2, r3
 800509a:	6838      	ldr	r0, [r7, #0]
 800509c:	f001 ffb8 	bl	8007010 <memcpy>
	}
}
 80050a0:	bf00      	nop
 80050a2:	3708      	adds	r7, #8
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80050b0:	f001 fc72 	bl	8006998 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80050ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80050bc:	e011      	b.n	80050e2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d012      	beq.n	80050ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	3324      	adds	r3, #36	@ 0x24
 80050ca:	4618      	mov	r0, r3
 80050cc:	f000 fd34 	bl	8005b38 <xTaskRemoveFromEventList>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d001      	beq.n	80050da <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80050d6:	f000 fe0d 	bl	8005cf4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80050da:	7bfb      	ldrb	r3, [r7, #15]
 80050dc:	3b01      	subs	r3, #1
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80050e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	dce9      	bgt.n	80050be <prvUnlockQueue+0x16>
 80050ea:	e000      	b.n	80050ee <prvUnlockQueue+0x46>
					break;
 80050ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	22ff      	movs	r2, #255	@ 0xff
 80050f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80050f6:	f001 fc81 	bl	80069fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80050fa:	f001 fc4d 	bl	8006998 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005104:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005106:	e011      	b.n	800512c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d012      	beq.n	8005136 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	3310      	adds	r3, #16
 8005114:	4618      	mov	r0, r3
 8005116:	f000 fd0f 	bl	8005b38 <xTaskRemoveFromEventList>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d001      	beq.n	8005124 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005120:	f000 fde8 	bl	8005cf4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005124:	7bbb      	ldrb	r3, [r7, #14]
 8005126:	3b01      	subs	r3, #1
 8005128:	b2db      	uxtb	r3, r3
 800512a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800512c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005130:	2b00      	cmp	r3, #0
 8005132:	dce9      	bgt.n	8005108 <prvUnlockQueue+0x60>
 8005134:	e000      	b.n	8005138 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005136:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	22ff      	movs	r2, #255	@ 0xff
 800513c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005140:	f001 fc5c 	bl	80069fc <vPortExitCritical>
}
 8005144:	bf00      	nop
 8005146:	3710      	adds	r7, #16
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005154:	f001 fc20 	bl	8006998 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800515c:	2b00      	cmp	r3, #0
 800515e:	d102      	bne.n	8005166 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005160:	2301      	movs	r3, #1
 8005162:	60fb      	str	r3, [r7, #12]
 8005164:	e001      	b.n	800516a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005166:	2300      	movs	r3, #0
 8005168:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800516a:	f001 fc47 	bl	80069fc <vPortExitCritical>

	return xReturn;
 800516e:	68fb      	ldr	r3, [r7, #12]
}
 8005170:	4618      	mov	r0, r3
 8005172:	3710      	adds	r7, #16
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005180:	f001 fc0a 	bl	8006998 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800518c:	429a      	cmp	r2, r3
 800518e:	d102      	bne.n	8005196 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005190:	2301      	movs	r3, #1
 8005192:	60fb      	str	r3, [r7, #12]
 8005194:	e001      	b.n	800519a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005196:	2300      	movs	r3, #0
 8005198:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800519a:	f001 fc2f 	bl	80069fc <vPortExitCritical>

	return xReturn;
 800519e:	68fb      	ldr	r3, [r7, #12]
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3710      	adds	r7, #16
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80051a8:	b480      	push	{r7}
 80051aa:	b085      	sub	sp, #20
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80051b2:	2300      	movs	r3, #0
 80051b4:	60fb      	str	r3, [r7, #12]
 80051b6:	e014      	b.n	80051e2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80051b8:	4a0f      	ldr	r2, [pc, #60]	@ (80051f8 <vQueueAddToRegistry+0x50>)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10b      	bne.n	80051dc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80051c4:	490c      	ldr	r1, [pc, #48]	@ (80051f8 <vQueueAddToRegistry+0x50>)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	683a      	ldr	r2, [r7, #0]
 80051ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80051ce:	4a0a      	ldr	r2, [pc, #40]	@ (80051f8 <vQueueAddToRegistry+0x50>)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	00db      	lsls	r3, r3, #3
 80051d4:	4413      	add	r3, r2
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80051da:	e006      	b.n	80051ea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	3301      	adds	r3, #1
 80051e0:	60fb      	str	r3, [r7, #12]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2b07      	cmp	r3, #7
 80051e6:	d9e7      	bls.n	80051b8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80051e8:	bf00      	nop
 80051ea:	bf00      	nop
 80051ec:	3714      	adds	r7, #20
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	20000850 	.word	0x20000850

080051fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b086      	sub	sp, #24
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800520c:	f001 fbc4 	bl	8006998 <vPortEnterCritical>
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005216:	b25b      	sxtb	r3, r3
 8005218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800521c:	d103      	bne.n	8005226 <vQueueWaitForMessageRestricted+0x2a>
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800522c:	b25b      	sxtb	r3, r3
 800522e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005232:	d103      	bne.n	800523c <vQueueWaitForMessageRestricted+0x40>
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	2200      	movs	r2, #0
 8005238:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800523c:	f001 fbde 	bl	80069fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005244:	2b00      	cmp	r3, #0
 8005246:	d106      	bne.n	8005256 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	3324      	adds	r3, #36	@ 0x24
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	68b9      	ldr	r1, [r7, #8]
 8005250:	4618      	mov	r0, r3
 8005252:	f000 fc45 	bl	8005ae0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005256:	6978      	ldr	r0, [r7, #20]
 8005258:	f7ff ff26 	bl	80050a8 <prvUnlockQueue>
	}
 800525c:	bf00      	nop
 800525e:	3718      	adds	r7, #24
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005264:	b580      	push	{r7, lr}
 8005266:	b08e      	sub	sp, #56	@ 0x38
 8005268:	af04      	add	r7, sp, #16
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
 8005270:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005272:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005274:	2b00      	cmp	r3, #0
 8005276:	d10b      	bne.n	8005290 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800527c:	f383 8811 	msr	BASEPRI, r3
 8005280:	f3bf 8f6f 	isb	sy
 8005284:	f3bf 8f4f 	dsb	sy
 8005288:	623b      	str	r3, [r7, #32]
}
 800528a:	bf00      	nop
 800528c:	bf00      	nop
 800528e:	e7fd      	b.n	800528c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005292:	2b00      	cmp	r3, #0
 8005294:	d10b      	bne.n	80052ae <xTaskCreateStatic+0x4a>
	__asm volatile
 8005296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800529a:	f383 8811 	msr	BASEPRI, r3
 800529e:	f3bf 8f6f 	isb	sy
 80052a2:	f3bf 8f4f 	dsb	sy
 80052a6:	61fb      	str	r3, [r7, #28]
}
 80052a8:	bf00      	nop
 80052aa:	bf00      	nop
 80052ac:	e7fd      	b.n	80052aa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80052ae:	235c      	movs	r3, #92	@ 0x5c
 80052b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	2b5c      	cmp	r3, #92	@ 0x5c
 80052b6:	d00b      	beq.n	80052d0 <xTaskCreateStatic+0x6c>
	__asm volatile
 80052b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052bc:	f383 8811 	msr	BASEPRI, r3
 80052c0:	f3bf 8f6f 	isb	sy
 80052c4:	f3bf 8f4f 	dsb	sy
 80052c8:	61bb      	str	r3, [r7, #24]
}
 80052ca:	bf00      	nop
 80052cc:	bf00      	nop
 80052ce:	e7fd      	b.n	80052cc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80052d0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80052d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d01e      	beq.n	8005316 <xTaskCreateStatic+0xb2>
 80052d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d01b      	beq.n	8005316 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80052de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052e0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80052e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80052e6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80052e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ea:	2202      	movs	r2, #2
 80052ec:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80052f0:	2300      	movs	r3, #0
 80052f2:	9303      	str	r3, [sp, #12]
 80052f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f6:	9302      	str	r3, [sp, #8]
 80052f8:	f107 0314 	add.w	r3, r7, #20
 80052fc:	9301      	str	r3, [sp, #4]
 80052fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005300:	9300      	str	r3, [sp, #0]
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	68b9      	ldr	r1, [r7, #8]
 8005308:	68f8      	ldr	r0, [r7, #12]
 800530a:	f000 f850 	bl	80053ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800530e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005310:	f000 f8de 	bl	80054d0 <prvAddNewTaskToReadyList>
 8005314:	e001      	b.n	800531a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005316:	2300      	movs	r3, #0
 8005318:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800531a:	697b      	ldr	r3, [r7, #20]
	}
 800531c:	4618      	mov	r0, r3
 800531e:	3728      	adds	r7, #40	@ 0x28
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005324:	b580      	push	{r7, lr}
 8005326:	b08c      	sub	sp, #48	@ 0x30
 8005328:	af04      	add	r7, sp, #16
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	603b      	str	r3, [r7, #0]
 8005330:	4613      	mov	r3, r2
 8005332:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005334:	88fb      	ldrh	r3, [r7, #6]
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	4618      	mov	r0, r3
 800533a:	f001 fc4f 	bl	8006bdc <pvPortMalloc>
 800533e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00e      	beq.n	8005364 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005346:	205c      	movs	r0, #92	@ 0x5c
 8005348:	f001 fc48 	bl	8006bdc <pvPortMalloc>
 800534c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d003      	beq.n	800535c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	697a      	ldr	r2, [r7, #20]
 8005358:	631a      	str	r2, [r3, #48]	@ 0x30
 800535a:	e005      	b.n	8005368 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800535c:	6978      	ldr	r0, [r7, #20]
 800535e:	f001 fd0b 	bl	8006d78 <vPortFree>
 8005362:	e001      	b.n	8005368 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005364:	2300      	movs	r3, #0
 8005366:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d017      	beq.n	800539e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005376:	88fa      	ldrh	r2, [r7, #6]
 8005378:	2300      	movs	r3, #0
 800537a:	9303      	str	r3, [sp, #12]
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	9302      	str	r3, [sp, #8]
 8005380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005382:	9301      	str	r3, [sp, #4]
 8005384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005386:	9300      	str	r3, [sp, #0]
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	68b9      	ldr	r1, [r7, #8]
 800538c:	68f8      	ldr	r0, [r7, #12]
 800538e:	f000 f80e 	bl	80053ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005392:	69f8      	ldr	r0, [r7, #28]
 8005394:	f000 f89c 	bl	80054d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005398:	2301      	movs	r3, #1
 800539a:	61bb      	str	r3, [r7, #24]
 800539c:	e002      	b.n	80053a4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800539e:	f04f 33ff 	mov.w	r3, #4294967295
 80053a2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80053a4:	69bb      	ldr	r3, [r7, #24]
	}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3720      	adds	r7, #32
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}

080053ae <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b088      	sub	sp, #32
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	60f8      	str	r0, [r7, #12]
 80053b6:	60b9      	str	r1, [r7, #8]
 80053b8:	607a      	str	r2, [r7, #4]
 80053ba:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80053bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053be:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	461a      	mov	r2, r3
 80053c6:	21a5      	movs	r1, #165	@ 0xa5
 80053c8:	f001 fdf6 	bl	8006fb8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80053cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80053d6:	3b01      	subs	r3, #1
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	4413      	add	r3, r2
 80053dc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	f023 0307 	bic.w	r3, r3, #7
 80053e4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	f003 0307 	and.w	r3, r3, #7
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00b      	beq.n	8005408 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80053f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053f4:	f383 8811 	msr	BASEPRI, r3
 80053f8:	f3bf 8f6f 	isb	sy
 80053fc:	f3bf 8f4f 	dsb	sy
 8005400:	617b      	str	r3, [r7, #20]
}
 8005402:	bf00      	nop
 8005404:	bf00      	nop
 8005406:	e7fd      	b.n	8005404 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d01f      	beq.n	800544e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800540e:	2300      	movs	r3, #0
 8005410:	61fb      	str	r3, [r7, #28]
 8005412:	e012      	b.n	800543a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005414:	68ba      	ldr	r2, [r7, #8]
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	4413      	add	r3, r2
 800541a:	7819      	ldrb	r1, [r3, #0]
 800541c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	4413      	add	r3, r2
 8005422:	3334      	adds	r3, #52	@ 0x34
 8005424:	460a      	mov	r2, r1
 8005426:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005428:	68ba      	ldr	r2, [r7, #8]
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	4413      	add	r3, r2
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d006      	beq.n	8005442 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	3301      	adds	r3, #1
 8005438:	61fb      	str	r3, [r7, #28]
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	2b0f      	cmp	r3, #15
 800543e:	d9e9      	bls.n	8005414 <prvInitialiseNewTask+0x66>
 8005440:	e000      	b.n	8005444 <prvInitialiseNewTask+0x96>
			{
				break;
 8005442:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005446:	2200      	movs	r2, #0
 8005448:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800544c:	e003      	b.n	8005456 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800544e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005450:	2200      	movs	r2, #0
 8005452:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005458:	2b37      	cmp	r3, #55	@ 0x37
 800545a:	d901      	bls.n	8005460 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800545c:	2337      	movs	r3, #55	@ 0x37
 800545e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005462:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005464:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005468:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800546a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800546c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800546e:	2200      	movs	r2, #0
 8005470:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005474:	3304      	adds	r3, #4
 8005476:	4618      	mov	r0, r3
 8005478:	f7ff f92a 	bl	80046d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800547c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800547e:	3318      	adds	r3, #24
 8005480:	4618      	mov	r0, r3
 8005482:	f7ff f925 	bl	80046d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005488:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800548a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800548c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800548e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005494:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005498:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800549a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800549c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800549e:	2200      	movs	r2, #0
 80054a0:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80054a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80054aa:	683a      	ldr	r2, [r7, #0]
 80054ac:	68f9      	ldr	r1, [r7, #12]
 80054ae:	69b8      	ldr	r0, [r7, #24]
 80054b0:	f001 f93e 	bl	8006730 <pxPortInitialiseStack>
 80054b4:	4602      	mov	r2, r0
 80054b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80054ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d002      	beq.n	80054c6 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80054c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054c6:	bf00      	nop
 80054c8:	3720      	adds	r7, #32
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
	...

080054d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80054d8:	f001 fa5e 	bl	8006998 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80054dc:	4b2d      	ldr	r3, [pc, #180]	@ (8005594 <prvAddNewTaskToReadyList+0xc4>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	3301      	adds	r3, #1
 80054e2:	4a2c      	ldr	r2, [pc, #176]	@ (8005594 <prvAddNewTaskToReadyList+0xc4>)
 80054e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80054e6:	4b2c      	ldr	r3, [pc, #176]	@ (8005598 <prvAddNewTaskToReadyList+0xc8>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d109      	bne.n	8005502 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80054ee:	4a2a      	ldr	r2, [pc, #168]	@ (8005598 <prvAddNewTaskToReadyList+0xc8>)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80054f4:	4b27      	ldr	r3, [pc, #156]	@ (8005594 <prvAddNewTaskToReadyList+0xc4>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d110      	bne.n	800551e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80054fc:	f000 fc1e 	bl	8005d3c <prvInitialiseTaskLists>
 8005500:	e00d      	b.n	800551e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005502:	4b26      	ldr	r3, [pc, #152]	@ (800559c <prvAddNewTaskToReadyList+0xcc>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d109      	bne.n	800551e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800550a:	4b23      	ldr	r3, [pc, #140]	@ (8005598 <prvAddNewTaskToReadyList+0xc8>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005514:	429a      	cmp	r2, r3
 8005516:	d802      	bhi.n	800551e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005518:	4a1f      	ldr	r2, [pc, #124]	@ (8005598 <prvAddNewTaskToReadyList+0xc8>)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800551e:	4b20      	ldr	r3, [pc, #128]	@ (80055a0 <prvAddNewTaskToReadyList+0xd0>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	3301      	adds	r3, #1
 8005524:	4a1e      	ldr	r2, [pc, #120]	@ (80055a0 <prvAddNewTaskToReadyList+0xd0>)
 8005526:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005528:	4b1d      	ldr	r3, [pc, #116]	@ (80055a0 <prvAddNewTaskToReadyList+0xd0>)
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005534:	4b1b      	ldr	r3, [pc, #108]	@ (80055a4 <prvAddNewTaskToReadyList+0xd4>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	429a      	cmp	r2, r3
 800553a:	d903      	bls.n	8005544 <prvAddNewTaskToReadyList+0x74>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005540:	4a18      	ldr	r2, [pc, #96]	@ (80055a4 <prvAddNewTaskToReadyList+0xd4>)
 8005542:	6013      	str	r3, [r2, #0]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005548:	4613      	mov	r3, r2
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	4413      	add	r3, r2
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	4a15      	ldr	r2, [pc, #84]	@ (80055a8 <prvAddNewTaskToReadyList+0xd8>)
 8005552:	441a      	add	r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	3304      	adds	r3, #4
 8005558:	4619      	mov	r1, r3
 800555a:	4610      	mov	r0, r2
 800555c:	f7ff f8c5 	bl	80046ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005560:	f001 fa4c 	bl	80069fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005564:	4b0d      	ldr	r3, [pc, #52]	@ (800559c <prvAddNewTaskToReadyList+0xcc>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00e      	beq.n	800558a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800556c:	4b0a      	ldr	r3, [pc, #40]	@ (8005598 <prvAddNewTaskToReadyList+0xc8>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005576:	429a      	cmp	r2, r3
 8005578:	d207      	bcs.n	800558a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800557a:	4b0c      	ldr	r3, [pc, #48]	@ (80055ac <prvAddNewTaskToReadyList+0xdc>)
 800557c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005580:	601a      	str	r2, [r3, #0]
 8005582:	f3bf 8f4f 	dsb	sy
 8005586:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800558a:	bf00      	nop
 800558c:	3708      	adds	r7, #8
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	20000d64 	.word	0x20000d64
 8005598:	20000890 	.word	0x20000890
 800559c:	20000d70 	.word	0x20000d70
 80055a0:	20000d80 	.word	0x20000d80
 80055a4:	20000d6c 	.word	0x20000d6c
 80055a8:	20000894 	.word	0x20000894
 80055ac:	e000ed04 	.word	0xe000ed04

080055b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80055b8:	2300      	movs	r3, #0
 80055ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d018      	beq.n	80055f4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80055c2:	4b14      	ldr	r3, [pc, #80]	@ (8005614 <vTaskDelay+0x64>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00b      	beq.n	80055e2 <vTaskDelay+0x32>
	__asm volatile
 80055ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ce:	f383 8811 	msr	BASEPRI, r3
 80055d2:	f3bf 8f6f 	isb	sy
 80055d6:	f3bf 8f4f 	dsb	sy
 80055da:	60bb      	str	r3, [r7, #8]
}
 80055dc:	bf00      	nop
 80055de:	bf00      	nop
 80055e0:	e7fd      	b.n	80055de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80055e2:	f000 f883 	bl	80056ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80055e6:	2100      	movs	r1, #0
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 fcf3 	bl	8005fd4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80055ee:	f000 f88b 	bl	8005708 <xTaskResumeAll>
 80055f2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d107      	bne.n	800560a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80055fa:	4b07      	ldr	r3, [pc, #28]	@ (8005618 <vTaskDelay+0x68>)
 80055fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005600:	601a      	str	r2, [r3, #0]
 8005602:	f3bf 8f4f 	dsb	sy
 8005606:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800560a:	bf00      	nop
 800560c:	3710      	adds	r7, #16
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	20000d8c 	.word	0x20000d8c
 8005618:	e000ed04 	.word	0xe000ed04

0800561c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b08a      	sub	sp, #40	@ 0x28
 8005620:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005622:	2300      	movs	r3, #0
 8005624:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005626:	2300      	movs	r3, #0
 8005628:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800562a:	463a      	mov	r2, r7
 800562c:	1d39      	adds	r1, r7, #4
 800562e:	f107 0308 	add.w	r3, r7, #8
 8005632:	4618      	mov	r0, r3
 8005634:	f7fe fff8 	bl	8004628 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005638:	6839      	ldr	r1, [r7, #0]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	68ba      	ldr	r2, [r7, #8]
 800563e:	9202      	str	r2, [sp, #8]
 8005640:	9301      	str	r3, [sp, #4]
 8005642:	2300      	movs	r3, #0
 8005644:	9300      	str	r3, [sp, #0]
 8005646:	2300      	movs	r3, #0
 8005648:	460a      	mov	r2, r1
 800564a:	4922      	ldr	r1, [pc, #136]	@ (80056d4 <vTaskStartScheduler+0xb8>)
 800564c:	4822      	ldr	r0, [pc, #136]	@ (80056d8 <vTaskStartScheduler+0xbc>)
 800564e:	f7ff fe09 	bl	8005264 <xTaskCreateStatic>
 8005652:	4603      	mov	r3, r0
 8005654:	4a21      	ldr	r2, [pc, #132]	@ (80056dc <vTaskStartScheduler+0xc0>)
 8005656:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005658:	4b20      	ldr	r3, [pc, #128]	@ (80056dc <vTaskStartScheduler+0xc0>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d002      	beq.n	8005666 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005660:	2301      	movs	r3, #1
 8005662:	617b      	str	r3, [r7, #20]
 8005664:	e001      	b.n	800566a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005666:	2300      	movs	r3, #0
 8005668:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d102      	bne.n	8005676 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005670:	f000 fd04 	bl	800607c <xTimerCreateTimerTask>
 8005674:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	2b01      	cmp	r3, #1
 800567a:	d116      	bne.n	80056aa <vTaskStartScheduler+0x8e>
	__asm volatile
 800567c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005680:	f383 8811 	msr	BASEPRI, r3
 8005684:	f3bf 8f6f 	isb	sy
 8005688:	f3bf 8f4f 	dsb	sy
 800568c:	613b      	str	r3, [r7, #16]
}
 800568e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005690:	4b13      	ldr	r3, [pc, #76]	@ (80056e0 <vTaskStartScheduler+0xc4>)
 8005692:	f04f 32ff 	mov.w	r2, #4294967295
 8005696:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005698:	4b12      	ldr	r3, [pc, #72]	@ (80056e4 <vTaskStartScheduler+0xc8>)
 800569a:	2201      	movs	r2, #1
 800569c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800569e:	4b12      	ldr	r3, [pc, #72]	@ (80056e8 <vTaskStartScheduler+0xcc>)
 80056a0:	2200      	movs	r2, #0
 80056a2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80056a4:	f001 f8d4 	bl	8006850 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80056a8:	e00f      	b.n	80056ca <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b0:	d10b      	bne.n	80056ca <vTaskStartScheduler+0xae>
	__asm volatile
 80056b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056b6:	f383 8811 	msr	BASEPRI, r3
 80056ba:	f3bf 8f6f 	isb	sy
 80056be:	f3bf 8f4f 	dsb	sy
 80056c2:	60fb      	str	r3, [r7, #12]
}
 80056c4:	bf00      	nop
 80056c6:	bf00      	nop
 80056c8:	e7fd      	b.n	80056c6 <vTaskStartScheduler+0xaa>
}
 80056ca:	bf00      	nop
 80056cc:	3718      	adds	r7, #24
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	08007080 	.word	0x08007080
 80056d8:	08005d0d 	.word	0x08005d0d
 80056dc:	20000d88 	.word	0x20000d88
 80056e0:	20000d84 	.word	0x20000d84
 80056e4:	20000d70 	.word	0x20000d70
 80056e8:	20000d68 	.word	0x20000d68

080056ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80056ec:	b480      	push	{r7}
 80056ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80056f0:	4b04      	ldr	r3, [pc, #16]	@ (8005704 <vTaskSuspendAll+0x18>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	3301      	adds	r3, #1
 80056f6:	4a03      	ldr	r2, [pc, #12]	@ (8005704 <vTaskSuspendAll+0x18>)
 80056f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80056fa:	bf00      	nop
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr
 8005704:	20000d8c 	.word	0x20000d8c

08005708 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800570e:	2300      	movs	r3, #0
 8005710:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005712:	2300      	movs	r3, #0
 8005714:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005716:	4b42      	ldr	r3, [pc, #264]	@ (8005820 <xTaskResumeAll+0x118>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d10b      	bne.n	8005736 <xTaskResumeAll+0x2e>
	__asm volatile
 800571e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005722:	f383 8811 	msr	BASEPRI, r3
 8005726:	f3bf 8f6f 	isb	sy
 800572a:	f3bf 8f4f 	dsb	sy
 800572e:	603b      	str	r3, [r7, #0]
}
 8005730:	bf00      	nop
 8005732:	bf00      	nop
 8005734:	e7fd      	b.n	8005732 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005736:	f001 f92f 	bl	8006998 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800573a:	4b39      	ldr	r3, [pc, #228]	@ (8005820 <xTaskResumeAll+0x118>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	3b01      	subs	r3, #1
 8005740:	4a37      	ldr	r2, [pc, #220]	@ (8005820 <xTaskResumeAll+0x118>)
 8005742:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005744:	4b36      	ldr	r3, [pc, #216]	@ (8005820 <xTaskResumeAll+0x118>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d162      	bne.n	8005812 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800574c:	4b35      	ldr	r3, [pc, #212]	@ (8005824 <xTaskResumeAll+0x11c>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d05e      	beq.n	8005812 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005754:	e02f      	b.n	80057b6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005756:	4b34      	ldr	r3, [pc, #208]	@ (8005828 <xTaskResumeAll+0x120>)
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	3318      	adds	r3, #24
 8005762:	4618      	mov	r0, r3
 8005764:	f7ff f81e 	bl	80047a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	3304      	adds	r3, #4
 800576c:	4618      	mov	r0, r3
 800576e:	f7ff f819 	bl	80047a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005776:	4b2d      	ldr	r3, [pc, #180]	@ (800582c <xTaskResumeAll+0x124>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	429a      	cmp	r2, r3
 800577c:	d903      	bls.n	8005786 <xTaskResumeAll+0x7e>
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005782:	4a2a      	ldr	r2, [pc, #168]	@ (800582c <xTaskResumeAll+0x124>)
 8005784:	6013      	str	r3, [r2, #0]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800578a:	4613      	mov	r3, r2
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	4413      	add	r3, r2
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	4a27      	ldr	r2, [pc, #156]	@ (8005830 <xTaskResumeAll+0x128>)
 8005794:	441a      	add	r2, r3
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	3304      	adds	r3, #4
 800579a:	4619      	mov	r1, r3
 800579c:	4610      	mov	r0, r2
 800579e:	f7fe ffa4 	bl	80046ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057a6:	4b23      	ldr	r3, [pc, #140]	@ (8005834 <xTaskResumeAll+0x12c>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d302      	bcc.n	80057b6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80057b0:	4b21      	ldr	r3, [pc, #132]	@ (8005838 <xTaskResumeAll+0x130>)
 80057b2:	2201      	movs	r2, #1
 80057b4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057b6:	4b1c      	ldr	r3, [pc, #112]	@ (8005828 <xTaskResumeAll+0x120>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1cb      	bne.n	8005756 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d001      	beq.n	80057c8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80057c4:	f000 fb58 	bl	8005e78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80057c8:	4b1c      	ldr	r3, [pc, #112]	@ (800583c <xTaskResumeAll+0x134>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d010      	beq.n	80057f6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80057d4:	f000 f846 	bl	8005864 <xTaskIncrementTick>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d002      	beq.n	80057e4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80057de:	4b16      	ldr	r3, [pc, #88]	@ (8005838 <xTaskResumeAll+0x130>)
 80057e0:	2201      	movs	r2, #1
 80057e2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	3b01      	subs	r3, #1
 80057e8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d1f1      	bne.n	80057d4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80057f0:	4b12      	ldr	r3, [pc, #72]	@ (800583c <xTaskResumeAll+0x134>)
 80057f2:	2200      	movs	r2, #0
 80057f4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80057f6:	4b10      	ldr	r3, [pc, #64]	@ (8005838 <xTaskResumeAll+0x130>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d009      	beq.n	8005812 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80057fe:	2301      	movs	r3, #1
 8005800:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005802:	4b0f      	ldr	r3, [pc, #60]	@ (8005840 <xTaskResumeAll+0x138>)
 8005804:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005808:	601a      	str	r2, [r3, #0]
 800580a:	f3bf 8f4f 	dsb	sy
 800580e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005812:	f001 f8f3 	bl	80069fc <vPortExitCritical>

	return xAlreadyYielded;
 8005816:	68bb      	ldr	r3, [r7, #8]
}
 8005818:	4618      	mov	r0, r3
 800581a:	3710      	adds	r7, #16
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	20000d8c 	.word	0x20000d8c
 8005824:	20000d64 	.word	0x20000d64
 8005828:	20000d24 	.word	0x20000d24
 800582c:	20000d6c 	.word	0x20000d6c
 8005830:	20000894 	.word	0x20000894
 8005834:	20000890 	.word	0x20000890
 8005838:	20000d78 	.word	0x20000d78
 800583c:	20000d74 	.word	0x20000d74
 8005840:	e000ed04 	.word	0xe000ed04

08005844 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800584a:	4b05      	ldr	r3, [pc, #20]	@ (8005860 <xTaskGetTickCount+0x1c>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005850:	687b      	ldr	r3, [r7, #4]
}
 8005852:	4618      	mov	r0, r3
 8005854:	370c      	adds	r7, #12
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr
 800585e:	bf00      	nop
 8005860:	20000d68 	.word	0x20000d68

08005864 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b086      	sub	sp, #24
 8005868:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800586a:	2300      	movs	r3, #0
 800586c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800586e:	4b4f      	ldr	r3, [pc, #316]	@ (80059ac <xTaskIncrementTick+0x148>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2b00      	cmp	r3, #0
 8005874:	f040 8090 	bne.w	8005998 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005878:	4b4d      	ldr	r3, [pc, #308]	@ (80059b0 <xTaskIncrementTick+0x14c>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	3301      	adds	r3, #1
 800587e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005880:	4a4b      	ldr	r2, [pc, #300]	@ (80059b0 <xTaskIncrementTick+0x14c>)
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d121      	bne.n	80058d0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800588c:	4b49      	ldr	r3, [pc, #292]	@ (80059b4 <xTaskIncrementTick+0x150>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00b      	beq.n	80058ae <xTaskIncrementTick+0x4a>
	__asm volatile
 8005896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800589a:	f383 8811 	msr	BASEPRI, r3
 800589e:	f3bf 8f6f 	isb	sy
 80058a2:	f3bf 8f4f 	dsb	sy
 80058a6:	603b      	str	r3, [r7, #0]
}
 80058a8:	bf00      	nop
 80058aa:	bf00      	nop
 80058ac:	e7fd      	b.n	80058aa <xTaskIncrementTick+0x46>
 80058ae:	4b41      	ldr	r3, [pc, #260]	@ (80059b4 <xTaskIncrementTick+0x150>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	60fb      	str	r3, [r7, #12]
 80058b4:	4b40      	ldr	r3, [pc, #256]	@ (80059b8 <xTaskIncrementTick+0x154>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a3e      	ldr	r2, [pc, #248]	@ (80059b4 <xTaskIncrementTick+0x150>)
 80058ba:	6013      	str	r3, [r2, #0]
 80058bc:	4a3e      	ldr	r2, [pc, #248]	@ (80059b8 <xTaskIncrementTick+0x154>)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6013      	str	r3, [r2, #0]
 80058c2:	4b3e      	ldr	r3, [pc, #248]	@ (80059bc <xTaskIncrementTick+0x158>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	3301      	adds	r3, #1
 80058c8:	4a3c      	ldr	r2, [pc, #240]	@ (80059bc <xTaskIncrementTick+0x158>)
 80058ca:	6013      	str	r3, [r2, #0]
 80058cc:	f000 fad4 	bl	8005e78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80058d0:	4b3b      	ldr	r3, [pc, #236]	@ (80059c0 <xTaskIncrementTick+0x15c>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	693a      	ldr	r2, [r7, #16]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d349      	bcc.n	800596e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058da:	4b36      	ldr	r3, [pc, #216]	@ (80059b4 <xTaskIncrementTick+0x150>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d104      	bne.n	80058ee <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058e4:	4b36      	ldr	r3, [pc, #216]	@ (80059c0 <xTaskIncrementTick+0x15c>)
 80058e6:	f04f 32ff 	mov.w	r2, #4294967295
 80058ea:	601a      	str	r2, [r3, #0]
					break;
 80058ec:	e03f      	b.n	800596e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058ee:	4b31      	ldr	r3, [pc, #196]	@ (80059b4 <xTaskIncrementTick+0x150>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80058fe:	693a      	ldr	r2, [r7, #16]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	429a      	cmp	r2, r3
 8005904:	d203      	bcs.n	800590e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005906:	4a2e      	ldr	r2, [pc, #184]	@ (80059c0 <xTaskIncrementTick+0x15c>)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800590c:	e02f      	b.n	800596e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	3304      	adds	r3, #4
 8005912:	4618      	mov	r0, r3
 8005914:	f7fe ff46 	bl	80047a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800591c:	2b00      	cmp	r3, #0
 800591e:	d004      	beq.n	800592a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	3318      	adds	r3, #24
 8005924:	4618      	mov	r0, r3
 8005926:	f7fe ff3d 	bl	80047a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800592e:	4b25      	ldr	r3, [pc, #148]	@ (80059c4 <xTaskIncrementTick+0x160>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	429a      	cmp	r2, r3
 8005934:	d903      	bls.n	800593e <xTaskIncrementTick+0xda>
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800593a:	4a22      	ldr	r2, [pc, #136]	@ (80059c4 <xTaskIncrementTick+0x160>)
 800593c:	6013      	str	r3, [r2, #0]
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005942:	4613      	mov	r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	4413      	add	r3, r2
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	4a1f      	ldr	r2, [pc, #124]	@ (80059c8 <xTaskIncrementTick+0x164>)
 800594c:	441a      	add	r2, r3
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	3304      	adds	r3, #4
 8005952:	4619      	mov	r1, r3
 8005954:	4610      	mov	r0, r2
 8005956:	f7fe fec8 	bl	80046ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800595e:	4b1b      	ldr	r3, [pc, #108]	@ (80059cc <xTaskIncrementTick+0x168>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005964:	429a      	cmp	r2, r3
 8005966:	d3b8      	bcc.n	80058da <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005968:	2301      	movs	r3, #1
 800596a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800596c:	e7b5      	b.n	80058da <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800596e:	4b17      	ldr	r3, [pc, #92]	@ (80059cc <xTaskIncrementTick+0x168>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005974:	4914      	ldr	r1, [pc, #80]	@ (80059c8 <xTaskIncrementTick+0x164>)
 8005976:	4613      	mov	r3, r2
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	4413      	add	r3, r2
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	440b      	add	r3, r1
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2b01      	cmp	r3, #1
 8005984:	d901      	bls.n	800598a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005986:	2301      	movs	r3, #1
 8005988:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800598a:	4b11      	ldr	r3, [pc, #68]	@ (80059d0 <xTaskIncrementTick+0x16c>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d007      	beq.n	80059a2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005992:	2301      	movs	r3, #1
 8005994:	617b      	str	r3, [r7, #20]
 8005996:	e004      	b.n	80059a2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005998:	4b0e      	ldr	r3, [pc, #56]	@ (80059d4 <xTaskIncrementTick+0x170>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	3301      	adds	r3, #1
 800599e:	4a0d      	ldr	r2, [pc, #52]	@ (80059d4 <xTaskIncrementTick+0x170>)
 80059a0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80059a2:	697b      	ldr	r3, [r7, #20]
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3718      	adds	r7, #24
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}
 80059ac:	20000d8c 	.word	0x20000d8c
 80059b0:	20000d68 	.word	0x20000d68
 80059b4:	20000d1c 	.word	0x20000d1c
 80059b8:	20000d20 	.word	0x20000d20
 80059bc:	20000d7c 	.word	0x20000d7c
 80059c0:	20000d84 	.word	0x20000d84
 80059c4:	20000d6c 	.word	0x20000d6c
 80059c8:	20000894 	.word	0x20000894
 80059cc:	20000890 	.word	0x20000890
 80059d0:	20000d78 	.word	0x20000d78
 80059d4:	20000d74 	.word	0x20000d74

080059d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80059d8:	b480      	push	{r7}
 80059da:	b085      	sub	sp, #20
 80059dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80059de:	4b28      	ldr	r3, [pc, #160]	@ (8005a80 <vTaskSwitchContext+0xa8>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d003      	beq.n	80059ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80059e6:	4b27      	ldr	r3, [pc, #156]	@ (8005a84 <vTaskSwitchContext+0xac>)
 80059e8:	2201      	movs	r2, #1
 80059ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80059ec:	e042      	b.n	8005a74 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80059ee:	4b25      	ldr	r3, [pc, #148]	@ (8005a84 <vTaskSwitchContext+0xac>)
 80059f0:	2200      	movs	r2, #0
 80059f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059f4:	4b24      	ldr	r3, [pc, #144]	@ (8005a88 <vTaskSwitchContext+0xb0>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	60fb      	str	r3, [r7, #12]
 80059fa:	e011      	b.n	8005a20 <vTaskSwitchContext+0x48>
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d10b      	bne.n	8005a1a <vTaskSwitchContext+0x42>
	__asm volatile
 8005a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a06:	f383 8811 	msr	BASEPRI, r3
 8005a0a:	f3bf 8f6f 	isb	sy
 8005a0e:	f3bf 8f4f 	dsb	sy
 8005a12:	607b      	str	r3, [r7, #4]
}
 8005a14:	bf00      	nop
 8005a16:	bf00      	nop
 8005a18:	e7fd      	b.n	8005a16 <vTaskSwitchContext+0x3e>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	3b01      	subs	r3, #1
 8005a1e:	60fb      	str	r3, [r7, #12]
 8005a20:	491a      	ldr	r1, [pc, #104]	@ (8005a8c <vTaskSwitchContext+0xb4>)
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	4613      	mov	r3, r2
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	4413      	add	r3, r2
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	440b      	add	r3, r1
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d0e3      	beq.n	80059fc <vTaskSwitchContext+0x24>
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	4613      	mov	r3, r2
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	4413      	add	r3, r2
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	4a13      	ldr	r2, [pc, #76]	@ (8005a8c <vTaskSwitchContext+0xb4>)
 8005a40:	4413      	add	r3, r2
 8005a42:	60bb      	str	r3, [r7, #8]
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	685a      	ldr	r2, [r3, #4]
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	605a      	str	r2, [r3, #4]
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	685a      	ldr	r2, [r3, #4]
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	3308      	adds	r3, #8
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d104      	bne.n	8005a64 <vTaskSwitchContext+0x8c>
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	685a      	ldr	r2, [r3, #4]
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	605a      	str	r2, [r3, #4]
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	4a09      	ldr	r2, [pc, #36]	@ (8005a90 <vTaskSwitchContext+0xb8>)
 8005a6c:	6013      	str	r3, [r2, #0]
 8005a6e:	4a06      	ldr	r2, [pc, #24]	@ (8005a88 <vTaskSwitchContext+0xb0>)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6013      	str	r3, [r2, #0]
}
 8005a74:	bf00      	nop
 8005a76:	3714      	adds	r7, #20
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr
 8005a80:	20000d8c 	.word	0x20000d8c
 8005a84:	20000d78 	.word	0x20000d78
 8005a88:	20000d6c 	.word	0x20000d6c
 8005a8c:	20000894 	.word	0x20000894
 8005a90:	20000890 	.word	0x20000890

08005a94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d10b      	bne.n	8005abc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aa8:	f383 8811 	msr	BASEPRI, r3
 8005aac:	f3bf 8f6f 	isb	sy
 8005ab0:	f3bf 8f4f 	dsb	sy
 8005ab4:	60fb      	str	r3, [r7, #12]
}
 8005ab6:	bf00      	nop
 8005ab8:	bf00      	nop
 8005aba:	e7fd      	b.n	8005ab8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005abc:	4b07      	ldr	r3, [pc, #28]	@ (8005adc <vTaskPlaceOnEventList+0x48>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	3318      	adds	r3, #24
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f7fe fe34 	bl	8004732 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005aca:	2101      	movs	r1, #1
 8005acc:	6838      	ldr	r0, [r7, #0]
 8005ace:	f000 fa81 	bl	8005fd4 <prvAddCurrentTaskToDelayedList>
}
 8005ad2:	bf00      	nop
 8005ad4:	3710      	adds	r7, #16
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	20000890 	.word	0x20000890

08005ae0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b086      	sub	sp, #24
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d10b      	bne.n	8005b0a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005af6:	f383 8811 	msr	BASEPRI, r3
 8005afa:	f3bf 8f6f 	isb	sy
 8005afe:	f3bf 8f4f 	dsb	sy
 8005b02:	617b      	str	r3, [r7, #20]
}
 8005b04:	bf00      	nop
 8005b06:	bf00      	nop
 8005b08:	e7fd      	b.n	8005b06 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8005b34 <vTaskPlaceOnEventListRestricted+0x54>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	3318      	adds	r3, #24
 8005b10:	4619      	mov	r1, r3
 8005b12:	68f8      	ldr	r0, [r7, #12]
 8005b14:	f7fe fde9 	bl	80046ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d002      	beq.n	8005b24 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b22:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005b24:	6879      	ldr	r1, [r7, #4]
 8005b26:	68b8      	ldr	r0, [r7, #8]
 8005b28:	f000 fa54 	bl	8005fd4 <prvAddCurrentTaskToDelayedList>
	}
 8005b2c:	bf00      	nop
 8005b2e:	3718      	adds	r7, #24
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	20000890 	.word	0x20000890

08005b38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b086      	sub	sp, #24
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d10b      	bne.n	8005b66 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b52:	f383 8811 	msr	BASEPRI, r3
 8005b56:	f3bf 8f6f 	isb	sy
 8005b5a:	f3bf 8f4f 	dsb	sy
 8005b5e:	60fb      	str	r3, [r7, #12]
}
 8005b60:	bf00      	nop
 8005b62:	bf00      	nop
 8005b64:	e7fd      	b.n	8005b62 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	3318      	adds	r3, #24
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f7fe fe1a 	bl	80047a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b70:	4b1d      	ldr	r3, [pc, #116]	@ (8005be8 <xTaskRemoveFromEventList+0xb0>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d11d      	bne.n	8005bb4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	3304      	adds	r3, #4
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f7fe fe11 	bl	80047a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b86:	4b19      	ldr	r3, [pc, #100]	@ (8005bec <xTaskRemoveFromEventList+0xb4>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d903      	bls.n	8005b96 <xTaskRemoveFromEventList+0x5e>
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b92:	4a16      	ldr	r2, [pc, #88]	@ (8005bec <xTaskRemoveFromEventList+0xb4>)
 8005b94:	6013      	str	r3, [r2, #0]
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	4413      	add	r3, r2
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	4a13      	ldr	r2, [pc, #76]	@ (8005bf0 <xTaskRemoveFromEventList+0xb8>)
 8005ba4:	441a      	add	r2, r3
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	3304      	adds	r3, #4
 8005baa:	4619      	mov	r1, r3
 8005bac:	4610      	mov	r0, r2
 8005bae:	f7fe fd9c 	bl	80046ea <vListInsertEnd>
 8005bb2:	e005      	b.n	8005bc0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	3318      	adds	r3, #24
 8005bb8:	4619      	mov	r1, r3
 8005bba:	480e      	ldr	r0, [pc, #56]	@ (8005bf4 <xTaskRemoveFromEventList+0xbc>)
 8005bbc:	f7fe fd95 	bl	80046ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8005bf8 <xTaskRemoveFromEventList+0xc0>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d905      	bls.n	8005bda <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8005bfc <xTaskRemoveFromEventList+0xc4>)
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	601a      	str	r2, [r3, #0]
 8005bd8:	e001      	b.n	8005bde <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005bde:	697b      	ldr	r3, [r7, #20]
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3718      	adds	r7, #24
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	20000d8c 	.word	0x20000d8c
 8005bec:	20000d6c 	.word	0x20000d6c
 8005bf0:	20000894 	.word	0x20000894
 8005bf4:	20000d24 	.word	0x20000d24
 8005bf8:	20000890 	.word	0x20000890
 8005bfc:	20000d78 	.word	0x20000d78

08005c00 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005c08:	4b06      	ldr	r3, [pc, #24]	@ (8005c24 <vTaskInternalSetTimeOutState+0x24>)
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005c10:	4b05      	ldr	r3, [pc, #20]	@ (8005c28 <vTaskInternalSetTimeOutState+0x28>)
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	605a      	str	r2, [r3, #4]
}
 8005c18:	bf00      	nop
 8005c1a:	370c      	adds	r7, #12
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr
 8005c24:	20000d7c 	.word	0x20000d7c
 8005c28:	20000d68 	.word	0x20000d68

08005c2c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b088      	sub	sp, #32
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d10b      	bne.n	8005c54 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c40:	f383 8811 	msr	BASEPRI, r3
 8005c44:	f3bf 8f6f 	isb	sy
 8005c48:	f3bf 8f4f 	dsb	sy
 8005c4c:	613b      	str	r3, [r7, #16]
}
 8005c4e:	bf00      	nop
 8005c50:	bf00      	nop
 8005c52:	e7fd      	b.n	8005c50 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d10b      	bne.n	8005c72 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005c5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c5e:	f383 8811 	msr	BASEPRI, r3
 8005c62:	f3bf 8f6f 	isb	sy
 8005c66:	f3bf 8f4f 	dsb	sy
 8005c6a:	60fb      	str	r3, [r7, #12]
}
 8005c6c:	bf00      	nop
 8005c6e:	bf00      	nop
 8005c70:	e7fd      	b.n	8005c6e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005c72:	f000 fe91 	bl	8006998 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005c76:	4b1d      	ldr	r3, [pc, #116]	@ (8005cec <xTaskCheckForTimeOut+0xc0>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	69ba      	ldr	r2, [r7, #24]
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c8e:	d102      	bne.n	8005c96 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005c90:	2300      	movs	r3, #0
 8005c92:	61fb      	str	r3, [r7, #28]
 8005c94:	e023      	b.n	8005cde <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	4b15      	ldr	r3, [pc, #84]	@ (8005cf0 <xTaskCheckForTimeOut+0xc4>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d007      	beq.n	8005cb2 <xTaskCheckForTimeOut+0x86>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	69ba      	ldr	r2, [r7, #24]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d302      	bcc.n	8005cb2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005cac:	2301      	movs	r3, #1
 8005cae:	61fb      	str	r3, [r7, #28]
 8005cb0:	e015      	b.n	8005cde <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	697a      	ldr	r2, [r7, #20]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d20b      	bcs.n	8005cd4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	1ad2      	subs	r2, r2, r3
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f7ff ff99 	bl	8005c00 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	61fb      	str	r3, [r7, #28]
 8005cd2:	e004      	b.n	8005cde <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005cde:	f000 fe8d 	bl	80069fc <vPortExitCritical>

	return xReturn;
 8005ce2:	69fb      	ldr	r3, [r7, #28]
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3720      	adds	r7, #32
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	20000d68 	.word	0x20000d68
 8005cf0:	20000d7c 	.word	0x20000d7c

08005cf4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005cf8:	4b03      	ldr	r3, [pc, #12]	@ (8005d08 <vTaskMissedYield+0x14>)
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	601a      	str	r2, [r3, #0]
}
 8005cfe:	bf00      	nop
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr
 8005d08:	20000d78 	.word	0x20000d78

08005d0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005d14:	f000 f852 	bl	8005dbc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005d18:	4b06      	ldr	r3, [pc, #24]	@ (8005d34 <prvIdleTask+0x28>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d9f9      	bls.n	8005d14 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005d20:	4b05      	ldr	r3, [pc, #20]	@ (8005d38 <prvIdleTask+0x2c>)
 8005d22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d26:	601a      	str	r2, [r3, #0]
 8005d28:	f3bf 8f4f 	dsb	sy
 8005d2c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005d30:	e7f0      	b.n	8005d14 <prvIdleTask+0x8>
 8005d32:	bf00      	nop
 8005d34:	20000894 	.word	0x20000894
 8005d38:	e000ed04 	.word	0xe000ed04

08005d3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b082      	sub	sp, #8
 8005d40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d42:	2300      	movs	r3, #0
 8005d44:	607b      	str	r3, [r7, #4]
 8005d46:	e00c      	b.n	8005d62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	4413      	add	r3, r2
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	4a12      	ldr	r2, [pc, #72]	@ (8005d9c <prvInitialiseTaskLists+0x60>)
 8005d54:	4413      	add	r3, r2
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7fe fc9a 	bl	8004690 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	3301      	adds	r3, #1
 8005d60:	607b      	str	r3, [r7, #4]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2b37      	cmp	r3, #55	@ 0x37
 8005d66:	d9ef      	bls.n	8005d48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005d68:	480d      	ldr	r0, [pc, #52]	@ (8005da0 <prvInitialiseTaskLists+0x64>)
 8005d6a:	f7fe fc91 	bl	8004690 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005d6e:	480d      	ldr	r0, [pc, #52]	@ (8005da4 <prvInitialiseTaskLists+0x68>)
 8005d70:	f7fe fc8e 	bl	8004690 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005d74:	480c      	ldr	r0, [pc, #48]	@ (8005da8 <prvInitialiseTaskLists+0x6c>)
 8005d76:	f7fe fc8b 	bl	8004690 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005d7a:	480c      	ldr	r0, [pc, #48]	@ (8005dac <prvInitialiseTaskLists+0x70>)
 8005d7c:	f7fe fc88 	bl	8004690 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005d80:	480b      	ldr	r0, [pc, #44]	@ (8005db0 <prvInitialiseTaskLists+0x74>)
 8005d82:	f7fe fc85 	bl	8004690 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005d86:	4b0b      	ldr	r3, [pc, #44]	@ (8005db4 <prvInitialiseTaskLists+0x78>)
 8005d88:	4a05      	ldr	r2, [pc, #20]	@ (8005da0 <prvInitialiseTaskLists+0x64>)
 8005d8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005d8c:	4b0a      	ldr	r3, [pc, #40]	@ (8005db8 <prvInitialiseTaskLists+0x7c>)
 8005d8e:	4a05      	ldr	r2, [pc, #20]	@ (8005da4 <prvInitialiseTaskLists+0x68>)
 8005d90:	601a      	str	r2, [r3, #0]
}
 8005d92:	bf00      	nop
 8005d94:	3708      	adds	r7, #8
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	20000894 	.word	0x20000894
 8005da0:	20000cf4 	.word	0x20000cf4
 8005da4:	20000d08 	.word	0x20000d08
 8005da8:	20000d24 	.word	0x20000d24
 8005dac:	20000d38 	.word	0x20000d38
 8005db0:	20000d50 	.word	0x20000d50
 8005db4:	20000d1c 	.word	0x20000d1c
 8005db8:	20000d20 	.word	0x20000d20

08005dbc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005dc2:	e019      	b.n	8005df8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005dc4:	f000 fde8 	bl	8006998 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dc8:	4b10      	ldr	r3, [pc, #64]	@ (8005e0c <prvCheckTasksWaitingTermination+0x50>)
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	3304      	adds	r3, #4
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f7fe fce5 	bl	80047a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005dda:	4b0d      	ldr	r3, [pc, #52]	@ (8005e10 <prvCheckTasksWaitingTermination+0x54>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	3b01      	subs	r3, #1
 8005de0:	4a0b      	ldr	r2, [pc, #44]	@ (8005e10 <prvCheckTasksWaitingTermination+0x54>)
 8005de2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005de4:	4b0b      	ldr	r3, [pc, #44]	@ (8005e14 <prvCheckTasksWaitingTermination+0x58>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	3b01      	subs	r3, #1
 8005dea:	4a0a      	ldr	r2, [pc, #40]	@ (8005e14 <prvCheckTasksWaitingTermination+0x58>)
 8005dec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005dee:	f000 fe05 	bl	80069fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 f810 	bl	8005e18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005df8:	4b06      	ldr	r3, [pc, #24]	@ (8005e14 <prvCheckTasksWaitingTermination+0x58>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d1e1      	bne.n	8005dc4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005e00:	bf00      	nop
 8005e02:	bf00      	nop
 8005e04:	3708      	adds	r7, #8
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	20000d38 	.word	0x20000d38
 8005e10:	20000d64 	.word	0x20000d64
 8005e14:	20000d4c 	.word	0x20000d4c

08005e18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d108      	bne.n	8005e3c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f000 ffa2 	bl	8006d78 <vPortFree>
				vPortFree( pxTCB );
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 ff9f 	bl	8006d78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005e3a:	e019      	b.n	8005e70 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d103      	bne.n	8005e4e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 ff96 	bl	8006d78 <vPortFree>
	}
 8005e4c:	e010      	b.n	8005e70 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d00b      	beq.n	8005e70 <prvDeleteTCB+0x58>
	__asm volatile
 8005e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e5c:	f383 8811 	msr	BASEPRI, r3
 8005e60:	f3bf 8f6f 	isb	sy
 8005e64:	f3bf 8f4f 	dsb	sy
 8005e68:	60fb      	str	r3, [r7, #12]
}
 8005e6a:	bf00      	nop
 8005e6c:	bf00      	nop
 8005e6e:	e7fd      	b.n	8005e6c <prvDeleteTCB+0x54>
	}
 8005e70:	bf00      	nop
 8005e72:	3710      	adds	r7, #16
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e7e:	4b0c      	ldr	r3, [pc, #48]	@ (8005eb0 <prvResetNextTaskUnblockTime+0x38>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d104      	bne.n	8005e92 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005e88:	4b0a      	ldr	r3, [pc, #40]	@ (8005eb4 <prvResetNextTaskUnblockTime+0x3c>)
 8005e8a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e8e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005e90:	e008      	b.n	8005ea4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e92:	4b07      	ldr	r3, [pc, #28]	@ (8005eb0 <prvResetNextTaskUnblockTime+0x38>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	4a04      	ldr	r2, [pc, #16]	@ (8005eb4 <prvResetNextTaskUnblockTime+0x3c>)
 8005ea2:	6013      	str	r3, [r2, #0]
}
 8005ea4:	bf00      	nop
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr
 8005eb0:	20000d1c 	.word	0x20000d1c
 8005eb4:	20000d84 	.word	0x20000d84

08005eb8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005ebe:	4b0b      	ldr	r3, [pc, #44]	@ (8005eec <xTaskGetSchedulerState+0x34>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d102      	bne.n	8005ecc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	607b      	str	r3, [r7, #4]
 8005eca:	e008      	b.n	8005ede <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ecc:	4b08      	ldr	r3, [pc, #32]	@ (8005ef0 <xTaskGetSchedulerState+0x38>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d102      	bne.n	8005eda <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005ed4:	2302      	movs	r3, #2
 8005ed6:	607b      	str	r3, [r7, #4]
 8005ed8:	e001      	b.n	8005ede <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005eda:	2300      	movs	r3, #0
 8005edc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005ede:	687b      	ldr	r3, [r7, #4]
	}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr
 8005eec:	20000d70 	.word	0x20000d70
 8005ef0:	20000d8c 	.word	0x20000d8c

08005ef4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b086      	sub	sp, #24
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005f00:	2300      	movs	r3, #0
 8005f02:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d058      	beq.n	8005fbc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005f0a:	4b2f      	ldr	r3, [pc, #188]	@ (8005fc8 <xTaskPriorityDisinherit+0xd4>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	693a      	ldr	r2, [r7, #16]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d00b      	beq.n	8005f2c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f18:	f383 8811 	msr	BASEPRI, r3
 8005f1c:	f3bf 8f6f 	isb	sy
 8005f20:	f3bf 8f4f 	dsb	sy
 8005f24:	60fb      	str	r3, [r7, #12]
}
 8005f26:	bf00      	nop
 8005f28:	bf00      	nop
 8005f2a:	e7fd      	b.n	8005f28 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d10b      	bne.n	8005f4c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005f34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f38:	f383 8811 	msr	BASEPRI, r3
 8005f3c:	f3bf 8f6f 	isb	sy
 8005f40:	f3bf 8f4f 	dsb	sy
 8005f44:	60bb      	str	r3, [r7, #8]
}
 8005f46:	bf00      	nop
 8005f48:	bf00      	nop
 8005f4a:	e7fd      	b.n	8005f48 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f50:	1e5a      	subs	r2, r3, #1
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d02c      	beq.n	8005fbc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d128      	bne.n	8005fbc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	3304      	adds	r3, #4
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f7fe fc18 	bl	80047a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f80:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f8c:	4b0f      	ldr	r3, [pc, #60]	@ (8005fcc <xTaskPriorityDisinherit+0xd8>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d903      	bls.n	8005f9c <xTaskPriorityDisinherit+0xa8>
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f98:	4a0c      	ldr	r2, [pc, #48]	@ (8005fcc <xTaskPriorityDisinherit+0xd8>)
 8005f9a:	6013      	str	r3, [r2, #0]
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fa0:	4613      	mov	r3, r2
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	4413      	add	r3, r2
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	4a09      	ldr	r2, [pc, #36]	@ (8005fd0 <xTaskPriorityDisinherit+0xdc>)
 8005faa:	441a      	add	r2, r3
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	3304      	adds	r3, #4
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	4610      	mov	r0, r2
 8005fb4:	f7fe fb99 	bl	80046ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005fbc:	697b      	ldr	r3, [r7, #20]
	}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3718      	adds	r7, #24
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	20000890 	.word	0x20000890
 8005fcc:	20000d6c 	.word	0x20000d6c
 8005fd0:	20000894 	.word	0x20000894

08005fd4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005fde:	4b21      	ldr	r3, [pc, #132]	@ (8006064 <prvAddCurrentTaskToDelayedList+0x90>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fe4:	4b20      	ldr	r3, [pc, #128]	@ (8006068 <prvAddCurrentTaskToDelayedList+0x94>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	3304      	adds	r3, #4
 8005fea:	4618      	mov	r0, r3
 8005fec:	f7fe fbda 	bl	80047a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff6:	d10a      	bne.n	800600e <prvAddCurrentTaskToDelayedList+0x3a>
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d007      	beq.n	800600e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ffe:	4b1a      	ldr	r3, [pc, #104]	@ (8006068 <prvAddCurrentTaskToDelayedList+0x94>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	3304      	adds	r3, #4
 8006004:	4619      	mov	r1, r3
 8006006:	4819      	ldr	r0, [pc, #100]	@ (800606c <prvAddCurrentTaskToDelayedList+0x98>)
 8006008:	f7fe fb6f 	bl	80046ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800600c:	e026      	b.n	800605c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4413      	add	r3, r2
 8006014:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006016:	4b14      	ldr	r3, [pc, #80]	@ (8006068 <prvAddCurrentTaskToDelayedList+0x94>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68ba      	ldr	r2, [r7, #8]
 800601c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800601e:	68ba      	ldr	r2, [r7, #8]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	429a      	cmp	r2, r3
 8006024:	d209      	bcs.n	800603a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006026:	4b12      	ldr	r3, [pc, #72]	@ (8006070 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	4b0f      	ldr	r3, [pc, #60]	@ (8006068 <prvAddCurrentTaskToDelayedList+0x94>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	3304      	adds	r3, #4
 8006030:	4619      	mov	r1, r3
 8006032:	4610      	mov	r0, r2
 8006034:	f7fe fb7d 	bl	8004732 <vListInsert>
}
 8006038:	e010      	b.n	800605c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800603a:	4b0e      	ldr	r3, [pc, #56]	@ (8006074 <prvAddCurrentTaskToDelayedList+0xa0>)
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	4b0a      	ldr	r3, [pc, #40]	@ (8006068 <prvAddCurrentTaskToDelayedList+0x94>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	3304      	adds	r3, #4
 8006044:	4619      	mov	r1, r3
 8006046:	4610      	mov	r0, r2
 8006048:	f7fe fb73 	bl	8004732 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800604c:	4b0a      	ldr	r3, [pc, #40]	@ (8006078 <prvAddCurrentTaskToDelayedList+0xa4>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68ba      	ldr	r2, [r7, #8]
 8006052:	429a      	cmp	r2, r3
 8006054:	d202      	bcs.n	800605c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006056:	4a08      	ldr	r2, [pc, #32]	@ (8006078 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	6013      	str	r3, [r2, #0]
}
 800605c:	bf00      	nop
 800605e:	3710      	adds	r7, #16
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}
 8006064:	20000d68 	.word	0x20000d68
 8006068:	20000890 	.word	0x20000890
 800606c:	20000d50 	.word	0x20000d50
 8006070:	20000d20 	.word	0x20000d20
 8006074:	20000d1c 	.word	0x20000d1c
 8006078:	20000d84 	.word	0x20000d84

0800607c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b08a      	sub	sp, #40	@ 0x28
 8006080:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006082:	2300      	movs	r3, #0
 8006084:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006086:	f000 fb13 	bl	80066b0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800608a:	4b1d      	ldr	r3, [pc, #116]	@ (8006100 <xTimerCreateTimerTask+0x84>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d021      	beq.n	80060d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006092:	2300      	movs	r3, #0
 8006094:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006096:	2300      	movs	r3, #0
 8006098:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800609a:	1d3a      	adds	r2, r7, #4
 800609c:	f107 0108 	add.w	r1, r7, #8
 80060a0:	f107 030c 	add.w	r3, r7, #12
 80060a4:	4618      	mov	r0, r3
 80060a6:	f7fe fad9 	bl	800465c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80060aa:	6879      	ldr	r1, [r7, #4]
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	9202      	str	r2, [sp, #8]
 80060b2:	9301      	str	r3, [sp, #4]
 80060b4:	2302      	movs	r3, #2
 80060b6:	9300      	str	r3, [sp, #0]
 80060b8:	2300      	movs	r3, #0
 80060ba:	460a      	mov	r2, r1
 80060bc:	4911      	ldr	r1, [pc, #68]	@ (8006104 <xTimerCreateTimerTask+0x88>)
 80060be:	4812      	ldr	r0, [pc, #72]	@ (8006108 <xTimerCreateTimerTask+0x8c>)
 80060c0:	f7ff f8d0 	bl	8005264 <xTaskCreateStatic>
 80060c4:	4603      	mov	r3, r0
 80060c6:	4a11      	ldr	r2, [pc, #68]	@ (800610c <xTimerCreateTimerTask+0x90>)
 80060c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80060ca:	4b10      	ldr	r3, [pc, #64]	@ (800610c <xTimerCreateTimerTask+0x90>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d001      	beq.n	80060d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80060d2:	2301      	movs	r3, #1
 80060d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d10b      	bne.n	80060f4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80060dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060e0:	f383 8811 	msr	BASEPRI, r3
 80060e4:	f3bf 8f6f 	isb	sy
 80060e8:	f3bf 8f4f 	dsb	sy
 80060ec:	613b      	str	r3, [r7, #16]
}
 80060ee:	bf00      	nop
 80060f0:	bf00      	nop
 80060f2:	e7fd      	b.n	80060f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80060f4:	697b      	ldr	r3, [r7, #20]
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3718      	adds	r7, #24
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	20000dc0 	.word	0x20000dc0
 8006104:	08007088 	.word	0x08007088
 8006108:	08006249 	.word	0x08006249
 800610c:	20000dc4 	.word	0x20000dc4

08006110 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b08a      	sub	sp, #40	@ 0x28
 8006114:	af00      	add	r7, sp, #0
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	607a      	str	r2, [r7, #4]
 800611c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800611e:	2300      	movs	r3, #0
 8006120:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d10b      	bne.n	8006140 <xTimerGenericCommand+0x30>
	__asm volatile
 8006128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800612c:	f383 8811 	msr	BASEPRI, r3
 8006130:	f3bf 8f6f 	isb	sy
 8006134:	f3bf 8f4f 	dsb	sy
 8006138:	623b      	str	r3, [r7, #32]
}
 800613a:	bf00      	nop
 800613c:	bf00      	nop
 800613e:	e7fd      	b.n	800613c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006140:	4b19      	ldr	r3, [pc, #100]	@ (80061a8 <xTimerGenericCommand+0x98>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d02a      	beq.n	800619e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	2b05      	cmp	r3, #5
 8006158:	dc18      	bgt.n	800618c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800615a:	f7ff fead 	bl	8005eb8 <xTaskGetSchedulerState>
 800615e:	4603      	mov	r3, r0
 8006160:	2b02      	cmp	r3, #2
 8006162:	d109      	bne.n	8006178 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006164:	4b10      	ldr	r3, [pc, #64]	@ (80061a8 <xTimerGenericCommand+0x98>)
 8006166:	6818      	ldr	r0, [r3, #0]
 8006168:	f107 0110 	add.w	r1, r7, #16
 800616c:	2300      	movs	r3, #0
 800616e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006170:	f7fe fc88 	bl	8004a84 <xQueueGenericSend>
 8006174:	6278      	str	r0, [r7, #36]	@ 0x24
 8006176:	e012      	b.n	800619e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006178:	4b0b      	ldr	r3, [pc, #44]	@ (80061a8 <xTimerGenericCommand+0x98>)
 800617a:	6818      	ldr	r0, [r3, #0]
 800617c:	f107 0110 	add.w	r1, r7, #16
 8006180:	2300      	movs	r3, #0
 8006182:	2200      	movs	r2, #0
 8006184:	f7fe fc7e 	bl	8004a84 <xQueueGenericSend>
 8006188:	6278      	str	r0, [r7, #36]	@ 0x24
 800618a:	e008      	b.n	800619e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800618c:	4b06      	ldr	r3, [pc, #24]	@ (80061a8 <xTimerGenericCommand+0x98>)
 800618e:	6818      	ldr	r0, [r3, #0]
 8006190:	f107 0110 	add.w	r1, r7, #16
 8006194:	2300      	movs	r3, #0
 8006196:	683a      	ldr	r2, [r7, #0]
 8006198:	f7fe fd76 	bl	8004c88 <xQueueGenericSendFromISR>
 800619c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800619e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3728      	adds	r7, #40	@ 0x28
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	20000dc0 	.word	0x20000dc0

080061ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b088      	sub	sp, #32
 80061b0:	af02      	add	r7, sp, #8
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061b6:	4b23      	ldr	r3, [pc, #140]	@ (8006244 <prvProcessExpiredTimer+0x98>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	3304      	adds	r3, #4
 80061c4:	4618      	mov	r0, r3
 80061c6:	f7fe faed 	bl	80047a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80061d0:	f003 0304 	and.w	r3, r3, #4
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d023      	beq.n	8006220 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	699a      	ldr	r2, [r3, #24]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	18d1      	adds	r1, r2, r3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	683a      	ldr	r2, [r7, #0]
 80061e4:	6978      	ldr	r0, [r7, #20]
 80061e6:	f000 f8d5 	bl	8006394 <prvInsertTimerInActiveList>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d020      	beq.n	8006232 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80061f0:	2300      	movs	r3, #0
 80061f2:	9300      	str	r3, [sp, #0]
 80061f4:	2300      	movs	r3, #0
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	2100      	movs	r1, #0
 80061fa:	6978      	ldr	r0, [r7, #20]
 80061fc:	f7ff ff88 	bl	8006110 <xTimerGenericCommand>
 8006200:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d114      	bne.n	8006232 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800620c:	f383 8811 	msr	BASEPRI, r3
 8006210:	f3bf 8f6f 	isb	sy
 8006214:	f3bf 8f4f 	dsb	sy
 8006218:	60fb      	str	r3, [r7, #12]
}
 800621a:	bf00      	nop
 800621c:	bf00      	nop
 800621e:	e7fd      	b.n	800621c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006226:	f023 0301 	bic.w	r3, r3, #1
 800622a:	b2da      	uxtb	r2, r3
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	6a1b      	ldr	r3, [r3, #32]
 8006236:	6978      	ldr	r0, [r7, #20]
 8006238:	4798      	blx	r3
}
 800623a:	bf00      	nop
 800623c:	3718      	adds	r7, #24
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	20000db8 	.word	0x20000db8

08006248 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006250:	f107 0308 	add.w	r3, r7, #8
 8006254:	4618      	mov	r0, r3
 8006256:	f000 f859 	bl	800630c <prvGetNextExpireTime>
 800625a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	4619      	mov	r1, r3
 8006260:	68f8      	ldr	r0, [r7, #12]
 8006262:	f000 f805 	bl	8006270 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006266:	f000 f8d7 	bl	8006418 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800626a:	bf00      	nop
 800626c:	e7f0      	b.n	8006250 <prvTimerTask+0x8>
	...

08006270 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800627a:	f7ff fa37 	bl	80056ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800627e:	f107 0308 	add.w	r3, r7, #8
 8006282:	4618      	mov	r0, r3
 8006284:	f000 f866 	bl	8006354 <prvSampleTimeNow>
 8006288:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d130      	bne.n	80062f2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d10a      	bne.n	80062ac <prvProcessTimerOrBlockTask+0x3c>
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	429a      	cmp	r2, r3
 800629c:	d806      	bhi.n	80062ac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800629e:	f7ff fa33 	bl	8005708 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80062a2:	68f9      	ldr	r1, [r7, #12]
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f7ff ff81 	bl	80061ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80062aa:	e024      	b.n	80062f6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d008      	beq.n	80062c4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80062b2:	4b13      	ldr	r3, [pc, #76]	@ (8006300 <prvProcessTimerOrBlockTask+0x90>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d101      	bne.n	80062c0 <prvProcessTimerOrBlockTask+0x50>
 80062bc:	2301      	movs	r3, #1
 80062be:	e000      	b.n	80062c2 <prvProcessTimerOrBlockTask+0x52>
 80062c0:	2300      	movs	r3, #0
 80062c2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80062c4:	4b0f      	ldr	r3, [pc, #60]	@ (8006304 <prvProcessTimerOrBlockTask+0x94>)
 80062c6:	6818      	ldr	r0, [r3, #0]
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	1ad3      	subs	r3, r2, r3
 80062ce:	683a      	ldr	r2, [r7, #0]
 80062d0:	4619      	mov	r1, r3
 80062d2:	f7fe ff93 	bl	80051fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80062d6:	f7ff fa17 	bl	8005708 <xTaskResumeAll>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d10a      	bne.n	80062f6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80062e0:	4b09      	ldr	r3, [pc, #36]	@ (8006308 <prvProcessTimerOrBlockTask+0x98>)
 80062e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062e6:	601a      	str	r2, [r3, #0]
 80062e8:	f3bf 8f4f 	dsb	sy
 80062ec:	f3bf 8f6f 	isb	sy
}
 80062f0:	e001      	b.n	80062f6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80062f2:	f7ff fa09 	bl	8005708 <xTaskResumeAll>
}
 80062f6:	bf00      	nop
 80062f8:	3710      	adds	r7, #16
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	20000dbc 	.word	0x20000dbc
 8006304:	20000dc0 	.word	0x20000dc0
 8006308:	e000ed04 	.word	0xe000ed04

0800630c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800630c:	b480      	push	{r7}
 800630e:	b085      	sub	sp, #20
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006314:	4b0e      	ldr	r3, [pc, #56]	@ (8006350 <prvGetNextExpireTime+0x44>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d101      	bne.n	8006322 <prvGetNextExpireTime+0x16>
 800631e:	2201      	movs	r2, #1
 8006320:	e000      	b.n	8006324 <prvGetNextExpireTime+0x18>
 8006322:	2200      	movs	r2, #0
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d105      	bne.n	800633c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006330:	4b07      	ldr	r3, [pc, #28]	@ (8006350 <prvGetNextExpireTime+0x44>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	60fb      	str	r3, [r7, #12]
 800633a:	e001      	b.n	8006340 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800633c:	2300      	movs	r3, #0
 800633e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006340:	68fb      	ldr	r3, [r7, #12]
}
 8006342:	4618      	mov	r0, r3
 8006344:	3714      	adds	r7, #20
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr
 800634e:	bf00      	nop
 8006350:	20000db8 	.word	0x20000db8

08006354 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800635c:	f7ff fa72 	bl	8005844 <xTaskGetTickCount>
 8006360:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006362:	4b0b      	ldr	r3, [pc, #44]	@ (8006390 <prvSampleTimeNow+0x3c>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68fa      	ldr	r2, [r7, #12]
 8006368:	429a      	cmp	r2, r3
 800636a:	d205      	bcs.n	8006378 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800636c:	f000 f93a 	bl	80065e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	601a      	str	r2, [r3, #0]
 8006376:	e002      	b.n	800637e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800637e:	4a04      	ldr	r2, [pc, #16]	@ (8006390 <prvSampleTimeNow+0x3c>)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006384:	68fb      	ldr	r3, [r7, #12]
}
 8006386:	4618      	mov	r0, r3
 8006388:	3710      	adds	r7, #16
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	20000dc8 	.word	0x20000dc8

08006394 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b086      	sub	sp, #24
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
 80063a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80063a2:	2300      	movs	r3, #0
 80063a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	68ba      	ldr	r2, [r7, #8]
 80063aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80063b2:	68ba      	ldr	r2, [r7, #8]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d812      	bhi.n	80063e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	1ad2      	subs	r2, r2, r3
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	699b      	ldr	r3, [r3, #24]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d302      	bcc.n	80063ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80063c8:	2301      	movs	r3, #1
 80063ca:	617b      	str	r3, [r7, #20]
 80063cc:	e01b      	b.n	8006406 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80063ce:	4b10      	ldr	r3, [pc, #64]	@ (8006410 <prvInsertTimerInActiveList+0x7c>)
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	3304      	adds	r3, #4
 80063d6:	4619      	mov	r1, r3
 80063d8:	4610      	mov	r0, r2
 80063da:	f7fe f9aa 	bl	8004732 <vListInsert>
 80063de:	e012      	b.n	8006406 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d206      	bcs.n	80063f6 <prvInsertTimerInActiveList+0x62>
 80063e8:	68ba      	ldr	r2, [r7, #8]
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d302      	bcc.n	80063f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80063f0:	2301      	movs	r3, #1
 80063f2:	617b      	str	r3, [r7, #20]
 80063f4:	e007      	b.n	8006406 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80063f6:	4b07      	ldr	r3, [pc, #28]	@ (8006414 <prvInsertTimerInActiveList+0x80>)
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	3304      	adds	r3, #4
 80063fe:	4619      	mov	r1, r3
 8006400:	4610      	mov	r0, r2
 8006402:	f7fe f996 	bl	8004732 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006406:	697b      	ldr	r3, [r7, #20]
}
 8006408:	4618      	mov	r0, r3
 800640a:	3718      	adds	r7, #24
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}
 8006410:	20000dbc 	.word	0x20000dbc
 8006414:	20000db8 	.word	0x20000db8

08006418 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b08e      	sub	sp, #56	@ 0x38
 800641c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800641e:	e0ce      	b.n	80065be <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2b00      	cmp	r3, #0
 8006424:	da19      	bge.n	800645a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006426:	1d3b      	adds	r3, r7, #4
 8006428:	3304      	adds	r3, #4
 800642a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800642c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800642e:	2b00      	cmp	r3, #0
 8006430:	d10b      	bne.n	800644a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006436:	f383 8811 	msr	BASEPRI, r3
 800643a:	f3bf 8f6f 	isb	sy
 800643e:	f3bf 8f4f 	dsb	sy
 8006442:	61fb      	str	r3, [r7, #28]
}
 8006444:	bf00      	nop
 8006446:	bf00      	nop
 8006448:	e7fd      	b.n	8006446 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800644a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006450:	6850      	ldr	r0, [r2, #4]
 8006452:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006454:	6892      	ldr	r2, [r2, #8]
 8006456:	4611      	mov	r1, r2
 8006458:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2b00      	cmp	r3, #0
 800645e:	f2c0 80ae 	blt.w	80065be <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006468:	695b      	ldr	r3, [r3, #20]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d004      	beq.n	8006478 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800646e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006470:	3304      	adds	r3, #4
 8006472:	4618      	mov	r0, r3
 8006474:	f7fe f996 	bl	80047a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006478:	463b      	mov	r3, r7
 800647a:	4618      	mov	r0, r3
 800647c:	f7ff ff6a 	bl	8006354 <prvSampleTimeNow>
 8006480:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2b09      	cmp	r3, #9
 8006486:	f200 8097 	bhi.w	80065b8 <prvProcessReceivedCommands+0x1a0>
 800648a:	a201      	add	r2, pc, #4	@ (adr r2, 8006490 <prvProcessReceivedCommands+0x78>)
 800648c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006490:	080064b9 	.word	0x080064b9
 8006494:	080064b9 	.word	0x080064b9
 8006498:	080064b9 	.word	0x080064b9
 800649c:	0800652f 	.word	0x0800652f
 80064a0:	08006543 	.word	0x08006543
 80064a4:	0800658f 	.word	0x0800658f
 80064a8:	080064b9 	.word	0x080064b9
 80064ac:	080064b9 	.word	0x080064b9
 80064b0:	0800652f 	.word	0x0800652f
 80064b4:	08006543 	.word	0x08006543
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80064b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80064be:	f043 0301 	orr.w	r3, r3, #1
 80064c2:	b2da      	uxtb	r2, r3
 80064c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80064ca:	68ba      	ldr	r2, [r7, #8]
 80064cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ce:	699b      	ldr	r3, [r3, #24]
 80064d0:	18d1      	adds	r1, r2, r3
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064d8:	f7ff ff5c 	bl	8006394 <prvInsertTimerInActiveList>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d06c      	beq.n	80065bc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064e4:	6a1b      	ldr	r3, [r3, #32]
 80064e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064e8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80064ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80064f0:	f003 0304 	and.w	r3, r3, #4
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d061      	beq.n	80065bc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80064f8:	68ba      	ldr	r2, [r7, #8]
 80064fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064fc:	699b      	ldr	r3, [r3, #24]
 80064fe:	441a      	add	r2, r3
 8006500:	2300      	movs	r3, #0
 8006502:	9300      	str	r3, [sp, #0]
 8006504:	2300      	movs	r3, #0
 8006506:	2100      	movs	r1, #0
 8006508:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800650a:	f7ff fe01 	bl	8006110 <xTimerGenericCommand>
 800650e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006510:	6a3b      	ldr	r3, [r7, #32]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d152      	bne.n	80065bc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800651a:	f383 8811 	msr	BASEPRI, r3
 800651e:	f3bf 8f6f 	isb	sy
 8006522:	f3bf 8f4f 	dsb	sy
 8006526:	61bb      	str	r3, [r7, #24]
}
 8006528:	bf00      	nop
 800652a:	bf00      	nop
 800652c:	e7fd      	b.n	800652a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800652e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006530:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006534:	f023 0301 	bic.w	r3, r3, #1
 8006538:	b2da      	uxtb	r2, r3
 800653a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800653c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006540:	e03d      	b.n	80065be <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006544:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006548:	f043 0301 	orr.w	r3, r3, #1
 800654c:	b2da      	uxtb	r2, r3
 800654e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006550:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006554:	68ba      	ldr	r2, [r7, #8]
 8006556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006558:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800655a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d10b      	bne.n	800657a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006566:	f383 8811 	msr	BASEPRI, r3
 800656a:	f3bf 8f6f 	isb	sy
 800656e:	f3bf 8f4f 	dsb	sy
 8006572:	617b      	str	r3, [r7, #20]
}
 8006574:	bf00      	nop
 8006576:	bf00      	nop
 8006578:	e7fd      	b.n	8006576 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800657a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800657c:	699a      	ldr	r2, [r3, #24]
 800657e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006580:	18d1      	adds	r1, r2, r3
 8006582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006584:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006586:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006588:	f7ff ff04 	bl	8006394 <prvInsertTimerInActiveList>
					break;
 800658c:	e017      	b.n	80065be <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800658e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006590:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006594:	f003 0302 	and.w	r3, r3, #2
 8006598:	2b00      	cmp	r3, #0
 800659a:	d103      	bne.n	80065a4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800659c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800659e:	f000 fbeb 	bl	8006d78 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80065a2:	e00c      	b.n	80065be <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80065a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80065aa:	f023 0301 	bic.w	r3, r3, #1
 80065ae:	b2da      	uxtb	r2, r3
 80065b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80065b6:	e002      	b.n	80065be <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80065b8:	bf00      	nop
 80065ba:	e000      	b.n	80065be <prvProcessReceivedCommands+0x1a6>
					break;
 80065bc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80065be:	4b08      	ldr	r3, [pc, #32]	@ (80065e0 <prvProcessReceivedCommands+0x1c8>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	1d39      	adds	r1, r7, #4
 80065c4:	2200      	movs	r2, #0
 80065c6:	4618      	mov	r0, r3
 80065c8:	f7fe fbfc 	bl	8004dc4 <xQueueReceive>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	f47f af26 	bne.w	8006420 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80065d4:	bf00      	nop
 80065d6:	bf00      	nop
 80065d8:	3730      	adds	r7, #48	@ 0x30
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	20000dc0 	.word	0x20000dc0

080065e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b088      	sub	sp, #32
 80065e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80065ea:	e049      	b.n	8006680 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80065ec:	4b2e      	ldr	r3, [pc, #184]	@ (80066a8 <prvSwitchTimerLists+0xc4>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065f6:	4b2c      	ldr	r3, [pc, #176]	@ (80066a8 <prvSwitchTimerLists+0xc4>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	68db      	ldr	r3, [r3, #12]
 80065fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	3304      	adds	r3, #4
 8006604:	4618      	mov	r0, r3
 8006606:	f7fe f8cd 	bl	80047a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	6a1b      	ldr	r3, [r3, #32]
 800660e:	68f8      	ldr	r0, [r7, #12]
 8006610:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006618:	f003 0304 	and.w	r3, r3, #4
 800661c:	2b00      	cmp	r3, #0
 800661e:	d02f      	beq.n	8006680 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	693a      	ldr	r2, [r7, #16]
 8006626:	4413      	add	r3, r2
 8006628:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800662a:	68ba      	ldr	r2, [r7, #8]
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	429a      	cmp	r2, r3
 8006630:	d90e      	bls.n	8006650 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	68ba      	ldr	r2, [r7, #8]
 8006636:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	68fa      	ldr	r2, [r7, #12]
 800663c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800663e:	4b1a      	ldr	r3, [pc, #104]	@ (80066a8 <prvSwitchTimerLists+0xc4>)
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	3304      	adds	r3, #4
 8006646:	4619      	mov	r1, r3
 8006648:	4610      	mov	r0, r2
 800664a:	f7fe f872 	bl	8004732 <vListInsert>
 800664e:	e017      	b.n	8006680 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006650:	2300      	movs	r3, #0
 8006652:	9300      	str	r3, [sp, #0]
 8006654:	2300      	movs	r3, #0
 8006656:	693a      	ldr	r2, [r7, #16]
 8006658:	2100      	movs	r1, #0
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	f7ff fd58 	bl	8006110 <xTimerGenericCommand>
 8006660:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d10b      	bne.n	8006680 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800666c:	f383 8811 	msr	BASEPRI, r3
 8006670:	f3bf 8f6f 	isb	sy
 8006674:	f3bf 8f4f 	dsb	sy
 8006678:	603b      	str	r3, [r7, #0]
}
 800667a:	bf00      	nop
 800667c:	bf00      	nop
 800667e:	e7fd      	b.n	800667c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006680:	4b09      	ldr	r3, [pc, #36]	@ (80066a8 <prvSwitchTimerLists+0xc4>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d1b0      	bne.n	80065ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800668a:	4b07      	ldr	r3, [pc, #28]	@ (80066a8 <prvSwitchTimerLists+0xc4>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006690:	4b06      	ldr	r3, [pc, #24]	@ (80066ac <prvSwitchTimerLists+0xc8>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a04      	ldr	r2, [pc, #16]	@ (80066a8 <prvSwitchTimerLists+0xc4>)
 8006696:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006698:	4a04      	ldr	r2, [pc, #16]	@ (80066ac <prvSwitchTimerLists+0xc8>)
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	6013      	str	r3, [r2, #0]
}
 800669e:	bf00      	nop
 80066a0:	3718      	adds	r7, #24
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	20000db8 	.word	0x20000db8
 80066ac:	20000dbc 	.word	0x20000dbc

080066b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80066b6:	f000 f96f 	bl	8006998 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80066ba:	4b15      	ldr	r3, [pc, #84]	@ (8006710 <prvCheckForValidListAndQueue+0x60>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d120      	bne.n	8006704 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80066c2:	4814      	ldr	r0, [pc, #80]	@ (8006714 <prvCheckForValidListAndQueue+0x64>)
 80066c4:	f7fd ffe4 	bl	8004690 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80066c8:	4813      	ldr	r0, [pc, #76]	@ (8006718 <prvCheckForValidListAndQueue+0x68>)
 80066ca:	f7fd ffe1 	bl	8004690 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80066ce:	4b13      	ldr	r3, [pc, #76]	@ (800671c <prvCheckForValidListAndQueue+0x6c>)
 80066d0:	4a10      	ldr	r2, [pc, #64]	@ (8006714 <prvCheckForValidListAndQueue+0x64>)
 80066d2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80066d4:	4b12      	ldr	r3, [pc, #72]	@ (8006720 <prvCheckForValidListAndQueue+0x70>)
 80066d6:	4a10      	ldr	r2, [pc, #64]	@ (8006718 <prvCheckForValidListAndQueue+0x68>)
 80066d8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80066da:	2300      	movs	r3, #0
 80066dc:	9300      	str	r3, [sp, #0]
 80066de:	4b11      	ldr	r3, [pc, #68]	@ (8006724 <prvCheckForValidListAndQueue+0x74>)
 80066e0:	4a11      	ldr	r2, [pc, #68]	@ (8006728 <prvCheckForValidListAndQueue+0x78>)
 80066e2:	2110      	movs	r1, #16
 80066e4:	200a      	movs	r0, #10
 80066e6:	f7fe f8f1 	bl	80048cc <xQueueGenericCreateStatic>
 80066ea:	4603      	mov	r3, r0
 80066ec:	4a08      	ldr	r2, [pc, #32]	@ (8006710 <prvCheckForValidListAndQueue+0x60>)
 80066ee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80066f0:	4b07      	ldr	r3, [pc, #28]	@ (8006710 <prvCheckForValidListAndQueue+0x60>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d005      	beq.n	8006704 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80066f8:	4b05      	ldr	r3, [pc, #20]	@ (8006710 <prvCheckForValidListAndQueue+0x60>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	490b      	ldr	r1, [pc, #44]	@ (800672c <prvCheckForValidListAndQueue+0x7c>)
 80066fe:	4618      	mov	r0, r3
 8006700:	f7fe fd52 	bl	80051a8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006704:	f000 f97a 	bl	80069fc <vPortExitCritical>
}
 8006708:	bf00      	nop
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	20000dc0 	.word	0x20000dc0
 8006714:	20000d90 	.word	0x20000d90
 8006718:	20000da4 	.word	0x20000da4
 800671c:	20000db8 	.word	0x20000db8
 8006720:	20000dbc 	.word	0x20000dbc
 8006724:	20000e6c 	.word	0x20000e6c
 8006728:	20000dcc 	.word	0x20000dcc
 800672c:	08007090 	.word	0x08007090

08006730 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006730:	b480      	push	{r7}
 8006732:	b085      	sub	sp, #20
 8006734:	af00      	add	r7, sp, #0
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	3b04      	subs	r3, #4
 8006740:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006748:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	3b04      	subs	r3, #4
 800674e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	f023 0201 	bic.w	r2, r3, #1
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	3b04      	subs	r3, #4
 800675e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006760:	4a0c      	ldr	r2, [pc, #48]	@ (8006794 <pxPortInitialiseStack+0x64>)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	3b14      	subs	r3, #20
 800676a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	3b04      	subs	r3, #4
 8006776:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f06f 0202 	mvn.w	r2, #2
 800677e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	3b20      	subs	r3, #32
 8006784:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006786:	68fb      	ldr	r3, [r7, #12]
}
 8006788:	4618      	mov	r0, r3
 800678a:	3714      	adds	r7, #20
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr
 8006794:	08006799 	.word	0x08006799

08006798 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006798:	b480      	push	{r7}
 800679a:	b085      	sub	sp, #20
 800679c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800679e:	2300      	movs	r3, #0
 80067a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80067a2:	4b13      	ldr	r3, [pc, #76]	@ (80067f0 <prvTaskExitError+0x58>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067aa:	d00b      	beq.n	80067c4 <prvTaskExitError+0x2c>
	__asm volatile
 80067ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067b0:	f383 8811 	msr	BASEPRI, r3
 80067b4:	f3bf 8f6f 	isb	sy
 80067b8:	f3bf 8f4f 	dsb	sy
 80067bc:	60fb      	str	r3, [r7, #12]
}
 80067be:	bf00      	nop
 80067c0:	bf00      	nop
 80067c2:	e7fd      	b.n	80067c0 <prvTaskExitError+0x28>
	__asm volatile
 80067c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067c8:	f383 8811 	msr	BASEPRI, r3
 80067cc:	f3bf 8f6f 	isb	sy
 80067d0:	f3bf 8f4f 	dsb	sy
 80067d4:	60bb      	str	r3, [r7, #8]
}
 80067d6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80067d8:	bf00      	nop
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d0fc      	beq.n	80067da <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80067e0:	bf00      	nop
 80067e2:	bf00      	nop
 80067e4:	3714      	adds	r7, #20
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr
 80067ee:	bf00      	nop
 80067f0:	20000014 	.word	0x20000014
	...

08006800 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006800:	4b07      	ldr	r3, [pc, #28]	@ (8006820 <pxCurrentTCBConst2>)
 8006802:	6819      	ldr	r1, [r3, #0]
 8006804:	6808      	ldr	r0, [r1, #0]
 8006806:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800680a:	f380 8809 	msr	PSP, r0
 800680e:	f3bf 8f6f 	isb	sy
 8006812:	f04f 0000 	mov.w	r0, #0
 8006816:	f380 8811 	msr	BASEPRI, r0
 800681a:	4770      	bx	lr
 800681c:	f3af 8000 	nop.w

08006820 <pxCurrentTCBConst2>:
 8006820:	20000890 	.word	0x20000890
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006824:	bf00      	nop
 8006826:	bf00      	nop

08006828 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006828:	4808      	ldr	r0, [pc, #32]	@ (800684c <prvPortStartFirstTask+0x24>)
 800682a:	6800      	ldr	r0, [r0, #0]
 800682c:	6800      	ldr	r0, [r0, #0]
 800682e:	f380 8808 	msr	MSP, r0
 8006832:	f04f 0000 	mov.w	r0, #0
 8006836:	f380 8814 	msr	CONTROL, r0
 800683a:	b662      	cpsie	i
 800683c:	b661      	cpsie	f
 800683e:	f3bf 8f4f 	dsb	sy
 8006842:	f3bf 8f6f 	isb	sy
 8006846:	df00      	svc	0
 8006848:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800684a:	bf00      	nop
 800684c:	e000ed08 	.word	0xe000ed08

08006850 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b086      	sub	sp, #24
 8006854:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006856:	4b47      	ldr	r3, [pc, #284]	@ (8006974 <xPortStartScheduler+0x124>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a47      	ldr	r2, [pc, #284]	@ (8006978 <xPortStartScheduler+0x128>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d10b      	bne.n	8006878 <xPortStartScheduler+0x28>
	__asm volatile
 8006860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006864:	f383 8811 	msr	BASEPRI, r3
 8006868:	f3bf 8f6f 	isb	sy
 800686c:	f3bf 8f4f 	dsb	sy
 8006870:	613b      	str	r3, [r7, #16]
}
 8006872:	bf00      	nop
 8006874:	bf00      	nop
 8006876:	e7fd      	b.n	8006874 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006878:	4b3e      	ldr	r3, [pc, #248]	@ (8006974 <xPortStartScheduler+0x124>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a3f      	ldr	r2, [pc, #252]	@ (800697c <xPortStartScheduler+0x12c>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d10b      	bne.n	800689a <xPortStartScheduler+0x4a>
	__asm volatile
 8006882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006886:	f383 8811 	msr	BASEPRI, r3
 800688a:	f3bf 8f6f 	isb	sy
 800688e:	f3bf 8f4f 	dsb	sy
 8006892:	60fb      	str	r3, [r7, #12]
}
 8006894:	bf00      	nop
 8006896:	bf00      	nop
 8006898:	e7fd      	b.n	8006896 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800689a:	4b39      	ldr	r3, [pc, #228]	@ (8006980 <xPortStartScheduler+0x130>)
 800689c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	22ff      	movs	r2, #255	@ 0xff
 80068aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80068b4:	78fb      	ldrb	r3, [r7, #3]
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80068bc:	b2da      	uxtb	r2, r3
 80068be:	4b31      	ldr	r3, [pc, #196]	@ (8006984 <xPortStartScheduler+0x134>)
 80068c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80068c2:	4b31      	ldr	r3, [pc, #196]	@ (8006988 <xPortStartScheduler+0x138>)
 80068c4:	2207      	movs	r2, #7
 80068c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068c8:	e009      	b.n	80068de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80068ca:	4b2f      	ldr	r3, [pc, #188]	@ (8006988 <xPortStartScheduler+0x138>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	3b01      	subs	r3, #1
 80068d0:	4a2d      	ldr	r2, [pc, #180]	@ (8006988 <xPortStartScheduler+0x138>)
 80068d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80068d4:	78fb      	ldrb	r3, [r7, #3]
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	005b      	lsls	r3, r3, #1
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068de:	78fb      	ldrb	r3, [r7, #3]
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068e6:	2b80      	cmp	r3, #128	@ 0x80
 80068e8:	d0ef      	beq.n	80068ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80068ea:	4b27      	ldr	r3, [pc, #156]	@ (8006988 <xPortStartScheduler+0x138>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f1c3 0307 	rsb	r3, r3, #7
 80068f2:	2b04      	cmp	r3, #4
 80068f4:	d00b      	beq.n	800690e <xPortStartScheduler+0xbe>
	__asm volatile
 80068f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068fa:	f383 8811 	msr	BASEPRI, r3
 80068fe:	f3bf 8f6f 	isb	sy
 8006902:	f3bf 8f4f 	dsb	sy
 8006906:	60bb      	str	r3, [r7, #8]
}
 8006908:	bf00      	nop
 800690a:	bf00      	nop
 800690c:	e7fd      	b.n	800690a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800690e:	4b1e      	ldr	r3, [pc, #120]	@ (8006988 <xPortStartScheduler+0x138>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	021b      	lsls	r3, r3, #8
 8006914:	4a1c      	ldr	r2, [pc, #112]	@ (8006988 <xPortStartScheduler+0x138>)
 8006916:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006918:	4b1b      	ldr	r3, [pc, #108]	@ (8006988 <xPortStartScheduler+0x138>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006920:	4a19      	ldr	r2, [pc, #100]	@ (8006988 <xPortStartScheduler+0x138>)
 8006922:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	b2da      	uxtb	r2, r3
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800692c:	4b17      	ldr	r3, [pc, #92]	@ (800698c <xPortStartScheduler+0x13c>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a16      	ldr	r2, [pc, #88]	@ (800698c <xPortStartScheduler+0x13c>)
 8006932:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006936:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006938:	4b14      	ldr	r3, [pc, #80]	@ (800698c <xPortStartScheduler+0x13c>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a13      	ldr	r2, [pc, #76]	@ (800698c <xPortStartScheduler+0x13c>)
 800693e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006942:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006944:	f000 f8da 	bl	8006afc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006948:	4b11      	ldr	r3, [pc, #68]	@ (8006990 <xPortStartScheduler+0x140>)
 800694a:	2200      	movs	r2, #0
 800694c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800694e:	f000 f8f9 	bl	8006b44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006952:	4b10      	ldr	r3, [pc, #64]	@ (8006994 <xPortStartScheduler+0x144>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a0f      	ldr	r2, [pc, #60]	@ (8006994 <xPortStartScheduler+0x144>)
 8006958:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800695c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800695e:	f7ff ff63 	bl	8006828 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006962:	f7ff f839 	bl	80059d8 <vTaskSwitchContext>
	prvTaskExitError();
 8006966:	f7ff ff17 	bl	8006798 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	3718      	adds	r7, #24
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}
 8006974:	e000ed00 	.word	0xe000ed00
 8006978:	410fc271 	.word	0x410fc271
 800697c:	410fc270 	.word	0x410fc270
 8006980:	e000e400 	.word	0xe000e400
 8006984:	20000ebc 	.word	0x20000ebc
 8006988:	20000ec0 	.word	0x20000ec0
 800698c:	e000ed20 	.word	0xe000ed20
 8006990:	20000014 	.word	0x20000014
 8006994:	e000ef34 	.word	0xe000ef34

08006998 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
	__asm volatile
 800699e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069a2:	f383 8811 	msr	BASEPRI, r3
 80069a6:	f3bf 8f6f 	isb	sy
 80069aa:	f3bf 8f4f 	dsb	sy
 80069ae:	607b      	str	r3, [r7, #4]
}
 80069b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80069b2:	4b10      	ldr	r3, [pc, #64]	@ (80069f4 <vPortEnterCritical+0x5c>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	3301      	adds	r3, #1
 80069b8:	4a0e      	ldr	r2, [pc, #56]	@ (80069f4 <vPortEnterCritical+0x5c>)
 80069ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80069bc:	4b0d      	ldr	r3, [pc, #52]	@ (80069f4 <vPortEnterCritical+0x5c>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d110      	bne.n	80069e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80069c4:	4b0c      	ldr	r3, [pc, #48]	@ (80069f8 <vPortEnterCritical+0x60>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d00b      	beq.n	80069e6 <vPortEnterCritical+0x4e>
	__asm volatile
 80069ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d2:	f383 8811 	msr	BASEPRI, r3
 80069d6:	f3bf 8f6f 	isb	sy
 80069da:	f3bf 8f4f 	dsb	sy
 80069de:	603b      	str	r3, [r7, #0]
}
 80069e0:	bf00      	nop
 80069e2:	bf00      	nop
 80069e4:	e7fd      	b.n	80069e2 <vPortEnterCritical+0x4a>
	}
}
 80069e6:	bf00      	nop
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	20000014 	.word	0x20000014
 80069f8:	e000ed04 	.word	0xe000ed04

080069fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006a02:	4b12      	ldr	r3, [pc, #72]	@ (8006a4c <vPortExitCritical+0x50>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d10b      	bne.n	8006a22 <vPortExitCritical+0x26>
	__asm volatile
 8006a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a0e:	f383 8811 	msr	BASEPRI, r3
 8006a12:	f3bf 8f6f 	isb	sy
 8006a16:	f3bf 8f4f 	dsb	sy
 8006a1a:	607b      	str	r3, [r7, #4]
}
 8006a1c:	bf00      	nop
 8006a1e:	bf00      	nop
 8006a20:	e7fd      	b.n	8006a1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006a22:	4b0a      	ldr	r3, [pc, #40]	@ (8006a4c <vPortExitCritical+0x50>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	3b01      	subs	r3, #1
 8006a28:	4a08      	ldr	r2, [pc, #32]	@ (8006a4c <vPortExitCritical+0x50>)
 8006a2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006a2c:	4b07      	ldr	r3, [pc, #28]	@ (8006a4c <vPortExitCritical+0x50>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d105      	bne.n	8006a40 <vPortExitCritical+0x44>
 8006a34:	2300      	movs	r3, #0
 8006a36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	f383 8811 	msr	BASEPRI, r3
}
 8006a3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006a40:	bf00      	nop
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr
 8006a4c:	20000014 	.word	0x20000014

08006a50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006a50:	f3ef 8009 	mrs	r0, PSP
 8006a54:	f3bf 8f6f 	isb	sy
 8006a58:	4b15      	ldr	r3, [pc, #84]	@ (8006ab0 <pxCurrentTCBConst>)
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	f01e 0f10 	tst.w	lr, #16
 8006a60:	bf08      	it	eq
 8006a62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006a66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a6a:	6010      	str	r0, [r2, #0]
 8006a6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006a70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006a74:	f380 8811 	msr	BASEPRI, r0
 8006a78:	f3bf 8f4f 	dsb	sy
 8006a7c:	f3bf 8f6f 	isb	sy
 8006a80:	f7fe ffaa 	bl	80059d8 <vTaskSwitchContext>
 8006a84:	f04f 0000 	mov.w	r0, #0
 8006a88:	f380 8811 	msr	BASEPRI, r0
 8006a8c:	bc09      	pop	{r0, r3}
 8006a8e:	6819      	ldr	r1, [r3, #0]
 8006a90:	6808      	ldr	r0, [r1, #0]
 8006a92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a96:	f01e 0f10 	tst.w	lr, #16
 8006a9a:	bf08      	it	eq
 8006a9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006aa0:	f380 8809 	msr	PSP, r0
 8006aa4:	f3bf 8f6f 	isb	sy
 8006aa8:	4770      	bx	lr
 8006aaa:	bf00      	nop
 8006aac:	f3af 8000 	nop.w

08006ab0 <pxCurrentTCBConst>:
 8006ab0:	20000890 	.word	0x20000890
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ab4:	bf00      	nop
 8006ab6:	bf00      	nop

08006ab8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
	__asm volatile
 8006abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ac2:	f383 8811 	msr	BASEPRI, r3
 8006ac6:	f3bf 8f6f 	isb	sy
 8006aca:	f3bf 8f4f 	dsb	sy
 8006ace:	607b      	str	r3, [r7, #4]
}
 8006ad0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ad2:	f7fe fec7 	bl	8005864 <xTaskIncrementTick>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d003      	beq.n	8006ae4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006adc:	4b06      	ldr	r3, [pc, #24]	@ (8006af8 <xPortSysTickHandler+0x40>)
 8006ade:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ae2:	601a      	str	r2, [r3, #0]
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	f383 8811 	msr	BASEPRI, r3
}
 8006aee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006af0:	bf00      	nop
 8006af2:	3708      	adds	r7, #8
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	e000ed04 	.word	0xe000ed04

08006afc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006afc:	b480      	push	{r7}
 8006afe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006b00:	4b0b      	ldr	r3, [pc, #44]	@ (8006b30 <vPortSetupTimerInterrupt+0x34>)
 8006b02:	2200      	movs	r2, #0
 8006b04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006b06:	4b0b      	ldr	r3, [pc, #44]	@ (8006b34 <vPortSetupTimerInterrupt+0x38>)
 8006b08:	2200      	movs	r2, #0
 8006b0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8006b38 <vPortSetupTimerInterrupt+0x3c>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a0a      	ldr	r2, [pc, #40]	@ (8006b3c <vPortSetupTimerInterrupt+0x40>)
 8006b12:	fba2 2303 	umull	r2, r3, r2, r3
 8006b16:	099b      	lsrs	r3, r3, #6
 8006b18:	4a09      	ldr	r2, [pc, #36]	@ (8006b40 <vPortSetupTimerInterrupt+0x44>)
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006b1e:	4b04      	ldr	r3, [pc, #16]	@ (8006b30 <vPortSetupTimerInterrupt+0x34>)
 8006b20:	2207      	movs	r2, #7
 8006b22:	601a      	str	r2, [r3, #0]
}
 8006b24:	bf00      	nop
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr
 8006b2e:	bf00      	nop
 8006b30:	e000e010 	.word	0xe000e010
 8006b34:	e000e018 	.word	0xe000e018
 8006b38:	20000008 	.word	0x20000008
 8006b3c:	10624dd3 	.word	0x10624dd3
 8006b40:	e000e014 	.word	0xe000e014

08006b44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006b44:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006b54 <vPortEnableVFP+0x10>
 8006b48:	6801      	ldr	r1, [r0, #0]
 8006b4a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006b4e:	6001      	str	r1, [r0, #0]
 8006b50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006b52:	bf00      	nop
 8006b54:	e000ed88 	.word	0xe000ed88

08006b58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006b58:	b480      	push	{r7}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006b5e:	f3ef 8305 	mrs	r3, IPSR
 8006b62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2b0f      	cmp	r3, #15
 8006b68:	d915      	bls.n	8006b96 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006b6a:	4a18      	ldr	r2, [pc, #96]	@ (8006bcc <vPortValidateInterruptPriority+0x74>)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	4413      	add	r3, r2
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006b74:	4b16      	ldr	r3, [pc, #88]	@ (8006bd0 <vPortValidateInterruptPriority+0x78>)
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	7afa      	ldrb	r2, [r7, #11]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d20b      	bcs.n	8006b96 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b82:	f383 8811 	msr	BASEPRI, r3
 8006b86:	f3bf 8f6f 	isb	sy
 8006b8a:	f3bf 8f4f 	dsb	sy
 8006b8e:	607b      	str	r3, [r7, #4]
}
 8006b90:	bf00      	nop
 8006b92:	bf00      	nop
 8006b94:	e7fd      	b.n	8006b92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006b96:	4b0f      	ldr	r3, [pc, #60]	@ (8006bd4 <vPortValidateInterruptPriority+0x7c>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8006bd8 <vPortValidateInterruptPriority+0x80>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d90b      	bls.n	8006bbe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006baa:	f383 8811 	msr	BASEPRI, r3
 8006bae:	f3bf 8f6f 	isb	sy
 8006bb2:	f3bf 8f4f 	dsb	sy
 8006bb6:	603b      	str	r3, [r7, #0]
}
 8006bb8:	bf00      	nop
 8006bba:	bf00      	nop
 8006bbc:	e7fd      	b.n	8006bba <vPortValidateInterruptPriority+0x62>
	}
 8006bbe:	bf00      	nop
 8006bc0:	3714      	adds	r7, #20
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	e000e3f0 	.word	0xe000e3f0
 8006bd0:	20000ebc 	.word	0x20000ebc
 8006bd4:	e000ed0c 	.word	0xe000ed0c
 8006bd8:	20000ec0 	.word	0x20000ec0

08006bdc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b08a      	sub	sp, #40	@ 0x28
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006be4:	2300      	movs	r3, #0
 8006be6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006be8:	f7fe fd80 	bl	80056ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006bec:	4b5c      	ldr	r3, [pc, #368]	@ (8006d60 <pvPortMalloc+0x184>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d101      	bne.n	8006bf8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006bf4:	f000 f924 	bl	8006e40 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006bf8:	4b5a      	ldr	r3, [pc, #360]	@ (8006d64 <pvPortMalloc+0x188>)
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	4013      	ands	r3, r2
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	f040 8095 	bne.w	8006d30 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d01e      	beq.n	8006c4a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006c0c:	2208      	movs	r2, #8
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4413      	add	r3, r2
 8006c12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f003 0307 	and.w	r3, r3, #7
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d015      	beq.n	8006c4a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f023 0307 	bic.w	r3, r3, #7
 8006c24:	3308      	adds	r3, #8
 8006c26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f003 0307 	and.w	r3, r3, #7
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d00b      	beq.n	8006c4a <pvPortMalloc+0x6e>
	__asm volatile
 8006c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c36:	f383 8811 	msr	BASEPRI, r3
 8006c3a:	f3bf 8f6f 	isb	sy
 8006c3e:	f3bf 8f4f 	dsb	sy
 8006c42:	617b      	str	r3, [r7, #20]
}
 8006c44:	bf00      	nop
 8006c46:	bf00      	nop
 8006c48:	e7fd      	b.n	8006c46 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d06f      	beq.n	8006d30 <pvPortMalloc+0x154>
 8006c50:	4b45      	ldr	r3, [pc, #276]	@ (8006d68 <pvPortMalloc+0x18c>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d86a      	bhi.n	8006d30 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006c5a:	4b44      	ldr	r3, [pc, #272]	@ (8006d6c <pvPortMalloc+0x190>)
 8006c5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006c5e:	4b43      	ldr	r3, [pc, #268]	@ (8006d6c <pvPortMalloc+0x190>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c64:	e004      	b.n	8006c70 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d903      	bls.n	8006c82 <pvPortMalloc+0xa6>
 8006c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d1f1      	bne.n	8006c66 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006c82:	4b37      	ldr	r3, [pc, #220]	@ (8006d60 <pvPortMalloc+0x184>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d051      	beq.n	8006d30 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006c8c:	6a3b      	ldr	r3, [r7, #32]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2208      	movs	r2, #8
 8006c92:	4413      	add	r3, r2
 8006c94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	6a3b      	ldr	r3, [r7, #32]
 8006c9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca0:	685a      	ldr	r2, [r3, #4]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	1ad2      	subs	r2, r2, r3
 8006ca6:	2308      	movs	r3, #8
 8006ca8:	005b      	lsls	r3, r3, #1
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d920      	bls.n	8006cf0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006cae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	f003 0307 	and.w	r3, r3, #7
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d00b      	beq.n	8006cd8 <pvPortMalloc+0xfc>
	__asm volatile
 8006cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cc4:	f383 8811 	msr	BASEPRI, r3
 8006cc8:	f3bf 8f6f 	isb	sy
 8006ccc:	f3bf 8f4f 	dsb	sy
 8006cd0:	613b      	str	r3, [r7, #16]
}
 8006cd2:	bf00      	nop
 8006cd4:	bf00      	nop
 8006cd6:	e7fd      	b.n	8006cd4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cda:	685a      	ldr	r2, [r3, #4]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	1ad2      	subs	r2, r2, r3
 8006ce0:	69bb      	ldr	r3, [r7, #24]
 8006ce2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006cea:	69b8      	ldr	r0, [r7, #24]
 8006cec:	f000 f90a 	bl	8006f04 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006cf0:	4b1d      	ldr	r3, [pc, #116]	@ (8006d68 <pvPortMalloc+0x18c>)
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	4a1b      	ldr	r2, [pc, #108]	@ (8006d68 <pvPortMalloc+0x18c>)
 8006cfc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006cfe:	4b1a      	ldr	r3, [pc, #104]	@ (8006d68 <pvPortMalloc+0x18c>)
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	4b1b      	ldr	r3, [pc, #108]	@ (8006d70 <pvPortMalloc+0x194>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d203      	bcs.n	8006d12 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006d0a:	4b17      	ldr	r3, [pc, #92]	@ (8006d68 <pvPortMalloc+0x18c>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a18      	ldr	r2, [pc, #96]	@ (8006d70 <pvPortMalloc+0x194>)
 8006d10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d14:	685a      	ldr	r2, [r3, #4]
 8006d16:	4b13      	ldr	r3, [pc, #76]	@ (8006d64 <pvPortMalloc+0x188>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	431a      	orrs	r2, r3
 8006d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d22:	2200      	movs	r2, #0
 8006d24:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006d26:	4b13      	ldr	r3, [pc, #76]	@ (8006d74 <pvPortMalloc+0x198>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	4a11      	ldr	r2, [pc, #68]	@ (8006d74 <pvPortMalloc+0x198>)
 8006d2e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006d30:	f7fe fcea 	bl	8005708 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	f003 0307 	and.w	r3, r3, #7
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d00b      	beq.n	8006d56 <pvPortMalloc+0x17a>
	__asm volatile
 8006d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d42:	f383 8811 	msr	BASEPRI, r3
 8006d46:	f3bf 8f6f 	isb	sy
 8006d4a:	f3bf 8f4f 	dsb	sy
 8006d4e:	60fb      	str	r3, [r7, #12]
}
 8006d50:	bf00      	nop
 8006d52:	bf00      	nop
 8006d54:	e7fd      	b.n	8006d52 <pvPortMalloc+0x176>
	return pvReturn;
 8006d56:	69fb      	ldr	r3, [r7, #28]
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3728      	adds	r7, #40	@ 0x28
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	20004acc 	.word	0x20004acc
 8006d64:	20004ae0 	.word	0x20004ae0
 8006d68:	20004ad0 	.word	0x20004ad0
 8006d6c:	20004ac4 	.word	0x20004ac4
 8006d70:	20004ad4 	.word	0x20004ad4
 8006d74:	20004ad8 	.word	0x20004ad8

08006d78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b086      	sub	sp, #24
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d04f      	beq.n	8006e2a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006d8a:	2308      	movs	r3, #8
 8006d8c:	425b      	negs	r3, r3
 8006d8e:	697a      	ldr	r2, [r7, #20]
 8006d90:	4413      	add	r3, r2
 8006d92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	685a      	ldr	r2, [r3, #4]
 8006d9c:	4b25      	ldr	r3, [pc, #148]	@ (8006e34 <vPortFree+0xbc>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4013      	ands	r3, r2
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d10b      	bne.n	8006dbe <vPortFree+0x46>
	__asm volatile
 8006da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006daa:	f383 8811 	msr	BASEPRI, r3
 8006dae:	f3bf 8f6f 	isb	sy
 8006db2:	f3bf 8f4f 	dsb	sy
 8006db6:	60fb      	str	r3, [r7, #12]
}
 8006db8:	bf00      	nop
 8006dba:	bf00      	nop
 8006dbc:	e7fd      	b.n	8006dba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d00b      	beq.n	8006dde <vPortFree+0x66>
	__asm volatile
 8006dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dca:	f383 8811 	msr	BASEPRI, r3
 8006dce:	f3bf 8f6f 	isb	sy
 8006dd2:	f3bf 8f4f 	dsb	sy
 8006dd6:	60bb      	str	r3, [r7, #8]
}
 8006dd8:	bf00      	nop
 8006dda:	bf00      	nop
 8006ddc:	e7fd      	b.n	8006dda <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	685a      	ldr	r2, [r3, #4]
 8006de2:	4b14      	ldr	r3, [pc, #80]	@ (8006e34 <vPortFree+0xbc>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4013      	ands	r3, r2
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d01e      	beq.n	8006e2a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d11a      	bne.n	8006e2a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	685a      	ldr	r2, [r3, #4]
 8006df8:	4b0e      	ldr	r3, [pc, #56]	@ (8006e34 <vPortFree+0xbc>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	43db      	mvns	r3, r3
 8006dfe:	401a      	ands	r2, r3
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006e04:	f7fe fc72 	bl	80056ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	685a      	ldr	r2, [r3, #4]
 8006e0c:	4b0a      	ldr	r3, [pc, #40]	@ (8006e38 <vPortFree+0xc0>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4413      	add	r3, r2
 8006e12:	4a09      	ldr	r2, [pc, #36]	@ (8006e38 <vPortFree+0xc0>)
 8006e14:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006e16:	6938      	ldr	r0, [r7, #16]
 8006e18:	f000 f874 	bl	8006f04 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006e1c:	4b07      	ldr	r3, [pc, #28]	@ (8006e3c <vPortFree+0xc4>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	3301      	adds	r3, #1
 8006e22:	4a06      	ldr	r2, [pc, #24]	@ (8006e3c <vPortFree+0xc4>)
 8006e24:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006e26:	f7fe fc6f 	bl	8005708 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006e2a:	bf00      	nop
 8006e2c:	3718      	adds	r7, #24
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	20004ae0 	.word	0x20004ae0
 8006e38:	20004ad0 	.word	0x20004ad0
 8006e3c:	20004adc 	.word	0x20004adc

08006e40 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006e40:	b480      	push	{r7}
 8006e42:	b085      	sub	sp, #20
 8006e44:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006e46:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006e4a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006e4c:	4b27      	ldr	r3, [pc, #156]	@ (8006eec <prvHeapInit+0xac>)
 8006e4e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f003 0307 	and.w	r3, r3, #7
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d00c      	beq.n	8006e74 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	3307      	adds	r3, #7
 8006e5e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f023 0307 	bic.w	r3, r3, #7
 8006e66:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006e68:	68ba      	ldr	r2, [r7, #8]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	1ad3      	subs	r3, r2, r3
 8006e6e:	4a1f      	ldr	r2, [pc, #124]	@ (8006eec <prvHeapInit+0xac>)
 8006e70:	4413      	add	r3, r2
 8006e72:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006e78:	4a1d      	ldr	r2, [pc, #116]	@ (8006ef0 <prvHeapInit+0xb0>)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006e7e:	4b1c      	ldr	r3, [pc, #112]	@ (8006ef0 <prvHeapInit+0xb0>)
 8006e80:	2200      	movs	r2, #0
 8006e82:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	68ba      	ldr	r2, [r7, #8]
 8006e88:	4413      	add	r3, r2
 8006e8a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006e8c:	2208      	movs	r2, #8
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	1a9b      	subs	r3, r3, r2
 8006e92:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f023 0307 	bic.w	r3, r3, #7
 8006e9a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	4a15      	ldr	r2, [pc, #84]	@ (8006ef4 <prvHeapInit+0xb4>)
 8006ea0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ea2:	4b14      	ldr	r3, [pc, #80]	@ (8006ef4 <prvHeapInit+0xb4>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006eaa:	4b12      	ldr	r3, [pc, #72]	@ (8006ef4 <prvHeapInit+0xb4>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	68fa      	ldr	r2, [r7, #12]
 8006eba:	1ad2      	subs	r2, r2, r3
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8006ef4 <prvHeapInit+0xb4>)
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	4a0a      	ldr	r2, [pc, #40]	@ (8006ef8 <prvHeapInit+0xb8>)
 8006ece:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	4a09      	ldr	r2, [pc, #36]	@ (8006efc <prvHeapInit+0xbc>)
 8006ed6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006ed8:	4b09      	ldr	r3, [pc, #36]	@ (8006f00 <prvHeapInit+0xc0>)
 8006eda:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006ede:	601a      	str	r2, [r3, #0]
}
 8006ee0:	bf00      	nop
 8006ee2:	3714      	adds	r7, #20
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr
 8006eec:	20000ec4 	.word	0x20000ec4
 8006ef0:	20004ac4 	.word	0x20004ac4
 8006ef4:	20004acc 	.word	0x20004acc
 8006ef8:	20004ad4 	.word	0x20004ad4
 8006efc:	20004ad0 	.word	0x20004ad0
 8006f00:	20004ae0 	.word	0x20004ae0

08006f04 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006f04:	b480      	push	{r7}
 8006f06:	b085      	sub	sp, #20
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006f0c:	4b28      	ldr	r3, [pc, #160]	@ (8006fb0 <prvInsertBlockIntoFreeList+0xac>)
 8006f0e:	60fb      	str	r3, [r7, #12]
 8006f10:	e002      	b.n	8006f18 <prvInsertBlockIntoFreeList+0x14>
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	60fb      	str	r3, [r7, #12]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d8f7      	bhi.n	8006f12 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	68ba      	ldr	r2, [r7, #8]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d108      	bne.n	8006f46 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	685a      	ldr	r2, [r3, #4]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	441a      	add	r2, r3
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	68ba      	ldr	r2, [r7, #8]
 8006f50:	441a      	add	r2, r3
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d118      	bne.n	8006f8c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	4b15      	ldr	r3, [pc, #84]	@ (8006fb4 <prvInsertBlockIntoFreeList+0xb0>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d00d      	beq.n	8006f82 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	685a      	ldr	r2, [r3, #4]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	441a      	add	r2, r3
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	601a      	str	r2, [r3, #0]
 8006f80:	e008      	b.n	8006f94 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006f82:	4b0c      	ldr	r3, [pc, #48]	@ (8006fb4 <prvInsertBlockIntoFreeList+0xb0>)
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	601a      	str	r2, [r3, #0]
 8006f8a:	e003      	b.n	8006f94 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d002      	beq.n	8006fa2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006fa2:	bf00      	nop
 8006fa4:	3714      	adds	r7, #20
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr
 8006fae:	bf00      	nop
 8006fb0:	20004ac4 	.word	0x20004ac4
 8006fb4:	20004acc 	.word	0x20004acc

08006fb8 <memset>:
 8006fb8:	4402      	add	r2, r0
 8006fba:	4603      	mov	r3, r0
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d100      	bne.n	8006fc2 <memset+0xa>
 8006fc0:	4770      	bx	lr
 8006fc2:	f803 1b01 	strb.w	r1, [r3], #1
 8006fc6:	e7f9      	b.n	8006fbc <memset+0x4>

08006fc8 <__libc_init_array>:
 8006fc8:	b570      	push	{r4, r5, r6, lr}
 8006fca:	4d0d      	ldr	r5, [pc, #52]	@ (8007000 <__libc_init_array+0x38>)
 8006fcc:	4c0d      	ldr	r4, [pc, #52]	@ (8007004 <__libc_init_array+0x3c>)
 8006fce:	1b64      	subs	r4, r4, r5
 8006fd0:	10a4      	asrs	r4, r4, #2
 8006fd2:	2600      	movs	r6, #0
 8006fd4:	42a6      	cmp	r6, r4
 8006fd6:	d109      	bne.n	8006fec <__libc_init_array+0x24>
 8006fd8:	4d0b      	ldr	r5, [pc, #44]	@ (8007008 <__libc_init_array+0x40>)
 8006fda:	4c0c      	ldr	r4, [pc, #48]	@ (800700c <__libc_init_array+0x44>)
 8006fdc:	f000 f826 	bl	800702c <_init>
 8006fe0:	1b64      	subs	r4, r4, r5
 8006fe2:	10a4      	asrs	r4, r4, #2
 8006fe4:	2600      	movs	r6, #0
 8006fe6:	42a6      	cmp	r6, r4
 8006fe8:	d105      	bne.n	8006ff6 <__libc_init_array+0x2e>
 8006fea:	bd70      	pop	{r4, r5, r6, pc}
 8006fec:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ff0:	4798      	blx	r3
 8006ff2:	3601      	adds	r6, #1
 8006ff4:	e7ee      	b.n	8006fd4 <__libc_init_array+0xc>
 8006ff6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ffa:	4798      	blx	r3
 8006ffc:	3601      	adds	r6, #1
 8006ffe:	e7f2      	b.n	8006fe6 <__libc_init_array+0x1e>
 8007000:	0800715c 	.word	0x0800715c
 8007004:	0800715c 	.word	0x0800715c
 8007008:	0800715c 	.word	0x0800715c
 800700c:	08007160 	.word	0x08007160

08007010 <memcpy>:
 8007010:	440a      	add	r2, r1
 8007012:	4291      	cmp	r1, r2
 8007014:	f100 33ff 	add.w	r3, r0, #4294967295
 8007018:	d100      	bne.n	800701c <memcpy+0xc>
 800701a:	4770      	bx	lr
 800701c:	b510      	push	{r4, lr}
 800701e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007022:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007026:	4291      	cmp	r1, r2
 8007028:	d1f9      	bne.n	800701e <memcpy+0xe>
 800702a:	bd10      	pop	{r4, pc}

0800702c <_init>:
 800702c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800702e:	bf00      	nop
 8007030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007032:	bc08      	pop	{r3}
 8007034:	469e      	mov	lr, r3
 8007036:	4770      	bx	lr

08007038 <_fini>:
 8007038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800703a:	bf00      	nop
 800703c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800703e:	bc08      	pop	{r3}
 8007040:	469e      	mov	lr, r3
 8007042:	4770      	bx	lr
