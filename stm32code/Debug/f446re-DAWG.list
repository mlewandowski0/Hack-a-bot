
f446re-DAWG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ea4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08007074  08007074  00008074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007130  08007130  00009018  2**0
                  CONTENTS
  4 .ARM          00000008  08007130  08007130  00008130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007138  08007138  00009018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007138  08007138  00008138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800713c  0800713c  0000813c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08007140  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ac4  20000018  08007158  00009018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004adc  08007158  00009adc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a9ee  00000000  00000000  00009048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000381d  00000000  00000000  00023a36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017b0  00000000  00000000  00027258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000129d  00000000  00000000  00028a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003526  00000000  00000000  00029ca5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ba9d  00000000  00000000  0002d1cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd5bd  00000000  00000000  00048c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00126225  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006554  00000000  00000000  00126268  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  0012c7bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000018 	.word	0x20000018
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800705c 	.word	0x0800705c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000001c 	.word	0x2000001c
 800020c:	0800705c 	.word	0x0800705c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <blue_button_clicked>:
uint8_t USART_RX_BUFFER[1] = {0x00};
uint8_t CURR_BYTE = 0x00;

uint8_t data[] = "BTN\n";
void blue_button_clicked()
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	HAL_UART_Transmit (&huart2, data, sizeof (data), 10);
 8000504:	230a      	movs	r3, #10
 8000506:	2205      	movs	r2, #5
 8000508:	4902      	ldr	r1, [pc, #8]	@ (8000514 <blue_button_clicked+0x14>)
 800050a:	4803      	ldr	r0, [pc, #12]	@ (8000518 <blue_button_clicked+0x18>)
 800050c:	f002 fd64 	bl	8002fd8 <HAL_UART_Transmit>
}
 8000510:	bf00      	nop
 8000512:	bd80      	pop	{r7, pc}
 8000514:	20000000 	.word	0x20000000
 8000518:	20000088 	.word	0x20000088

0800051c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	4603      	mov	r3, r0
 8000524:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B1_Pin)
 8000526:	88fb      	ldrh	r3, [r7, #6]
 8000528:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800052c:	d101      	bne.n	8000532 <HAL_GPIO_EXTI_Callback+0x16>
	{
		blue_button_clicked();
 800052e:	f7ff ffe7 	bl	8000500 <blue_button_clicked>
	}
}
 8000532:	bf00      	nop
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
	...

0800053c <TransmitByte>:

void TransmitByte(uint8_t byte)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2, &byte, 1, 2000);
 8000546:	1df9      	adds	r1, r7, #7
 8000548:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800054c:	2201      	movs	r2, #1
 800054e:	4803      	ldr	r0, [pc, #12]	@ (800055c <TransmitByte+0x20>)
 8000550:	f002 fd42 	bl	8002fd8 <HAL_UART_Transmit>
}
 8000554:	bf00      	nop
 8000556:	3708      	adds	r7, #8
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	20000088 	.word	0x20000088

08000560 <HAL_UART_RxCpltCallback>:
{
	HAL_UART_Transmit(&huart2, msg, size, 2000);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	// HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,1);
	BaseType_t xHigherPriorityTaskWoken;

	CURR_BYTE = USART_RX_BUFFER[0];
 8000568:	4b11      	ldr	r3, [pc, #68]	@ (80005b0 <HAL_UART_RxCpltCallback+0x50>)
 800056a:	781a      	ldrb	r2, [r3, #0]
 800056c:	4b11      	ldr	r3, [pc, #68]	@ (80005b4 <HAL_UART_RxCpltCallback+0x54>)
 800056e:	701a      	strb	r2, [r3, #0]
	int txStatus = xQueueSendToBackFromISR(RX_queueHandle, &CURR_BYTE, &xHigherPriorityTaskWoken);
 8000570:	4b11      	ldr	r3, [pc, #68]	@ (80005b8 <HAL_UART_RxCpltCallback+0x58>)
 8000572:	6818      	ldr	r0, [r3, #0]
 8000574:	f107 0208 	add.w	r2, r7, #8
 8000578:	2300      	movs	r3, #0
 800057a:	490e      	ldr	r1, [pc, #56]	@ (80005b4 <HAL_UART_RxCpltCallback+0x54>)
 800057c:	f004 fba2 	bl	8004cc4 <xQueueGenericSendFromISR>
 8000580:	60f8      	str	r0, [r7, #12]

	if (txStatus == 0)
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d00a      	beq.n	800059e <HAL_UART_RxCpltCallback+0x3e>
	{
		// something went wrong
	}
	else
	{
		portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8000588:	68bb      	ldr	r3, [r7, #8]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d007      	beq.n	800059e <HAL_UART_RxCpltCallback+0x3e>
 800058e:	4b0b      	ldr	r3, [pc, #44]	@ (80005bc <HAL_UART_RxCpltCallback+0x5c>)
 8000590:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	f3bf 8f4f 	dsb	sy
 800059a:	f3bf 8f6f 	isb	sy
	}

	// start polling again
    HAL_UART_Receive_DMA (&huart2, USART_RX_BUFFER, 1);
 800059e:	2201      	movs	r2, #1
 80005a0:	4903      	ldr	r1, [pc, #12]	@ (80005b0 <HAL_UART_RxCpltCallback+0x50>)
 80005a2:	4807      	ldr	r0, [pc, #28]	@ (80005c0 <HAL_UART_RxCpltCallback+0x60>)
 80005a4:	f002 fda3 	bl	80030ee <HAL_UART_Receive_DMA>
}
 80005a8:	bf00      	nop
 80005aa:	3710      	adds	r7, #16
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	2000013c 	.word	0x2000013c
 80005b4:	2000013d 	.word	0x2000013d
 80005b8:	20000138 	.word	0x20000138
 80005bc:	e000ed04 	.word	0xe000ed04
 80005c0:	20000088 	.word	0x20000088

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c8:	f000 fbca 	bl	8000d60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005cc:	f000 f840 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d0:	f000 f922 	bl	8000818 <MX_GPIO_Init>
  MX_DMA_Init();
 80005d4:	f000 f900 	bl	80007d8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005d8:	f000 f8d4 	bl	8000784 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005dc:	f000 f8a4 	bl	8000728 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA (&huart2, USART_RX_BUFFER, 1);
 80005e0:	2201      	movs	r2, #1
 80005e2:	4911      	ldr	r1, [pc, #68]	@ (8000628 <main+0x64>)
 80005e4:	4811      	ldr	r0, [pc, #68]	@ (800062c <main+0x68>)
 80005e6:	f002 fd82 	bl	80030ee <HAL_UART_Receive_DMA>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005ea:	f003 fed1 	bl	8004390 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of RX_queue */
  RX_queueHandle = osMessageQueueNew (64, sizeof(uint8_t), &RX_queue_attributes);
 80005ee:	4a10      	ldr	r2, [pc, #64]	@ (8000630 <main+0x6c>)
 80005f0:	2101      	movs	r1, #1
 80005f2:	2040      	movs	r0, #64	@ 0x40
 80005f4:	f003 ffc3 	bl	800457e <osMessageQueueNew>
 80005f8:	4603      	mov	r3, r0
 80005fa:	4a0e      	ldr	r2, [pc, #56]	@ (8000634 <main+0x70>)
 80005fc:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of heartbeat */
  heartbeatHandle = osThreadNew(heartbeatTask, NULL, &heartbeat_attributes);
 80005fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000638 <main+0x74>)
 8000600:	2100      	movs	r1, #0
 8000602:	480e      	ldr	r0, [pc, #56]	@ (800063c <main+0x78>)
 8000604:	f003 ff0e 	bl	8004424 <osThreadNew>
 8000608:	4603      	mov	r3, r0
 800060a:	4a0d      	ldr	r2, [pc, #52]	@ (8000640 <main+0x7c>)
 800060c:	6013      	str	r3, [r2, #0]

  /* creation of RX_USART */
  RX_USARTHandle = osThreadNew(RX_decode_msg, NULL, &RX_USART_attributes);
 800060e:	4a0d      	ldr	r2, [pc, #52]	@ (8000644 <main+0x80>)
 8000610:	2100      	movs	r1, #0
 8000612:	480d      	ldr	r0, [pc, #52]	@ (8000648 <main+0x84>)
 8000614:	f003 ff06 	bl	8004424 <osThreadNew>
 8000618:	4603      	mov	r3, r0
 800061a:	4a0c      	ldr	r2, [pc, #48]	@ (800064c <main+0x88>)
 800061c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800061e:	f003 fedb 	bl	80043d8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000622:	bf00      	nop
 8000624:	e7fd      	b.n	8000622 <main+0x5e>
 8000626:	bf00      	nop
 8000628:	2000013c 	.word	0x2000013c
 800062c:	20000088 	.word	0x20000088
 8000630:	080070f8 	.word	0x080070f8
 8000634:	20000138 	.word	0x20000138
 8000638:	080070b0 	.word	0x080070b0
 800063c:	08000905 	.word	0x08000905
 8000640:	20000130 	.word	0x20000130
 8000644:	080070d4 	.word	0x080070d4
 8000648:	08000919 	.word	0x08000919
 800064c:	20000134 	.word	0x20000134

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b094      	sub	sp, #80	@ 0x50
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 031c 	add.w	r3, r7, #28
 800065a:	2234      	movs	r2, #52	@ 0x34
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f006 fcc2 	bl	8006fe8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 0308 	add.w	r3, r7, #8
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	4b29      	ldr	r3, [pc, #164]	@ (8000720 <SystemClock_Config+0xd0>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800067c:	4a28      	ldr	r2, [pc, #160]	@ (8000720 <SystemClock_Config+0xd0>)
 800067e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000682:	6413      	str	r3, [r2, #64]	@ 0x40
 8000684:	4b26      	ldr	r3, [pc, #152]	@ (8000720 <SystemClock_Config+0xd0>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000688:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000690:	2300      	movs	r3, #0
 8000692:	603b      	str	r3, [r7, #0]
 8000694:	4b23      	ldr	r3, [pc, #140]	@ (8000724 <SystemClock_Config+0xd4>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a22      	ldr	r2, [pc, #136]	@ (8000724 <SystemClock_Config+0xd4>)
 800069a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	4b20      	ldr	r3, [pc, #128]	@ (8000724 <SystemClock_Config+0xd4>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006a8:	603b      	str	r3, [r7, #0]
 80006aa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ac:	2302      	movs	r3, #2
 80006ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b0:	2301      	movs	r3, #1
 80006b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b4:	2310      	movs	r3, #16
 80006b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b8:	2302      	movs	r3, #2
 80006ba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006bc:	2300      	movs	r3, #0
 80006be:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006c0:	2308      	movs	r3, #8
 80006c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 80006c4:	23a0      	movs	r3, #160	@ 0xa0
 80006c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006cc:	2302      	movs	r3, #2
 80006ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006d0:	2302      	movs	r3, #2
 80006d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d4:	f107 031c 	add.w	r3, r7, #28
 80006d8:	4618      	mov	r0, r3
 80006da:	f001 feed 	bl	80024b8 <HAL_RCC_OscConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006e4:	f000 f946 	bl	8000974 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e8:	230f      	movs	r3, #15
 80006ea:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ec:	2302      	movs	r3, #2
 80006ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006f4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80006fa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006fe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000700:	f107 0308 	add.w	r3, r7, #8
 8000704:	2105      	movs	r1, #5
 8000706:	4618      	mov	r0, r3
 8000708:	f001 fb5a 	bl	8001dc0 <HAL_RCC_ClockConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000712:	f000 f92f 	bl	8000974 <Error_Handler>
  }
}
 8000716:	bf00      	nop
 8000718:	3750      	adds	r7, #80	@ 0x50
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40023800 	.word	0x40023800
 8000724:	40007000 	.word	0x40007000

08000728 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800072c:	4b12      	ldr	r3, [pc, #72]	@ (8000778 <MX_I2C1_Init+0x50>)
 800072e:	4a13      	ldr	r2, [pc, #76]	@ (800077c <MX_I2C1_Init+0x54>)
 8000730:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000732:	4b11      	ldr	r3, [pc, #68]	@ (8000778 <MX_I2C1_Init+0x50>)
 8000734:	4a12      	ldr	r2, [pc, #72]	@ (8000780 <MX_I2C1_Init+0x58>)
 8000736:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000738:	4b0f      	ldr	r3, [pc, #60]	@ (8000778 <MX_I2C1_Init+0x50>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800073e:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <MX_I2C1_Init+0x50>)
 8000740:	2200      	movs	r2, #0
 8000742:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000744:	4b0c      	ldr	r3, [pc, #48]	@ (8000778 <MX_I2C1_Init+0x50>)
 8000746:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800074a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800074c:	4b0a      	ldr	r3, [pc, #40]	@ (8000778 <MX_I2C1_Init+0x50>)
 800074e:	2200      	movs	r2, #0
 8000750:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000752:	4b09      	ldr	r3, [pc, #36]	@ (8000778 <MX_I2C1_Init+0x50>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000758:	4b07      	ldr	r3, [pc, #28]	@ (8000778 <MX_I2C1_Init+0x50>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800075e:	4b06      	ldr	r3, [pc, #24]	@ (8000778 <MX_I2C1_Init+0x50>)
 8000760:	2200      	movs	r2, #0
 8000762:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000764:	4804      	ldr	r0, [pc, #16]	@ (8000778 <MX_I2C1_Init+0x50>)
 8000766:	f001 f9e7 	bl	8001b38 <HAL_I2C_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000770:	f000 f900 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000034 	.word	0x20000034
 800077c:	40005400 	.word	0x40005400
 8000780:	00061a80 	.word	0x00061a80

08000784 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000788:	4b11      	ldr	r3, [pc, #68]	@ (80007d0 <MX_USART2_UART_Init+0x4c>)
 800078a:	4a12      	ldr	r2, [pc, #72]	@ (80007d4 <MX_USART2_UART_Init+0x50>)
 800078c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800078e:	4b10      	ldr	r3, [pc, #64]	@ (80007d0 <MX_USART2_UART_Init+0x4c>)
 8000790:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000794:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000796:	4b0e      	ldr	r3, [pc, #56]	@ (80007d0 <MX_USART2_UART_Init+0x4c>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800079c:	4b0c      	ldr	r3, [pc, #48]	@ (80007d0 <MX_USART2_UART_Init+0x4c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	@ (80007d0 <MX_USART2_UART_Init+0x4c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007a8:	4b09      	ldr	r3, [pc, #36]	@ (80007d0 <MX_USART2_UART_Init+0x4c>)
 80007aa:	220c      	movs	r2, #12
 80007ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ae:	4b08      	ldr	r3, [pc, #32]	@ (80007d0 <MX_USART2_UART_Init+0x4c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b4:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <MX_USART2_UART_Init+0x4c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ba:	4805      	ldr	r0, [pc, #20]	@ (80007d0 <MX_USART2_UART_Init+0x4c>)
 80007bc:	f002 fbbc 	bl	8002f38 <HAL_UART_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007c6:	f000 f8d5 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000088 	.word	0x20000088
 80007d4:	40004400 	.word	0x40004400

080007d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000814 <MX_DMA_Init+0x3c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a0b      	ldr	r2, [pc, #44]	@ (8000814 <MX_DMA_Init+0x3c>)
 80007e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b09      	ldr	r3, [pc, #36]	@ (8000814 <MX_DMA_Init+0x3c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2105      	movs	r1, #5
 80007fe:	2010      	movs	r0, #16
 8000800:	f000 fba8 	bl	8000f54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000804:	2010      	movs	r0, #16
 8000806:	f000 fbc1 	bl	8000f8c <HAL_NVIC_EnableIRQ>

}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40023800 	.word	0x40023800

08000818 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08a      	sub	sp, #40	@ 0x28
 800081c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
 800082c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	613b      	str	r3, [r7, #16]
 8000832:	4b31      	ldr	r3, [pc, #196]	@ (80008f8 <MX_GPIO_Init+0xe0>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	4a30      	ldr	r2, [pc, #192]	@ (80008f8 <MX_GPIO_Init+0xe0>)
 8000838:	f043 0304 	orr.w	r3, r3, #4
 800083c:	6313      	str	r3, [r2, #48]	@ 0x30
 800083e:	4b2e      	ldr	r3, [pc, #184]	@ (80008f8 <MX_GPIO_Init+0xe0>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	f003 0304 	and.w	r3, r3, #4
 8000846:	613b      	str	r3, [r7, #16]
 8000848:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	4b2a      	ldr	r3, [pc, #168]	@ (80008f8 <MX_GPIO_Init+0xe0>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	4a29      	ldr	r2, [pc, #164]	@ (80008f8 <MX_GPIO_Init+0xe0>)
 8000854:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000858:	6313      	str	r3, [r2, #48]	@ 0x30
 800085a:	4b27      	ldr	r3, [pc, #156]	@ (80008f8 <MX_GPIO_Init+0xe0>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	4b23      	ldr	r3, [pc, #140]	@ (80008f8 <MX_GPIO_Init+0xe0>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	4a22      	ldr	r2, [pc, #136]	@ (80008f8 <MX_GPIO_Init+0xe0>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6313      	str	r3, [r2, #48]	@ 0x30
 8000876:	4b20      	ldr	r3, [pc, #128]	@ (80008f8 <MX_GPIO_Init+0xe0>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	4b1c      	ldr	r3, [pc, #112]	@ (80008f8 <MX_GPIO_Init+0xe0>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	4a1b      	ldr	r2, [pc, #108]	@ (80008f8 <MX_GPIO_Init+0xe0>)
 800088c:	f043 0302 	orr.w	r3, r3, #2
 8000890:	6313      	str	r3, [r2, #48]	@ 0x30
 8000892:	4b19      	ldr	r3, [pc, #100]	@ (80008f8 <MX_GPIO_Init+0xe0>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	f003 0302 	and.w	r3, r3, #2
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	2120      	movs	r1, #32
 80008a2:	4816      	ldr	r0, [pc, #88]	@ (80008fc <MX_GPIO_Init+0xe4>)
 80008a4:	f001 f916 	bl	8001ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008ae:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	4619      	mov	r1, r3
 80008be:	4810      	ldr	r0, [pc, #64]	@ (8000900 <MX_GPIO_Init+0xe8>)
 80008c0:	f000 ff74 	bl	80017ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80008c4:	2320      	movs	r3, #32
 80008c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c8:	2301      	movs	r3, #1
 80008ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2300      	movs	r3, #0
 80008d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	4619      	mov	r1, r3
 80008da:	4808      	ldr	r0, [pc, #32]	@ (80008fc <MX_GPIO_Init+0xe4>)
 80008dc:	f000 ff66 	bl	80017ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80008e0:	2200      	movs	r2, #0
 80008e2:	2105      	movs	r1, #5
 80008e4:	2028      	movs	r0, #40	@ 0x28
 80008e6:	f000 fb35 	bl	8000f54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008ea:	2028      	movs	r0, #40	@ 0x28
 80008ec:	f000 fb4e 	bl	8000f8c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008f0:	bf00      	nop
 80008f2:	3728      	adds	r7, #40	@ 0x28
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40020000 	.word	0x40020000
 8000900:	40020800 	.word	0x40020800

08000904 <heartbeatTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_heartbeatTask */
void heartbeatTask(void *argument)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  {
	  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
#ifdef HEARTBEAT_LED
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
#endif
	  osDelay(2000);
 800090c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000910:	f003 fe1a 	bl	8004548 <osDelay>
 8000914:	e7fa      	b.n	800090c <heartbeatTask+0x8>
	...

08000918 <RX_decode_msg>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RX_decode_msg */
void RX_decode_msg(void *argument)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
	uint8_t rxStatus;
	uint8_t byte;

  for(;;)
  {
	rxStatus = xQueueReceive(RX_queueHandle, &byte, 50);
 8000920:	4b0a      	ldr	r3, [pc, #40]	@ (800094c <RX_decode_msg+0x34>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f107 010e 	add.w	r1, r7, #14
 8000928:	2232      	movs	r2, #50	@ 0x32
 800092a:	4618      	mov	r0, r3
 800092c:	f004 fa68 	bl	8004e00 <xQueueReceive>
 8000930:	4603      	mov	r3, r0
 8000932:	73fb      	strb	r3, [r7, #15]
    if (rxStatus != 0)
 8000934:	7bfb      	ldrb	r3, [r7, #15]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d003      	beq.n	8000942 <RX_decode_msg+0x2a>
    {
    	// decode byte
    	TransmitByte(byte);
 800093a:	7bbb      	ldrb	r3, [r7, #14]
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff fdfd 	bl	800053c <TransmitByte>
    }
	osDelay(1);
 8000942:	2001      	movs	r0, #1
 8000944:	f003 fe00 	bl	8004548 <osDelay>
	rxStatus = xQueueReceive(RX_queueHandle, &byte, 50);
 8000948:	e7ea      	b.n	8000920 <RX_decode_msg+0x8>
 800094a:	bf00      	nop
 800094c:	20000138 	.word	0x20000138

08000950 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a04      	ldr	r2, [pc, #16]	@ (8000970 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d101      	bne.n	8000966 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000962:	f000 fa1f 	bl	8000da4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40001000 	.word	0x40001000

08000974 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000978:	b672      	cpsid	i
}
 800097a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <Error_Handler+0x8>

08000980 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	4b12      	ldr	r3, [pc, #72]	@ (80009d4 <HAL_MspInit+0x54>)
 800098c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800098e:	4a11      	ldr	r2, [pc, #68]	@ (80009d4 <HAL_MspInit+0x54>)
 8000990:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000994:	6453      	str	r3, [r2, #68]	@ 0x44
 8000996:	4b0f      	ldr	r3, [pc, #60]	@ (80009d4 <HAL_MspInit+0x54>)
 8000998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800099a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	603b      	str	r3, [r7, #0]
 80009a6:	4b0b      	ldr	r3, [pc, #44]	@ (80009d4 <HAL_MspInit+0x54>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009aa:	4a0a      	ldr	r2, [pc, #40]	@ (80009d4 <HAL_MspInit+0x54>)
 80009ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009b2:	4b08      	ldr	r3, [pc, #32]	@ (80009d4 <HAL_MspInit+0x54>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009be:	2200      	movs	r2, #0
 80009c0:	210f      	movs	r1, #15
 80009c2:	f06f 0001 	mvn.w	r0, #1
 80009c6:	f000 fac5 	bl	8000f54 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40023800 	.word	0x40023800

080009d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08a      	sub	sp, #40	@ 0x28
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a19      	ldr	r2, [pc, #100]	@ (8000a5c <HAL_I2C_MspInit+0x84>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d12b      	bne.n	8000a52 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	613b      	str	r3, [r7, #16]
 80009fe:	4b18      	ldr	r3, [pc, #96]	@ (8000a60 <HAL_I2C_MspInit+0x88>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a02:	4a17      	ldr	r2, [pc, #92]	@ (8000a60 <HAL_I2C_MspInit+0x88>)
 8000a04:	f043 0302 	orr.w	r3, r3, #2
 8000a08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a0a:	4b15      	ldr	r3, [pc, #84]	@ (8000a60 <HAL_I2C_MspInit+0x88>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0e:	f003 0302 	and.w	r3, r3, #2
 8000a12:	613b      	str	r3, [r7, #16]
 8000a14:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a16:	23c0      	movs	r3, #192	@ 0xc0
 8000a18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a1a:	2312      	movs	r3, #18
 8000a1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a22:	2303      	movs	r3, #3
 8000a24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a26:	2304      	movs	r3, #4
 8000a28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a2a:	f107 0314 	add.w	r3, r7, #20
 8000a2e:	4619      	mov	r1, r3
 8000a30:	480c      	ldr	r0, [pc, #48]	@ (8000a64 <HAL_I2C_MspInit+0x8c>)
 8000a32:	f000 febb 	bl	80017ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	4b09      	ldr	r3, [pc, #36]	@ (8000a60 <HAL_I2C_MspInit+0x88>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3e:	4a08      	ldr	r2, [pc, #32]	@ (8000a60 <HAL_I2C_MspInit+0x88>)
 8000a40:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a44:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a46:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <HAL_I2C_MspInit+0x88>)
 8000a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a52:	bf00      	nop
 8000a54:	3728      	adds	r7, #40	@ 0x28
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40005400 	.word	0x40005400
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40020400 	.word	0x40020400

08000a68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08a      	sub	sp, #40	@ 0x28
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a34      	ldr	r2, [pc, #208]	@ (8000b58 <HAL_UART_MspInit+0xf0>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d162      	bne.n	8000b50 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	613b      	str	r3, [r7, #16]
 8000a8e:	4b33      	ldr	r3, [pc, #204]	@ (8000b5c <HAL_UART_MspInit+0xf4>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a92:	4a32      	ldr	r2, [pc, #200]	@ (8000b5c <HAL_UART_MspInit+0xf4>)
 8000a94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a98:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a9a:	4b30      	ldr	r3, [pc, #192]	@ (8000b5c <HAL_UART_MspInit+0xf4>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	4b2c      	ldr	r3, [pc, #176]	@ (8000b5c <HAL_UART_MspInit+0xf4>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aae:	4a2b      	ldr	r2, [pc, #172]	@ (8000b5c <HAL_UART_MspInit+0xf4>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab6:	4b29      	ldr	r3, [pc, #164]	@ (8000b5c <HAL_UART_MspInit+0xf4>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ac2:	230c      	movs	r3, #12
 8000ac4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ad2:	2307      	movs	r3, #7
 8000ad4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad6:	f107 0314 	add.w	r3, r7, #20
 8000ada:	4619      	mov	r1, r3
 8000adc:	4820      	ldr	r0, [pc, #128]	@ (8000b60 <HAL_UART_MspInit+0xf8>)
 8000ade:	f000 fe65 	bl	80017ac <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000ae2:	4b20      	ldr	r3, [pc, #128]	@ (8000b64 <HAL_UART_MspInit+0xfc>)
 8000ae4:	4a20      	ldr	r2, [pc, #128]	@ (8000b68 <HAL_UART_MspInit+0x100>)
 8000ae6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000ae8:	4b1e      	ldr	r3, [pc, #120]	@ (8000b64 <HAL_UART_MspInit+0xfc>)
 8000aea:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000aee:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000af0:	4b1c      	ldr	r3, [pc, #112]	@ (8000b64 <HAL_UART_MspInit+0xfc>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000af6:	4b1b      	ldr	r3, [pc, #108]	@ (8000b64 <HAL_UART_MspInit+0xfc>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000afc:	4b19      	ldr	r3, [pc, #100]	@ (8000b64 <HAL_UART_MspInit+0xfc>)
 8000afe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b02:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b04:	4b17      	ldr	r3, [pc, #92]	@ (8000b64 <HAL_UART_MspInit+0xfc>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b0a:	4b16      	ldr	r3, [pc, #88]	@ (8000b64 <HAL_UART_MspInit+0xfc>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000b10:	4b14      	ldr	r3, [pc, #80]	@ (8000b64 <HAL_UART_MspInit+0xfc>)
 8000b12:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b16:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b18:	4b12      	ldr	r3, [pc, #72]	@ (8000b64 <HAL_UART_MspInit+0xfc>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b1e:	4b11      	ldr	r3, [pc, #68]	@ (8000b64 <HAL_UART_MspInit+0xfc>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000b24:	480f      	ldr	r0, [pc, #60]	@ (8000b64 <HAL_UART_MspInit+0xfc>)
 8000b26:	f000 fa3f 	bl	8000fa8 <HAL_DMA_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000b30:	f7ff ff20 	bl	8000974 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4a0b      	ldr	r2, [pc, #44]	@ (8000b64 <HAL_UART_MspInit+0xfc>)
 8000b38:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b64 <HAL_UART_MspInit+0xfc>)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000b40:	2200      	movs	r2, #0
 8000b42:	2105      	movs	r1, #5
 8000b44:	2026      	movs	r0, #38	@ 0x26
 8000b46:	f000 fa05 	bl	8000f54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b4a:	2026      	movs	r0, #38	@ 0x26
 8000b4c:	f000 fa1e 	bl	8000f8c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b50:	bf00      	nop
 8000b52:	3728      	adds	r7, #40	@ 0x28
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40004400 	.word	0x40004400
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40020000 	.word	0x40020000
 8000b64:	200000d0 	.word	0x200000d0
 8000b68:	40026088 	.word	0x40026088

08000b6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08e      	sub	sp, #56	@ 0x38
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b74:	2300      	movs	r3, #0
 8000b76:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	4b33      	ldr	r3, [pc, #204]	@ (8000c50 <HAL_InitTick+0xe4>)
 8000b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b84:	4a32      	ldr	r2, [pc, #200]	@ (8000c50 <HAL_InitTick+0xe4>)
 8000b86:	f043 0310 	orr.w	r3, r3, #16
 8000b8a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b8c:	4b30      	ldr	r3, [pc, #192]	@ (8000c50 <HAL_InitTick+0xe4>)
 8000b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b90:	f003 0310 	and.w	r3, r3, #16
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b98:	f107 0210 	add.w	r2, r7, #16
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	4611      	mov	r1, r2
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f001 fa26 	bl	8001ff4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ba8:	6a3b      	ldr	r3, [r7, #32]
 8000baa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d103      	bne.n	8000bba <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000bb2:	f001 f9f7 	bl	8001fa4 <HAL_RCC_GetPCLK1Freq>
 8000bb6:	6378      	str	r0, [r7, #52]	@ 0x34
 8000bb8:	e004      	b.n	8000bc4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000bba:	f001 f9f3 	bl	8001fa4 <HAL_RCC_GetPCLK1Freq>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	005b      	lsls	r3, r3, #1
 8000bc2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bc6:	4a23      	ldr	r2, [pc, #140]	@ (8000c54 <HAL_InitTick+0xe8>)
 8000bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bcc:	0c9b      	lsrs	r3, r3, #18
 8000bce:	3b01      	subs	r3, #1
 8000bd0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000bd2:	4b21      	ldr	r3, [pc, #132]	@ (8000c58 <HAL_InitTick+0xec>)
 8000bd4:	4a21      	ldr	r2, [pc, #132]	@ (8000c5c <HAL_InitTick+0xf0>)
 8000bd6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000bd8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c58 <HAL_InitTick+0xec>)
 8000bda:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000bde:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000be0:	4a1d      	ldr	r2, [pc, #116]	@ (8000c58 <HAL_InitTick+0xec>)
 8000be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000be4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000be6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c58 <HAL_InitTick+0xec>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bec:	4b1a      	ldr	r3, [pc, #104]	@ (8000c58 <HAL_InitTick+0xec>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bf2:	4b19      	ldr	r3, [pc, #100]	@ (8000c58 <HAL_InitTick+0xec>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000bf8:	4817      	ldr	r0, [pc, #92]	@ (8000c58 <HAL_InitTick+0xec>)
 8000bfa:	f001 fefb 	bl	80029f4 <HAL_TIM_Base_Init>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000c04:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d11b      	bne.n	8000c44 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c0c:	4812      	ldr	r0, [pc, #72]	@ (8000c58 <HAL_InitTick+0xec>)
 8000c0e:	f001 ff4b 	bl	8002aa8 <HAL_TIM_Base_Start_IT>
 8000c12:	4603      	mov	r3, r0
 8000c14:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000c18:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d111      	bne.n	8000c44 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c20:	2036      	movs	r0, #54	@ 0x36
 8000c22:	f000 f9b3 	bl	8000f8c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2b0f      	cmp	r3, #15
 8000c2a:	d808      	bhi.n	8000c3e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	6879      	ldr	r1, [r7, #4]
 8000c30:	2036      	movs	r0, #54	@ 0x36
 8000c32:	f000 f98f 	bl	8000f54 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c36:	4a0a      	ldr	r2, [pc, #40]	@ (8000c60 <HAL_InitTick+0xf4>)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6013      	str	r3, [r2, #0]
 8000c3c:	e002      	b.n	8000c44 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c44:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3738      	adds	r7, #56	@ 0x38
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40023800 	.word	0x40023800
 8000c54:	431bde83 	.word	0x431bde83
 8000c58:	20000140 	.word	0x20000140
 8000c5c:	40001000 	.word	0x40001000
 8000c60:	2000000c 	.word	0x2000000c

08000c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c68:	bf00      	nop
 8000c6a:	e7fd      	b.n	8000c68 <NMI_Handler+0x4>

08000c6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <HardFault_Handler+0x4>

08000c74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c78:	bf00      	nop
 8000c7a:	e7fd      	b.n	8000c78 <MemManage_Handler+0x4>

08000c7c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <BusFault_Handler+0x4>

08000c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <UsageFault_Handler+0x4>

08000c8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
	...

08000c9c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000ca0:	4802      	ldr	r0, [pc, #8]	@ (8000cac <DMA1_Stream5_IRQHandler+0x10>)
 8000ca2:	f000 fb19 	bl	80012d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	200000d0 	.word	0x200000d0

08000cb0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000cb4:	4802      	ldr	r0, [pc, #8]	@ (8000cc0 <USART2_IRQHandler+0x10>)
 8000cb6:	f002 fa3f 	bl	8003138 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000088 	.word	0x20000088

08000cc4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000cc8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000ccc:	f000 ff1c 	bl	8001b08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000cd8:	4802      	ldr	r0, [pc, #8]	@ (8000ce4 <TIM6_DAC_IRQHandler+0x10>)
 8000cda:	f001 ff55 	bl	8002b88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000140 	.word	0x20000140

08000ce8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cec:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <SystemInit+0x20>)
 8000cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cf2:	4a05      	ldr	r2, [pc, #20]	@ (8000d08 <SystemInit+0x20>)
 8000cf4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cf8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d44 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d10:	f7ff ffea 	bl	8000ce8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d14:	480c      	ldr	r0, [pc, #48]	@ (8000d48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d16:	490d      	ldr	r1, [pc, #52]	@ (8000d4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d18:	4a0d      	ldr	r2, [pc, #52]	@ (8000d50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d1c:	e002      	b.n	8000d24 <LoopCopyDataInit>

08000d1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d22:	3304      	adds	r3, #4

08000d24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d28:	d3f9      	bcc.n	8000d1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d2c:	4c0a      	ldr	r4, [pc, #40]	@ (8000d58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d30:	e001      	b.n	8000d36 <LoopFillZerobss>

08000d32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d34:	3204      	adds	r2, #4

08000d36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d38:	d3fb      	bcc.n	8000d32 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d3a:	f006 f95d 	bl	8006ff8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d3e:	f7ff fc41 	bl	80005c4 <main>
  bx  lr    
 8000d42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d4c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000d50:	08007140 	.word	0x08007140
  ldr r2, =_sbss
 8000d54:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000d58:	20004adc 	.word	0x20004adc

08000d5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d5c:	e7fe      	b.n	8000d5c <ADC_IRQHandler>
	...

08000d60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d64:	4b0e      	ldr	r3, [pc, #56]	@ (8000da0 <HAL_Init+0x40>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a0d      	ldr	r2, [pc, #52]	@ (8000da0 <HAL_Init+0x40>)
 8000d6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d70:	4b0b      	ldr	r3, [pc, #44]	@ (8000da0 <HAL_Init+0x40>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a0a      	ldr	r2, [pc, #40]	@ (8000da0 <HAL_Init+0x40>)
 8000d76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d7c:	4b08      	ldr	r3, [pc, #32]	@ (8000da0 <HAL_Init+0x40>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a07      	ldr	r2, [pc, #28]	@ (8000da0 <HAL_Init+0x40>)
 8000d82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d88:	2003      	movs	r0, #3
 8000d8a:	f000 f8d8 	bl	8000f3e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d8e:	200f      	movs	r0, #15
 8000d90:	f7ff feec 	bl	8000b6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d94:	f7ff fdf4 	bl	8000980 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40023c00 	.word	0x40023c00

08000da4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da8:	4b06      	ldr	r3, [pc, #24]	@ (8000dc4 <HAL_IncTick+0x20>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	461a      	mov	r2, r3
 8000dae:	4b06      	ldr	r3, [pc, #24]	@ (8000dc8 <HAL_IncTick+0x24>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4413      	add	r3, r2
 8000db4:	4a04      	ldr	r2, [pc, #16]	@ (8000dc8 <HAL_IncTick+0x24>)
 8000db6:	6013      	str	r3, [r2, #0]
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	20000010 	.word	0x20000010
 8000dc8:	20000188 	.word	0x20000188

08000dcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd0:	4b03      	ldr	r3, [pc, #12]	@ (8000de0 <HAL_GetTick+0x14>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	20000188 	.word	0x20000188

08000de4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f003 0307 	and.w	r3, r3, #7
 8000df2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df4:	4b0c      	ldr	r3, [pc, #48]	@ (8000e28 <__NVIC_SetPriorityGrouping+0x44>)
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dfa:	68ba      	ldr	r2, [r7, #8]
 8000dfc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e00:	4013      	ands	r3, r2
 8000e02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e16:	4a04      	ldr	r2, [pc, #16]	@ (8000e28 <__NVIC_SetPriorityGrouping+0x44>)
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	60d3      	str	r3, [r2, #12]
}
 8000e1c:	bf00      	nop
 8000e1e:	3714      	adds	r7, #20
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e30:	4b04      	ldr	r3, [pc, #16]	@ (8000e44 <__NVIC_GetPriorityGrouping+0x18>)
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	0a1b      	lsrs	r3, r3, #8
 8000e36:	f003 0307 	and.w	r3, r3, #7
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	db0b      	blt.n	8000e72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	f003 021f 	and.w	r2, r3, #31
 8000e60:	4907      	ldr	r1, [pc, #28]	@ (8000e80 <__NVIC_EnableIRQ+0x38>)
 8000e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e66:	095b      	lsrs	r3, r3, #5
 8000e68:	2001      	movs	r0, #1
 8000e6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e72:	bf00      	nop
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	e000e100 	.word	0xe000e100

08000e84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	6039      	str	r1, [r7, #0]
 8000e8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	db0a      	blt.n	8000eae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	b2da      	uxtb	r2, r3
 8000e9c:	490c      	ldr	r1, [pc, #48]	@ (8000ed0 <__NVIC_SetPriority+0x4c>)
 8000e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea2:	0112      	lsls	r2, r2, #4
 8000ea4:	b2d2      	uxtb	r2, r2
 8000ea6:	440b      	add	r3, r1
 8000ea8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eac:	e00a      	b.n	8000ec4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	4908      	ldr	r1, [pc, #32]	@ (8000ed4 <__NVIC_SetPriority+0x50>)
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	f003 030f 	and.w	r3, r3, #15
 8000eba:	3b04      	subs	r3, #4
 8000ebc:	0112      	lsls	r2, r2, #4
 8000ebe:	b2d2      	uxtb	r2, r2
 8000ec0:	440b      	add	r3, r1
 8000ec2:	761a      	strb	r2, [r3, #24]
}
 8000ec4:	bf00      	nop
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	e000e100 	.word	0xe000e100
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b089      	sub	sp, #36	@ 0x24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	f003 0307 	and.w	r3, r3, #7
 8000eea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	f1c3 0307 	rsb	r3, r3, #7
 8000ef2:	2b04      	cmp	r3, #4
 8000ef4:	bf28      	it	cs
 8000ef6:	2304      	movcs	r3, #4
 8000ef8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	3304      	adds	r3, #4
 8000efe:	2b06      	cmp	r3, #6
 8000f00:	d902      	bls.n	8000f08 <NVIC_EncodePriority+0x30>
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	3b03      	subs	r3, #3
 8000f06:	e000      	b.n	8000f0a <NVIC_EncodePriority+0x32>
 8000f08:	2300      	movs	r3, #0
 8000f0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	43da      	mvns	r2, r3
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	401a      	ands	r2, r3
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f20:	f04f 31ff 	mov.w	r1, #4294967295
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2a:	43d9      	mvns	r1, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f30:	4313      	orrs	r3, r2
         );
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3724      	adds	r7, #36	@ 0x24
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b082      	sub	sp, #8
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f7ff ff4c 	bl	8000de4 <__NVIC_SetPriorityGrouping>
}
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
 8000f60:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f66:	f7ff ff61 	bl	8000e2c <__NVIC_GetPriorityGrouping>
 8000f6a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	68b9      	ldr	r1, [r7, #8]
 8000f70:	6978      	ldr	r0, [r7, #20]
 8000f72:	f7ff ffb1 	bl	8000ed8 <NVIC_EncodePriority>
 8000f76:	4602      	mov	r2, r0
 8000f78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f7c:	4611      	mov	r1, r2
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff ff80 	bl	8000e84 <__NVIC_SetPriority>
}
 8000f84:	bf00      	nop
 8000f86:	3718      	adds	r7, #24
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff ff54 	bl	8000e48 <__NVIC_EnableIRQ>
}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000fb4:	f7ff ff0a 	bl	8000dcc <HAL_GetTick>
 8000fb8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d101      	bne.n	8000fc4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e099      	b.n	80010f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2202      	movs	r2, #2
 8000fc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f022 0201 	bic.w	r2, r2, #1
 8000fe2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fe4:	e00f      	b.n	8001006 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fe6:	f7ff fef1 	bl	8000dcc <HAL_GetTick>
 8000fea:	4602      	mov	r2, r0
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	2b05      	cmp	r3, #5
 8000ff2:	d908      	bls.n	8001006 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2220      	movs	r2, #32
 8000ff8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2203      	movs	r2, #3
 8000ffe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001002:	2303      	movs	r3, #3
 8001004:	e078      	b.n	80010f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f003 0301 	and.w	r3, r3, #1
 8001010:	2b00      	cmp	r3, #0
 8001012:	d1e8      	bne.n	8000fe6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800101c:	697a      	ldr	r2, [r7, #20]
 800101e:	4b38      	ldr	r3, [pc, #224]	@ (8001100 <HAL_DMA_Init+0x158>)
 8001020:	4013      	ands	r3, r2
 8001022:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685a      	ldr	r2, [r3, #4]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001032:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	691b      	ldr	r3, [r3, #16]
 8001038:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800103e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800104a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6a1b      	ldr	r3, [r3, #32]
 8001050:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001052:	697a      	ldr	r2, [r7, #20]
 8001054:	4313      	orrs	r3, r2
 8001056:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800105c:	2b04      	cmp	r3, #4
 800105e:	d107      	bne.n	8001070 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001068:	4313      	orrs	r3, r2
 800106a:	697a      	ldr	r2, [r7, #20]
 800106c:	4313      	orrs	r3, r2
 800106e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	697a      	ldr	r2, [r7, #20]
 8001076:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	f023 0307 	bic.w	r3, r3, #7
 8001086:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800108c:	697a      	ldr	r2, [r7, #20]
 800108e:	4313      	orrs	r3, r2
 8001090:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001096:	2b04      	cmp	r3, #4
 8001098:	d117      	bne.n	80010ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800109e:	697a      	ldr	r2, [r7, #20]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d00e      	beq.n	80010ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f000 fb01 	bl	80016b4 <DMA_CheckFifoParam>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d008      	beq.n	80010ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2240      	movs	r2, #64	@ 0x40
 80010bc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2201      	movs	r2, #1
 80010c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80010c6:	2301      	movs	r3, #1
 80010c8:	e016      	b.n	80010f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	697a      	ldr	r2, [r7, #20]
 80010d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f000 fab8 	bl	8001648 <DMA_CalcBaseAndBitshift>
 80010d8:	4603      	mov	r3, r0
 80010da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010e0:	223f      	movs	r2, #63	@ 0x3f
 80010e2:	409a      	lsls	r2, r3
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2201      	movs	r2, #1
 80010f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80010f6:	2300      	movs	r3, #0
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3718      	adds	r7, #24
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	f010803f 	.word	0xf010803f

08001104 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
 8001110:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001112:	2300      	movs	r3, #0
 8001114:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800111a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001122:	2b01      	cmp	r3, #1
 8001124:	d101      	bne.n	800112a <HAL_DMA_Start_IT+0x26>
 8001126:	2302      	movs	r3, #2
 8001128:	e040      	b.n	80011ac <HAL_DMA_Start_IT+0xa8>
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2201      	movs	r2, #1
 800112e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001138:	b2db      	uxtb	r3, r3
 800113a:	2b01      	cmp	r3, #1
 800113c:	d12f      	bne.n	800119e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	2202      	movs	r2, #2
 8001142:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2200      	movs	r2, #0
 800114a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	68b9      	ldr	r1, [r7, #8]
 8001152:	68f8      	ldr	r0, [r7, #12]
 8001154:	f000 fa4a 	bl	80015ec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800115c:	223f      	movs	r2, #63	@ 0x3f
 800115e:	409a      	lsls	r2, r3
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f042 0216 	orr.w	r2, r2, #22
 8001172:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001178:	2b00      	cmp	r3, #0
 800117a:	d007      	beq.n	800118c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f042 0208 	orr.w	r2, r2, #8
 800118a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f042 0201 	orr.w	r2, r2, #1
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	e005      	b.n	80011aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	2200      	movs	r2, #0
 80011a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80011a6:	2302      	movs	r3, #2
 80011a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80011aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3718      	adds	r7, #24
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011c0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80011c2:	f7ff fe03 	bl	8000dcc <HAL_GetTick>
 80011c6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d008      	beq.n	80011e6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2280      	movs	r2, #128	@ 0x80
 80011d8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e052      	b.n	800128c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f022 0216 	bic.w	r2, r2, #22
 80011f4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	695a      	ldr	r2, [r3, #20]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001204:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120a:	2b00      	cmp	r3, #0
 800120c:	d103      	bne.n	8001216 <HAL_DMA_Abort+0x62>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001212:	2b00      	cmp	r3, #0
 8001214:	d007      	beq.n	8001226 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f022 0208 	bic.w	r2, r2, #8
 8001224:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f022 0201 	bic.w	r2, r2, #1
 8001234:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001236:	e013      	b.n	8001260 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001238:	f7ff fdc8 	bl	8000dcc <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b05      	cmp	r3, #5
 8001244:	d90c      	bls.n	8001260 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2220      	movs	r2, #32
 800124a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2203      	movs	r2, #3
 8001250:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2200      	movs	r2, #0
 8001258:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e015      	b.n	800128c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1e4      	bne.n	8001238 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001272:	223f      	movs	r2, #63	@ 0x3f
 8001274:	409a      	lsls	r2, r3
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2201      	movs	r2, #1
 800127e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2200      	movs	r2, #0
 8001286:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800128a:	2300      	movs	r3, #0
}
 800128c:	4618      	mov	r0, r3
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d004      	beq.n	80012b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2280      	movs	r2, #128	@ 0x80
 80012ac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e00c      	b.n	80012cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2205      	movs	r2, #5
 80012b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f022 0201 	bic.w	r2, r2, #1
 80012c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80012ca:	2300      	movs	r3, #0
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80012e0:	2300      	movs	r3, #0
 80012e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80012e4:	4b8e      	ldr	r3, [pc, #568]	@ (8001520 <HAL_DMA_IRQHandler+0x248>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a8e      	ldr	r2, [pc, #568]	@ (8001524 <HAL_DMA_IRQHandler+0x24c>)
 80012ea:	fba2 2303 	umull	r2, r3, r2, r3
 80012ee:	0a9b      	lsrs	r3, r3, #10
 80012f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001302:	2208      	movs	r2, #8
 8001304:	409a      	lsls	r2, r3
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	4013      	ands	r3, r2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d01a      	beq.n	8001344 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0304 	and.w	r3, r3, #4
 8001318:	2b00      	cmp	r3, #0
 800131a:	d013      	beq.n	8001344 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f022 0204 	bic.w	r2, r2, #4
 800132a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001330:	2208      	movs	r2, #8
 8001332:	409a      	lsls	r2, r3
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800133c:	f043 0201 	orr.w	r2, r3, #1
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001348:	2201      	movs	r2, #1
 800134a:	409a      	lsls	r2, r3
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	4013      	ands	r3, r2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d012      	beq.n	800137a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	695b      	ldr	r3, [r3, #20]
 800135a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800135e:	2b00      	cmp	r3, #0
 8001360:	d00b      	beq.n	800137a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001366:	2201      	movs	r2, #1
 8001368:	409a      	lsls	r2, r3
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001372:	f043 0202 	orr.w	r2, r3, #2
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800137e:	2204      	movs	r2, #4
 8001380:	409a      	lsls	r2, r3
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	4013      	ands	r3, r2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d012      	beq.n	80013b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0302 	and.w	r3, r3, #2
 8001394:	2b00      	cmp	r3, #0
 8001396:	d00b      	beq.n	80013b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800139c:	2204      	movs	r2, #4
 800139e:	409a      	lsls	r2, r3
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013a8:	f043 0204 	orr.w	r2, r3, #4
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013b4:	2210      	movs	r2, #16
 80013b6:	409a      	lsls	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4013      	ands	r3, r2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d043      	beq.n	8001448 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0308 	and.w	r3, r3, #8
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d03c      	beq.n	8001448 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013d2:	2210      	movs	r2, #16
 80013d4:	409a      	lsls	r2, r3
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d018      	beq.n	800141a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d108      	bne.n	8001408 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d024      	beq.n	8001448 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	4798      	blx	r3
 8001406:	e01f      	b.n	8001448 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800140c:	2b00      	cmp	r3, #0
 800140e:	d01b      	beq.n	8001448 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	4798      	blx	r3
 8001418:	e016      	b.n	8001448 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001424:	2b00      	cmp	r3, #0
 8001426:	d107      	bne.n	8001438 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f022 0208 	bic.w	r2, r2, #8
 8001436:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800143c:	2b00      	cmp	r3, #0
 800143e:	d003      	beq.n	8001448 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800144c:	2220      	movs	r2, #32
 800144e:	409a      	lsls	r2, r3
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	4013      	ands	r3, r2
 8001454:	2b00      	cmp	r3, #0
 8001456:	f000 808f 	beq.w	8001578 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0310 	and.w	r3, r3, #16
 8001464:	2b00      	cmp	r3, #0
 8001466:	f000 8087 	beq.w	8001578 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800146e:	2220      	movs	r2, #32
 8001470:	409a      	lsls	r2, r3
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800147c:	b2db      	uxtb	r3, r3
 800147e:	2b05      	cmp	r3, #5
 8001480:	d136      	bne.n	80014f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f022 0216 	bic.w	r2, r2, #22
 8001490:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	695a      	ldr	r2, [r3, #20]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80014a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d103      	bne.n	80014b2 <HAL_DMA_IRQHandler+0x1da>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d007      	beq.n	80014c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f022 0208 	bic.w	r2, r2, #8
 80014c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014c6:	223f      	movs	r2, #63	@ 0x3f
 80014c8:	409a      	lsls	r2, r3
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2201      	movs	r2, #1
 80014d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d07e      	beq.n	80015e4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	4798      	blx	r3
        }
        return;
 80014ee:	e079      	b.n	80015e4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d01d      	beq.n	800153a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d10d      	bne.n	8001528 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001510:	2b00      	cmp	r3, #0
 8001512:	d031      	beq.n	8001578 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	4798      	blx	r3
 800151c:	e02c      	b.n	8001578 <HAL_DMA_IRQHandler+0x2a0>
 800151e:	bf00      	nop
 8001520:	20000008 	.word	0x20000008
 8001524:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800152c:	2b00      	cmp	r3, #0
 800152e:	d023      	beq.n	8001578 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	4798      	blx	r3
 8001538:	e01e      	b.n	8001578 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001544:	2b00      	cmp	r3, #0
 8001546:	d10f      	bne.n	8001568 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f022 0210 	bic.w	r2, r2, #16
 8001556:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2201      	movs	r2, #1
 800155c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800156c:	2b00      	cmp	r3, #0
 800156e:	d003      	beq.n	8001578 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800157c:	2b00      	cmp	r3, #0
 800157e:	d032      	beq.n	80015e6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001584:	f003 0301 	and.w	r3, r3, #1
 8001588:	2b00      	cmp	r3, #0
 800158a:	d022      	beq.n	80015d2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2205      	movs	r2, #5
 8001590:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f022 0201 	bic.w	r2, r2, #1
 80015a2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	3301      	adds	r3, #1
 80015a8:	60bb      	str	r3, [r7, #8]
 80015aa:	697a      	ldr	r2, [r7, #20]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d307      	bcc.n	80015c0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1f2      	bne.n	80015a4 <HAL_DMA_IRQHandler+0x2cc>
 80015be:	e000      	b.n	80015c2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80015c0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2201      	movs	r2, #1
 80015c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d005      	beq.n	80015e6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	4798      	blx	r3
 80015e2:	e000      	b.n	80015e6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80015e4:	bf00      	nop
    }
  }
}
 80015e6:	3718      	adds	r7, #24
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
 80015f8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001608:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	683a      	ldr	r2, [r7, #0]
 8001610:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	2b40      	cmp	r3, #64	@ 0x40
 8001618:	d108      	bne.n	800162c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	68ba      	ldr	r2, [r7, #8]
 8001628:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800162a:	e007      	b.n	800163c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	68ba      	ldr	r2, [r7, #8]
 8001632:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	60da      	str	r2, [r3, #12]
}
 800163c:	bf00      	nop
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	b2db      	uxtb	r3, r3
 8001656:	3b10      	subs	r3, #16
 8001658:	4a14      	ldr	r2, [pc, #80]	@ (80016ac <DMA_CalcBaseAndBitshift+0x64>)
 800165a:	fba2 2303 	umull	r2, r3, r2, r3
 800165e:	091b      	lsrs	r3, r3, #4
 8001660:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001662:	4a13      	ldr	r2, [pc, #76]	@ (80016b0 <DMA_CalcBaseAndBitshift+0x68>)
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4413      	add	r3, r2
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	461a      	mov	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2b03      	cmp	r3, #3
 8001674:	d909      	bls.n	800168a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800167e:	f023 0303 	bic.w	r3, r3, #3
 8001682:	1d1a      	adds	r2, r3, #4
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	659a      	str	r2, [r3, #88]	@ 0x58
 8001688:	e007      	b.n	800169a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001692:	f023 0303 	bic.w	r3, r3, #3
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3714      	adds	r7, #20
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	aaaaaaab 	.word	0xaaaaaaab
 80016b0:	08007128 	.word	0x08007128

080016b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016bc:	2300      	movs	r3, #0
 80016be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d11f      	bne.n	800170e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	2b03      	cmp	r3, #3
 80016d2:	d856      	bhi.n	8001782 <DMA_CheckFifoParam+0xce>
 80016d4:	a201      	add	r2, pc, #4	@ (adr r2, 80016dc <DMA_CheckFifoParam+0x28>)
 80016d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016da:	bf00      	nop
 80016dc:	080016ed 	.word	0x080016ed
 80016e0:	080016ff 	.word	0x080016ff
 80016e4:	080016ed 	.word	0x080016ed
 80016e8:	08001783 	.word	0x08001783
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d046      	beq.n	8001786 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016fc:	e043      	b.n	8001786 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001702:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001706:	d140      	bne.n	800178a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800170c:	e03d      	b.n	800178a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001716:	d121      	bne.n	800175c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	2b03      	cmp	r3, #3
 800171c:	d837      	bhi.n	800178e <DMA_CheckFifoParam+0xda>
 800171e:	a201      	add	r2, pc, #4	@ (adr r2, 8001724 <DMA_CheckFifoParam+0x70>)
 8001720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001724:	08001735 	.word	0x08001735
 8001728:	0800173b 	.word	0x0800173b
 800172c:	08001735 	.word	0x08001735
 8001730:	0800174d 	.word	0x0800174d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	73fb      	strb	r3, [r7, #15]
      break;
 8001738:	e030      	b.n	800179c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800173e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d025      	beq.n	8001792 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800174a:	e022      	b.n	8001792 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001750:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001754:	d11f      	bne.n	8001796 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800175a:	e01c      	b.n	8001796 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	2b02      	cmp	r3, #2
 8001760:	d903      	bls.n	800176a <DMA_CheckFifoParam+0xb6>
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	2b03      	cmp	r3, #3
 8001766:	d003      	beq.n	8001770 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001768:	e018      	b.n	800179c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	73fb      	strb	r3, [r7, #15]
      break;
 800176e:	e015      	b.n	800179c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001774:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d00e      	beq.n	800179a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	73fb      	strb	r3, [r7, #15]
      break;
 8001780:	e00b      	b.n	800179a <DMA_CheckFifoParam+0xe6>
      break;
 8001782:	bf00      	nop
 8001784:	e00a      	b.n	800179c <DMA_CheckFifoParam+0xe8>
      break;
 8001786:	bf00      	nop
 8001788:	e008      	b.n	800179c <DMA_CheckFifoParam+0xe8>
      break;
 800178a:	bf00      	nop
 800178c:	e006      	b.n	800179c <DMA_CheckFifoParam+0xe8>
      break;
 800178e:	bf00      	nop
 8001790:	e004      	b.n	800179c <DMA_CheckFifoParam+0xe8>
      break;
 8001792:	bf00      	nop
 8001794:	e002      	b.n	800179c <DMA_CheckFifoParam+0xe8>
      break;   
 8001796:	bf00      	nop
 8001798:	e000      	b.n	800179c <DMA_CheckFifoParam+0xe8>
      break;
 800179a:	bf00      	nop
    }
  } 
  
  return status; 
 800179c:	7bfb      	ldrb	r3, [r7, #15]
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3714      	adds	r7, #20
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop

080017ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b089      	sub	sp, #36	@ 0x24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017b6:	2300      	movs	r3, #0
 80017b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017ba:	2300      	movs	r3, #0
 80017bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017be:	2300      	movs	r3, #0
 80017c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017c2:	2300      	movs	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]
 80017c6:	e165      	b.n	8001a94 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017c8:	2201      	movs	r2, #1
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	697a      	ldr	r2, [r7, #20]
 80017d8:	4013      	ands	r3, r2
 80017da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017dc:	693a      	ldr	r2, [r7, #16]
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	f040 8154 	bne.w	8001a8e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f003 0303 	and.w	r3, r3, #3
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d005      	beq.n	80017fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d130      	bne.n	8001860 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	2203      	movs	r2, #3
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	43db      	mvns	r3, r3
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	4013      	ands	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	68da      	ldr	r2, [r3, #12]
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	4313      	orrs	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001834:	2201      	movs	r2, #1
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	43db      	mvns	r3, r3
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	4013      	ands	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	091b      	lsrs	r3, r3, #4
 800184a:	f003 0201 	and.w	r2, r3, #1
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	4313      	orrs	r3, r2
 8001858:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f003 0303 	and.w	r3, r3, #3
 8001868:	2b03      	cmp	r3, #3
 800186a:	d017      	beq.n	800189c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	2203      	movs	r2, #3
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	43db      	mvns	r3, r3
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4013      	ands	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	689a      	ldr	r2, [r3, #8]
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4313      	orrs	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f003 0303 	and.w	r3, r3, #3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d123      	bne.n	80018f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	08da      	lsrs	r2, r3, #3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	3208      	adds	r2, #8
 80018b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	f003 0307 	and.w	r3, r3, #7
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	220f      	movs	r2, #15
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	43db      	mvns	r3, r3
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	4013      	ands	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	691a      	ldr	r2, [r3, #16]
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	4313      	orrs	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	08da      	lsrs	r2, r3, #3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	3208      	adds	r2, #8
 80018ea:	69b9      	ldr	r1, [r7, #24]
 80018ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	2203      	movs	r2, #3
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	43db      	mvns	r3, r3
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	4013      	ands	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f003 0203 	and.w	r2, r3, #3
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	4313      	orrs	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800192c:	2b00      	cmp	r3, #0
 800192e:	f000 80ae 	beq.w	8001a8e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	4b5d      	ldr	r3, [pc, #372]	@ (8001aac <HAL_GPIO_Init+0x300>)
 8001938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800193a:	4a5c      	ldr	r2, [pc, #368]	@ (8001aac <HAL_GPIO_Init+0x300>)
 800193c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001940:	6453      	str	r3, [r2, #68]	@ 0x44
 8001942:	4b5a      	ldr	r3, [pc, #360]	@ (8001aac <HAL_GPIO_Init+0x300>)
 8001944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001946:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800194e:	4a58      	ldr	r2, [pc, #352]	@ (8001ab0 <HAL_GPIO_Init+0x304>)
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	089b      	lsrs	r3, r3, #2
 8001954:	3302      	adds	r3, #2
 8001956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800195a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	f003 0303 	and.w	r3, r3, #3
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	220f      	movs	r2, #15
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	43db      	mvns	r3, r3
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	4013      	ands	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a4f      	ldr	r2, [pc, #316]	@ (8001ab4 <HAL_GPIO_Init+0x308>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d025      	beq.n	80019c6 <HAL_GPIO_Init+0x21a>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a4e      	ldr	r2, [pc, #312]	@ (8001ab8 <HAL_GPIO_Init+0x30c>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d01f      	beq.n	80019c2 <HAL_GPIO_Init+0x216>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a4d      	ldr	r2, [pc, #308]	@ (8001abc <HAL_GPIO_Init+0x310>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d019      	beq.n	80019be <HAL_GPIO_Init+0x212>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a4c      	ldr	r2, [pc, #304]	@ (8001ac0 <HAL_GPIO_Init+0x314>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d013      	beq.n	80019ba <HAL_GPIO_Init+0x20e>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a4b      	ldr	r2, [pc, #300]	@ (8001ac4 <HAL_GPIO_Init+0x318>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d00d      	beq.n	80019b6 <HAL_GPIO_Init+0x20a>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a4a      	ldr	r2, [pc, #296]	@ (8001ac8 <HAL_GPIO_Init+0x31c>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d007      	beq.n	80019b2 <HAL_GPIO_Init+0x206>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a49      	ldr	r2, [pc, #292]	@ (8001acc <HAL_GPIO_Init+0x320>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d101      	bne.n	80019ae <HAL_GPIO_Init+0x202>
 80019aa:	2306      	movs	r3, #6
 80019ac:	e00c      	b.n	80019c8 <HAL_GPIO_Init+0x21c>
 80019ae:	2307      	movs	r3, #7
 80019b0:	e00a      	b.n	80019c8 <HAL_GPIO_Init+0x21c>
 80019b2:	2305      	movs	r3, #5
 80019b4:	e008      	b.n	80019c8 <HAL_GPIO_Init+0x21c>
 80019b6:	2304      	movs	r3, #4
 80019b8:	e006      	b.n	80019c8 <HAL_GPIO_Init+0x21c>
 80019ba:	2303      	movs	r3, #3
 80019bc:	e004      	b.n	80019c8 <HAL_GPIO_Init+0x21c>
 80019be:	2302      	movs	r3, #2
 80019c0:	e002      	b.n	80019c8 <HAL_GPIO_Init+0x21c>
 80019c2:	2301      	movs	r3, #1
 80019c4:	e000      	b.n	80019c8 <HAL_GPIO_Init+0x21c>
 80019c6:	2300      	movs	r3, #0
 80019c8:	69fa      	ldr	r2, [r7, #28]
 80019ca:	f002 0203 	and.w	r2, r2, #3
 80019ce:	0092      	lsls	r2, r2, #2
 80019d0:	4093      	lsls	r3, r2
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019d8:	4935      	ldr	r1, [pc, #212]	@ (8001ab0 <HAL_GPIO_Init+0x304>)
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	089b      	lsrs	r3, r3, #2
 80019de:	3302      	adds	r3, #2
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019e6:	4b3a      	ldr	r3, [pc, #232]	@ (8001ad0 <HAL_GPIO_Init+0x324>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	43db      	mvns	r3, r3
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	4013      	ands	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d003      	beq.n	8001a0a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a0a:	4a31      	ldr	r2, [pc, #196]	@ (8001ad0 <HAL_GPIO_Init+0x324>)
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a10:	4b2f      	ldr	r3, [pc, #188]	@ (8001ad0 <HAL_GPIO_Init+0x324>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d003      	beq.n	8001a34 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a34:	4a26      	ldr	r2, [pc, #152]	@ (8001ad0 <HAL_GPIO_Init+0x324>)
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a3a:	4b25      	ldr	r3, [pc, #148]	@ (8001ad0 <HAL_GPIO_Init+0x324>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	43db      	mvns	r3, r3
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	4013      	ands	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d003      	beq.n	8001a5e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a5e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ad0 <HAL_GPIO_Init+0x324>)
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a64:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad0 <HAL_GPIO_Init+0x324>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	4013      	ands	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d003      	beq.n	8001a88 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a88:	4a11      	ldr	r2, [pc, #68]	@ (8001ad0 <HAL_GPIO_Init+0x324>)
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	3301      	adds	r3, #1
 8001a92:	61fb      	str	r3, [r7, #28]
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	2b0f      	cmp	r3, #15
 8001a98:	f67f ae96 	bls.w	80017c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a9c:	bf00      	nop
 8001a9e:	bf00      	nop
 8001aa0:	3724      	adds	r7, #36	@ 0x24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	40013800 	.word	0x40013800
 8001ab4:	40020000 	.word	0x40020000
 8001ab8:	40020400 	.word	0x40020400
 8001abc:	40020800 	.word	0x40020800
 8001ac0:	40020c00 	.word	0x40020c00
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	40021400 	.word	0x40021400
 8001acc:	40021800 	.word	0x40021800
 8001ad0:	40013c00 	.word	0x40013c00

08001ad4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	460b      	mov	r3, r1
 8001ade:	807b      	strh	r3, [r7, #2]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ae4:	787b      	ldrb	r3, [r7, #1]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d003      	beq.n	8001af2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aea:	887a      	ldrh	r2, [r7, #2]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001af0:	e003      	b.n	8001afa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001af2:	887b      	ldrh	r3, [r7, #2]
 8001af4:	041a      	lsls	r2, r3, #16
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	619a      	str	r2, [r3, #24]
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
	...

08001b08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001b12:	4b08      	ldr	r3, [pc, #32]	@ (8001b34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b14:	695a      	ldr	r2, [r3, #20]
 8001b16:	88fb      	ldrh	r3, [r7, #6]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d006      	beq.n	8001b2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b1e:	4a05      	ldr	r2, [pc, #20]	@ (8001b34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b20:	88fb      	ldrh	r3, [r7, #6]
 8001b22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b24:	88fb      	ldrh	r3, [r7, #6]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7fe fcf8 	bl	800051c <HAL_GPIO_EXTI_Callback>
  }
}
 8001b2c:	bf00      	nop
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40013c00 	.word	0x40013c00

08001b38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e12b      	b.n	8001da2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d106      	bne.n	8001b64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7fe ff3a 	bl	80009d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2224      	movs	r2, #36	@ 0x24
 8001b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f022 0201 	bic.w	r2, r2, #1
 8001b7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b9c:	f000 fa02 	bl	8001fa4 <HAL_RCC_GetPCLK1Freq>
 8001ba0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	4a81      	ldr	r2, [pc, #516]	@ (8001dac <HAL_I2C_Init+0x274>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d807      	bhi.n	8001bbc <HAL_I2C_Init+0x84>
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4a80      	ldr	r2, [pc, #512]	@ (8001db0 <HAL_I2C_Init+0x278>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	bf94      	ite	ls
 8001bb4:	2301      	movls	r3, #1
 8001bb6:	2300      	movhi	r3, #0
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	e006      	b.n	8001bca <HAL_I2C_Init+0x92>
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4a7d      	ldr	r2, [pc, #500]	@ (8001db4 <HAL_I2C_Init+0x27c>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	bf94      	ite	ls
 8001bc4:	2301      	movls	r3, #1
 8001bc6:	2300      	movhi	r3, #0
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e0e7      	b.n	8001da2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	4a78      	ldr	r2, [pc, #480]	@ (8001db8 <HAL_I2C_Init+0x280>)
 8001bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bda:	0c9b      	lsrs	r3, r3, #18
 8001bdc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	68ba      	ldr	r2, [r7, #8]
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6a1b      	ldr	r3, [r3, #32]
 8001bf8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	4a6a      	ldr	r2, [pc, #424]	@ (8001dac <HAL_I2C_Init+0x274>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d802      	bhi.n	8001c0c <HAL_I2C_Init+0xd4>
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	e009      	b.n	8001c20 <HAL_I2C_Init+0xe8>
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001c12:	fb02 f303 	mul.w	r3, r2, r3
 8001c16:	4a69      	ldr	r2, [pc, #420]	@ (8001dbc <HAL_I2C_Init+0x284>)
 8001c18:	fba2 2303 	umull	r2, r3, r2, r3
 8001c1c:	099b      	lsrs	r3, r3, #6
 8001c1e:	3301      	adds	r3, #1
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	6812      	ldr	r2, [r2, #0]
 8001c24:	430b      	orrs	r3, r1
 8001c26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001c32:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	495c      	ldr	r1, [pc, #368]	@ (8001dac <HAL_I2C_Init+0x274>)
 8001c3c:	428b      	cmp	r3, r1
 8001c3e:	d819      	bhi.n	8001c74 <HAL_I2C_Init+0x13c>
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	1e59      	subs	r1, r3, #1
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c4e:	1c59      	adds	r1, r3, #1
 8001c50:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001c54:	400b      	ands	r3, r1
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d00a      	beq.n	8001c70 <HAL_I2C_Init+0x138>
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	1e59      	subs	r1, r3, #1
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c68:	3301      	adds	r3, #1
 8001c6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c6e:	e051      	b.n	8001d14 <HAL_I2C_Init+0x1dc>
 8001c70:	2304      	movs	r3, #4
 8001c72:	e04f      	b.n	8001d14 <HAL_I2C_Init+0x1dc>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d111      	bne.n	8001ca0 <HAL_I2C_Init+0x168>
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	1e58      	subs	r0, r3, #1
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6859      	ldr	r1, [r3, #4]
 8001c84:	460b      	mov	r3, r1
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	440b      	add	r3, r1
 8001c8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c8e:	3301      	adds	r3, #1
 8001c90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	bf0c      	ite	eq
 8001c98:	2301      	moveq	r3, #1
 8001c9a:	2300      	movne	r3, #0
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	e012      	b.n	8001cc6 <HAL_I2C_Init+0x18e>
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	1e58      	subs	r0, r3, #1
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6859      	ldr	r1, [r3, #4]
 8001ca8:	460b      	mov	r3, r1
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	440b      	add	r3, r1
 8001cae:	0099      	lsls	r1, r3, #2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	bf0c      	ite	eq
 8001cc0:	2301      	moveq	r3, #1
 8001cc2:	2300      	movne	r3, #0
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <HAL_I2C_Init+0x196>
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e022      	b.n	8001d14 <HAL_I2C_Init+0x1dc>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d10e      	bne.n	8001cf4 <HAL_I2C_Init+0x1bc>
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	1e58      	subs	r0, r3, #1
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6859      	ldr	r1, [r3, #4]
 8001cde:	460b      	mov	r3, r1
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	440b      	add	r3, r1
 8001ce4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ce8:	3301      	adds	r3, #1
 8001cea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cf2:	e00f      	b.n	8001d14 <HAL_I2C_Init+0x1dc>
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	1e58      	subs	r0, r3, #1
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6859      	ldr	r1, [r3, #4]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	440b      	add	r3, r1
 8001d02:	0099      	lsls	r1, r3, #2
 8001d04:	440b      	add	r3, r1
 8001d06:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d10:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001d14:	6879      	ldr	r1, [r7, #4]
 8001d16:	6809      	ldr	r1, [r1, #0]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	69da      	ldr	r2, [r3, #28]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a1b      	ldr	r3, [r3, #32]
 8001d2e:	431a      	orrs	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	430a      	orrs	r2, r1
 8001d36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001d42:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	6911      	ldr	r1, [r2, #16]
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	68d2      	ldr	r2, [r2, #12]
 8001d4e:	4311      	orrs	r1, r2
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	6812      	ldr	r2, [r2, #0]
 8001d54:	430b      	orrs	r3, r1
 8001d56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	695a      	ldr	r2, [r3, #20]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	431a      	orrs	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	430a      	orrs	r2, r1
 8001d72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f042 0201 	orr.w	r2, r2, #1
 8001d82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2220      	movs	r2, #32
 8001d8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	000186a0 	.word	0x000186a0
 8001db0:	001e847f 	.word	0x001e847f
 8001db4:	003d08ff 	.word	0x003d08ff
 8001db8:	431bde83 	.word	0x431bde83
 8001dbc:	10624dd3 	.word	0x10624dd3

08001dc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d101      	bne.n	8001dd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e0cc      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dd4:	4b68      	ldr	r3, [pc, #416]	@ (8001f78 <HAL_RCC_ClockConfig+0x1b8>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 030f 	and.w	r3, r3, #15
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d90c      	bls.n	8001dfc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001de2:	4b65      	ldr	r3, [pc, #404]	@ (8001f78 <HAL_RCC_ClockConfig+0x1b8>)
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	b2d2      	uxtb	r2, r2
 8001de8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dea:	4b63      	ldr	r3, [pc, #396]	@ (8001f78 <HAL_RCC_ClockConfig+0x1b8>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 030f 	and.w	r3, r3, #15
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d001      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e0b8      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d020      	beq.n	8001e4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0304 	and.w	r3, r3, #4
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d005      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e14:	4b59      	ldr	r3, [pc, #356]	@ (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	4a58      	ldr	r2, [pc, #352]	@ (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e1a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001e1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0308 	and.w	r3, r3, #8
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d005      	beq.n	8001e38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e2c:	4b53      	ldr	r3, [pc, #332]	@ (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	4a52      	ldr	r2, [pc, #328]	@ (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e32:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001e36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e38:	4b50      	ldr	r3, [pc, #320]	@ (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	494d      	ldr	r1, [pc, #308]	@ (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d044      	beq.n	8001ee0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d107      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5e:	4b47      	ldr	r3, [pc, #284]	@ (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d119      	bne.n	8001e9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e07f      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d003      	beq.n	8001e7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e7a:	2b03      	cmp	r3, #3
 8001e7c:	d107      	bne.n	8001e8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e7e:	4b3f      	ldr	r3, [pc, #252]	@ (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d109      	bne.n	8001e9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e06f      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e8e:	4b3b      	ldr	r3, [pc, #236]	@ (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e067      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e9e:	4b37      	ldr	r3, [pc, #220]	@ (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f023 0203 	bic.w	r2, r3, #3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	4934      	ldr	r1, [pc, #208]	@ (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001eb0:	f7fe ff8c 	bl	8000dcc <HAL_GetTick>
 8001eb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eb6:	e00a      	b.n	8001ece <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eb8:	f7fe ff88 	bl	8000dcc <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e04f      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ece:	4b2b      	ldr	r3, [pc, #172]	@ (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f003 020c 	and.w	r2, r3, #12
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d1eb      	bne.n	8001eb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ee0:	4b25      	ldr	r3, [pc, #148]	@ (8001f78 <HAL_RCC_ClockConfig+0x1b8>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 030f 	and.w	r3, r3, #15
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d20c      	bcs.n	8001f08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eee:	4b22      	ldr	r3, [pc, #136]	@ (8001f78 <HAL_RCC_ClockConfig+0x1b8>)
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	b2d2      	uxtb	r2, r2
 8001ef4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef6:	4b20      	ldr	r3, [pc, #128]	@ (8001f78 <HAL_RCC_ClockConfig+0x1b8>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d001      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e032      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0304 	and.w	r3, r3, #4
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d008      	beq.n	8001f26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f14:	4b19      	ldr	r3, [pc, #100]	@ (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	4916      	ldr	r1, [pc, #88]	@ (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0308 	and.w	r3, r3, #8
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d009      	beq.n	8001f46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f32:	4b12      	ldr	r3, [pc, #72]	@ (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	490e      	ldr	r1, [pc, #56]	@ (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f46:	f000 f887 	bl	8002058 <HAL_RCC_GetSysClockFreq>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	091b      	lsrs	r3, r3, #4
 8001f52:	f003 030f 	and.w	r3, r3, #15
 8001f56:	490a      	ldr	r1, [pc, #40]	@ (8001f80 <HAL_RCC_ClockConfig+0x1c0>)
 8001f58:	5ccb      	ldrb	r3, [r1, r3]
 8001f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f5e:	4a09      	ldr	r2, [pc, #36]	@ (8001f84 <HAL_RCC_ClockConfig+0x1c4>)
 8001f60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f62:	4b09      	ldr	r3, [pc, #36]	@ (8001f88 <HAL_RCC_ClockConfig+0x1c8>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7fe fe00 	bl	8000b6c <HAL_InitTick>

  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40023c00 	.word	0x40023c00
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	08007110 	.word	0x08007110
 8001f84:	20000008 	.word	0x20000008
 8001f88:	2000000c 	.word	0x2000000c

08001f8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f90:	4b03      	ldr	r3, [pc, #12]	@ (8001fa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f92:	681b      	ldr	r3, [r3, #0]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	20000008 	.word	0x20000008

08001fa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001fa8:	f7ff fff0 	bl	8001f8c <HAL_RCC_GetHCLKFreq>
 8001fac:	4602      	mov	r2, r0
 8001fae:	4b05      	ldr	r3, [pc, #20]	@ (8001fc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	0a9b      	lsrs	r3, r3, #10
 8001fb4:	f003 0307 	and.w	r3, r3, #7
 8001fb8:	4903      	ldr	r1, [pc, #12]	@ (8001fc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fba:	5ccb      	ldrb	r3, [r1, r3]
 8001fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	08007120 	.word	0x08007120

08001fcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001fd0:	f7ff ffdc 	bl	8001f8c <HAL_RCC_GetHCLKFreq>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	4b05      	ldr	r3, [pc, #20]	@ (8001fec <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	0b5b      	lsrs	r3, r3, #13
 8001fdc:	f003 0307 	and.w	r3, r3, #7
 8001fe0:	4903      	ldr	r1, [pc, #12]	@ (8001ff0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fe2:	5ccb      	ldrb	r3, [r1, r3]
 8001fe4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	08007120 	.word	0x08007120

08001ff4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	220f      	movs	r2, #15
 8002002:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002004:	4b12      	ldr	r3, [pc, #72]	@ (8002050 <HAL_RCC_GetClockConfig+0x5c>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f003 0203 	and.w	r2, r3, #3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002010:	4b0f      	ldr	r3, [pc, #60]	@ (8002050 <HAL_RCC_GetClockConfig+0x5c>)
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800201c:	4b0c      	ldr	r3, [pc, #48]	@ (8002050 <HAL_RCC_GetClockConfig+0x5c>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002028:	4b09      	ldr	r3, [pc, #36]	@ (8002050 <HAL_RCC_GetClockConfig+0x5c>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	08db      	lsrs	r3, r3, #3
 800202e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002036:	4b07      	ldr	r3, [pc, #28]	@ (8002054 <HAL_RCC_GetClockConfig+0x60>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 020f 	and.w	r2, r3, #15
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	601a      	str	r2, [r3, #0]
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	40023800 	.word	0x40023800
 8002054:	40023c00 	.word	0x40023c00

08002058 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002058:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800205c:	b0ae      	sub	sp, #184	@ 0xb8
 800205e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002060:	2300      	movs	r3, #0
 8002062:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002066:	2300      	movs	r3, #0
 8002068:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800206c:	2300      	movs	r3, #0
 800206e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002072:	2300      	movs	r3, #0
 8002074:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002078:	2300      	movs	r3, #0
 800207a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800207e:	4bcb      	ldr	r3, [pc, #812]	@ (80023ac <HAL_RCC_GetSysClockFreq+0x354>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f003 030c 	and.w	r3, r3, #12
 8002086:	2b0c      	cmp	r3, #12
 8002088:	f200 8206 	bhi.w	8002498 <HAL_RCC_GetSysClockFreq+0x440>
 800208c:	a201      	add	r2, pc, #4	@ (adr r2, 8002094 <HAL_RCC_GetSysClockFreq+0x3c>)
 800208e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002092:	bf00      	nop
 8002094:	080020c9 	.word	0x080020c9
 8002098:	08002499 	.word	0x08002499
 800209c:	08002499 	.word	0x08002499
 80020a0:	08002499 	.word	0x08002499
 80020a4:	080020d1 	.word	0x080020d1
 80020a8:	08002499 	.word	0x08002499
 80020ac:	08002499 	.word	0x08002499
 80020b0:	08002499 	.word	0x08002499
 80020b4:	080020d9 	.word	0x080020d9
 80020b8:	08002499 	.word	0x08002499
 80020bc:	08002499 	.word	0x08002499
 80020c0:	08002499 	.word	0x08002499
 80020c4:	080022c9 	.word	0x080022c9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020c8:	4bb9      	ldr	r3, [pc, #740]	@ (80023b0 <HAL_RCC_GetSysClockFreq+0x358>)
 80020ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 80020ce:	e1e7      	b.n	80024a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020d0:	4bb8      	ldr	r3, [pc, #736]	@ (80023b4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80020d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80020d6:	e1e3      	b.n	80024a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020d8:	4bb4      	ldr	r3, [pc, #720]	@ (80023ac <HAL_RCC_GetSysClockFreq+0x354>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80020e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020e4:	4bb1      	ldr	r3, [pc, #708]	@ (80023ac <HAL_RCC_GetSysClockFreq+0x354>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d071      	beq.n	80021d4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020f0:	4bae      	ldr	r3, [pc, #696]	@ (80023ac <HAL_RCC_GetSysClockFreq+0x354>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	099b      	lsrs	r3, r3, #6
 80020f6:	2200      	movs	r2, #0
 80020f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80020fc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002100:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002104:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002108:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800210c:	2300      	movs	r3, #0
 800210e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002112:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002116:	4622      	mov	r2, r4
 8002118:	462b      	mov	r3, r5
 800211a:	f04f 0000 	mov.w	r0, #0
 800211e:	f04f 0100 	mov.w	r1, #0
 8002122:	0159      	lsls	r1, r3, #5
 8002124:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002128:	0150      	lsls	r0, r2, #5
 800212a:	4602      	mov	r2, r0
 800212c:	460b      	mov	r3, r1
 800212e:	4621      	mov	r1, r4
 8002130:	1a51      	subs	r1, r2, r1
 8002132:	6439      	str	r1, [r7, #64]	@ 0x40
 8002134:	4629      	mov	r1, r5
 8002136:	eb63 0301 	sbc.w	r3, r3, r1
 800213a:	647b      	str	r3, [r7, #68]	@ 0x44
 800213c:	f04f 0200 	mov.w	r2, #0
 8002140:	f04f 0300 	mov.w	r3, #0
 8002144:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002148:	4649      	mov	r1, r9
 800214a:	018b      	lsls	r3, r1, #6
 800214c:	4641      	mov	r1, r8
 800214e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002152:	4641      	mov	r1, r8
 8002154:	018a      	lsls	r2, r1, #6
 8002156:	4641      	mov	r1, r8
 8002158:	1a51      	subs	r1, r2, r1
 800215a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800215c:	4649      	mov	r1, r9
 800215e:	eb63 0301 	sbc.w	r3, r3, r1
 8002162:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002164:	f04f 0200 	mov.w	r2, #0
 8002168:	f04f 0300 	mov.w	r3, #0
 800216c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002170:	4649      	mov	r1, r9
 8002172:	00cb      	lsls	r3, r1, #3
 8002174:	4641      	mov	r1, r8
 8002176:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800217a:	4641      	mov	r1, r8
 800217c:	00ca      	lsls	r2, r1, #3
 800217e:	4610      	mov	r0, r2
 8002180:	4619      	mov	r1, r3
 8002182:	4603      	mov	r3, r0
 8002184:	4622      	mov	r2, r4
 8002186:	189b      	adds	r3, r3, r2
 8002188:	633b      	str	r3, [r7, #48]	@ 0x30
 800218a:	462b      	mov	r3, r5
 800218c:	460a      	mov	r2, r1
 800218e:	eb42 0303 	adc.w	r3, r2, r3
 8002192:	637b      	str	r3, [r7, #52]	@ 0x34
 8002194:	f04f 0200 	mov.w	r2, #0
 8002198:	f04f 0300 	mov.w	r3, #0
 800219c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80021a0:	4629      	mov	r1, r5
 80021a2:	024b      	lsls	r3, r1, #9
 80021a4:	4621      	mov	r1, r4
 80021a6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80021aa:	4621      	mov	r1, r4
 80021ac:	024a      	lsls	r2, r1, #9
 80021ae:	4610      	mov	r0, r2
 80021b0:	4619      	mov	r1, r3
 80021b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80021b6:	2200      	movs	r2, #0
 80021b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80021bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80021c0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80021c4:	f7fe f824 	bl	8000210 <__aeabi_uldivmod>
 80021c8:	4602      	mov	r2, r0
 80021ca:	460b      	mov	r3, r1
 80021cc:	4613      	mov	r3, r2
 80021ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80021d2:	e067      	b.n	80022a4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021d4:	4b75      	ldr	r3, [pc, #468]	@ (80023ac <HAL_RCC_GetSysClockFreq+0x354>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	099b      	lsrs	r3, r3, #6
 80021da:	2200      	movs	r2, #0
 80021dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80021e0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80021e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80021e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021ec:	67bb      	str	r3, [r7, #120]	@ 0x78
 80021ee:	2300      	movs	r3, #0
 80021f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80021f2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80021f6:	4622      	mov	r2, r4
 80021f8:	462b      	mov	r3, r5
 80021fa:	f04f 0000 	mov.w	r0, #0
 80021fe:	f04f 0100 	mov.w	r1, #0
 8002202:	0159      	lsls	r1, r3, #5
 8002204:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002208:	0150      	lsls	r0, r2, #5
 800220a:	4602      	mov	r2, r0
 800220c:	460b      	mov	r3, r1
 800220e:	4621      	mov	r1, r4
 8002210:	1a51      	subs	r1, r2, r1
 8002212:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002214:	4629      	mov	r1, r5
 8002216:	eb63 0301 	sbc.w	r3, r3, r1
 800221a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800221c:	f04f 0200 	mov.w	r2, #0
 8002220:	f04f 0300 	mov.w	r3, #0
 8002224:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002228:	4649      	mov	r1, r9
 800222a:	018b      	lsls	r3, r1, #6
 800222c:	4641      	mov	r1, r8
 800222e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002232:	4641      	mov	r1, r8
 8002234:	018a      	lsls	r2, r1, #6
 8002236:	4641      	mov	r1, r8
 8002238:	ebb2 0a01 	subs.w	sl, r2, r1
 800223c:	4649      	mov	r1, r9
 800223e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002242:	f04f 0200 	mov.w	r2, #0
 8002246:	f04f 0300 	mov.w	r3, #0
 800224a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800224e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002252:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002256:	4692      	mov	sl, r2
 8002258:	469b      	mov	fp, r3
 800225a:	4623      	mov	r3, r4
 800225c:	eb1a 0303 	adds.w	r3, sl, r3
 8002260:	623b      	str	r3, [r7, #32]
 8002262:	462b      	mov	r3, r5
 8002264:	eb4b 0303 	adc.w	r3, fp, r3
 8002268:	627b      	str	r3, [r7, #36]	@ 0x24
 800226a:	f04f 0200 	mov.w	r2, #0
 800226e:	f04f 0300 	mov.w	r3, #0
 8002272:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002276:	4629      	mov	r1, r5
 8002278:	028b      	lsls	r3, r1, #10
 800227a:	4621      	mov	r1, r4
 800227c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002280:	4621      	mov	r1, r4
 8002282:	028a      	lsls	r2, r1, #10
 8002284:	4610      	mov	r0, r2
 8002286:	4619      	mov	r1, r3
 8002288:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800228c:	2200      	movs	r2, #0
 800228e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002290:	677a      	str	r2, [r7, #116]	@ 0x74
 8002292:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002296:	f7fd ffbb 	bl	8000210 <__aeabi_uldivmod>
 800229a:	4602      	mov	r2, r0
 800229c:	460b      	mov	r3, r1
 800229e:	4613      	mov	r3, r2
 80022a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022a4:	4b41      	ldr	r3, [pc, #260]	@ (80023ac <HAL_RCC_GetSysClockFreq+0x354>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	0c1b      	lsrs	r3, r3, #16
 80022aa:	f003 0303 	and.w	r3, r3, #3
 80022ae:	3301      	adds	r3, #1
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 80022b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80022ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80022be:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80022c6:	e0eb      	b.n	80024a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022c8:	4b38      	ldr	r3, [pc, #224]	@ (80023ac <HAL_RCC_GetSysClockFreq+0x354>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80022d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022d4:	4b35      	ldr	r3, [pc, #212]	@ (80023ac <HAL_RCC_GetSysClockFreq+0x354>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d06b      	beq.n	80023b8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022e0:	4b32      	ldr	r3, [pc, #200]	@ (80023ac <HAL_RCC_GetSysClockFreq+0x354>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	099b      	lsrs	r3, r3, #6
 80022e6:	2200      	movs	r2, #0
 80022e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80022ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80022ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80022ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022f2:	663b      	str	r3, [r7, #96]	@ 0x60
 80022f4:	2300      	movs	r3, #0
 80022f6:	667b      	str	r3, [r7, #100]	@ 0x64
 80022f8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80022fc:	4622      	mov	r2, r4
 80022fe:	462b      	mov	r3, r5
 8002300:	f04f 0000 	mov.w	r0, #0
 8002304:	f04f 0100 	mov.w	r1, #0
 8002308:	0159      	lsls	r1, r3, #5
 800230a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800230e:	0150      	lsls	r0, r2, #5
 8002310:	4602      	mov	r2, r0
 8002312:	460b      	mov	r3, r1
 8002314:	4621      	mov	r1, r4
 8002316:	1a51      	subs	r1, r2, r1
 8002318:	61b9      	str	r1, [r7, #24]
 800231a:	4629      	mov	r1, r5
 800231c:	eb63 0301 	sbc.w	r3, r3, r1
 8002320:	61fb      	str	r3, [r7, #28]
 8002322:	f04f 0200 	mov.w	r2, #0
 8002326:	f04f 0300 	mov.w	r3, #0
 800232a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800232e:	4659      	mov	r1, fp
 8002330:	018b      	lsls	r3, r1, #6
 8002332:	4651      	mov	r1, sl
 8002334:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002338:	4651      	mov	r1, sl
 800233a:	018a      	lsls	r2, r1, #6
 800233c:	4651      	mov	r1, sl
 800233e:	ebb2 0801 	subs.w	r8, r2, r1
 8002342:	4659      	mov	r1, fp
 8002344:	eb63 0901 	sbc.w	r9, r3, r1
 8002348:	f04f 0200 	mov.w	r2, #0
 800234c:	f04f 0300 	mov.w	r3, #0
 8002350:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002354:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002358:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800235c:	4690      	mov	r8, r2
 800235e:	4699      	mov	r9, r3
 8002360:	4623      	mov	r3, r4
 8002362:	eb18 0303 	adds.w	r3, r8, r3
 8002366:	613b      	str	r3, [r7, #16]
 8002368:	462b      	mov	r3, r5
 800236a:	eb49 0303 	adc.w	r3, r9, r3
 800236e:	617b      	str	r3, [r7, #20]
 8002370:	f04f 0200 	mov.w	r2, #0
 8002374:	f04f 0300 	mov.w	r3, #0
 8002378:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800237c:	4629      	mov	r1, r5
 800237e:	024b      	lsls	r3, r1, #9
 8002380:	4621      	mov	r1, r4
 8002382:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002386:	4621      	mov	r1, r4
 8002388:	024a      	lsls	r2, r1, #9
 800238a:	4610      	mov	r0, r2
 800238c:	4619      	mov	r1, r3
 800238e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002392:	2200      	movs	r2, #0
 8002394:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002396:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002398:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800239c:	f7fd ff38 	bl	8000210 <__aeabi_uldivmod>
 80023a0:	4602      	mov	r2, r0
 80023a2:	460b      	mov	r3, r1
 80023a4:	4613      	mov	r3, r2
 80023a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80023aa:	e065      	b.n	8002478 <HAL_RCC_GetSysClockFreq+0x420>
 80023ac:	40023800 	.word	0x40023800
 80023b0:	00f42400 	.word	0x00f42400
 80023b4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023b8:	4b3d      	ldr	r3, [pc, #244]	@ (80024b0 <HAL_RCC_GetSysClockFreq+0x458>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	099b      	lsrs	r3, r3, #6
 80023be:	2200      	movs	r2, #0
 80023c0:	4618      	mov	r0, r3
 80023c2:	4611      	mov	r1, r2
 80023c4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80023c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80023ca:	2300      	movs	r3, #0
 80023cc:	657b      	str	r3, [r7, #84]	@ 0x54
 80023ce:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80023d2:	4642      	mov	r2, r8
 80023d4:	464b      	mov	r3, r9
 80023d6:	f04f 0000 	mov.w	r0, #0
 80023da:	f04f 0100 	mov.w	r1, #0
 80023de:	0159      	lsls	r1, r3, #5
 80023e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023e4:	0150      	lsls	r0, r2, #5
 80023e6:	4602      	mov	r2, r0
 80023e8:	460b      	mov	r3, r1
 80023ea:	4641      	mov	r1, r8
 80023ec:	1a51      	subs	r1, r2, r1
 80023ee:	60b9      	str	r1, [r7, #8]
 80023f0:	4649      	mov	r1, r9
 80023f2:	eb63 0301 	sbc.w	r3, r3, r1
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	f04f 0200 	mov.w	r2, #0
 80023fc:	f04f 0300 	mov.w	r3, #0
 8002400:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002404:	4659      	mov	r1, fp
 8002406:	018b      	lsls	r3, r1, #6
 8002408:	4651      	mov	r1, sl
 800240a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800240e:	4651      	mov	r1, sl
 8002410:	018a      	lsls	r2, r1, #6
 8002412:	4651      	mov	r1, sl
 8002414:	1a54      	subs	r4, r2, r1
 8002416:	4659      	mov	r1, fp
 8002418:	eb63 0501 	sbc.w	r5, r3, r1
 800241c:	f04f 0200 	mov.w	r2, #0
 8002420:	f04f 0300 	mov.w	r3, #0
 8002424:	00eb      	lsls	r3, r5, #3
 8002426:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800242a:	00e2      	lsls	r2, r4, #3
 800242c:	4614      	mov	r4, r2
 800242e:	461d      	mov	r5, r3
 8002430:	4643      	mov	r3, r8
 8002432:	18e3      	adds	r3, r4, r3
 8002434:	603b      	str	r3, [r7, #0]
 8002436:	464b      	mov	r3, r9
 8002438:	eb45 0303 	adc.w	r3, r5, r3
 800243c:	607b      	str	r3, [r7, #4]
 800243e:	f04f 0200 	mov.w	r2, #0
 8002442:	f04f 0300 	mov.w	r3, #0
 8002446:	e9d7 4500 	ldrd	r4, r5, [r7]
 800244a:	4629      	mov	r1, r5
 800244c:	028b      	lsls	r3, r1, #10
 800244e:	4621      	mov	r1, r4
 8002450:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002454:	4621      	mov	r1, r4
 8002456:	028a      	lsls	r2, r1, #10
 8002458:	4610      	mov	r0, r2
 800245a:	4619      	mov	r1, r3
 800245c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002460:	2200      	movs	r2, #0
 8002462:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002464:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002466:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800246a:	f7fd fed1 	bl	8000210 <__aeabi_uldivmod>
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	4613      	mov	r3, r2
 8002474:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002478:	4b0d      	ldr	r3, [pc, #52]	@ (80024b0 <HAL_RCC_GetSysClockFreq+0x458>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	0f1b      	lsrs	r3, r3, #28
 800247e:	f003 0307 	and.w	r3, r3, #7
 8002482:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8002486:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800248a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800248e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002492:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002496:	e003      	b.n	80024a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002498:	4b06      	ldr	r3, [pc, #24]	@ (80024b4 <HAL_RCC_GetSysClockFreq+0x45c>)
 800249a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800249e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	37b8      	adds	r7, #184	@ 0xb8
 80024a8:	46bd      	mov	sp, r7
 80024aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024ae:	bf00      	nop
 80024b0:	40023800 	.word	0x40023800
 80024b4:	00f42400 	.word	0x00f42400

080024b8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e28d      	b.n	80029e6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f000 8083 	beq.w	80025de <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80024d8:	4b94      	ldr	r3, [pc, #592]	@ (800272c <HAL_RCC_OscConfig+0x274>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f003 030c 	and.w	r3, r3, #12
 80024e0:	2b04      	cmp	r3, #4
 80024e2:	d019      	beq.n	8002518 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80024e4:	4b91      	ldr	r3, [pc, #580]	@ (800272c <HAL_RCC_OscConfig+0x274>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80024ec:	2b08      	cmp	r3, #8
 80024ee:	d106      	bne.n	80024fe <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80024f0:	4b8e      	ldr	r3, [pc, #568]	@ (800272c <HAL_RCC_OscConfig+0x274>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024fc:	d00c      	beq.n	8002518 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024fe:	4b8b      	ldr	r3, [pc, #556]	@ (800272c <HAL_RCC_OscConfig+0x274>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002506:	2b0c      	cmp	r3, #12
 8002508:	d112      	bne.n	8002530 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800250a:	4b88      	ldr	r3, [pc, #544]	@ (800272c <HAL_RCC_OscConfig+0x274>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002512:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002516:	d10b      	bne.n	8002530 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002518:	4b84      	ldr	r3, [pc, #528]	@ (800272c <HAL_RCC_OscConfig+0x274>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d05b      	beq.n	80025dc <HAL_RCC_OscConfig+0x124>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d157      	bne.n	80025dc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e25a      	b.n	80029e6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002538:	d106      	bne.n	8002548 <HAL_RCC_OscConfig+0x90>
 800253a:	4b7c      	ldr	r3, [pc, #496]	@ (800272c <HAL_RCC_OscConfig+0x274>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a7b      	ldr	r2, [pc, #492]	@ (800272c <HAL_RCC_OscConfig+0x274>)
 8002540:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	e01d      	b.n	8002584 <HAL_RCC_OscConfig+0xcc>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002550:	d10c      	bne.n	800256c <HAL_RCC_OscConfig+0xb4>
 8002552:	4b76      	ldr	r3, [pc, #472]	@ (800272c <HAL_RCC_OscConfig+0x274>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a75      	ldr	r2, [pc, #468]	@ (800272c <HAL_RCC_OscConfig+0x274>)
 8002558:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800255c:	6013      	str	r3, [r2, #0]
 800255e:	4b73      	ldr	r3, [pc, #460]	@ (800272c <HAL_RCC_OscConfig+0x274>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a72      	ldr	r2, [pc, #456]	@ (800272c <HAL_RCC_OscConfig+0x274>)
 8002564:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	e00b      	b.n	8002584 <HAL_RCC_OscConfig+0xcc>
 800256c:	4b6f      	ldr	r3, [pc, #444]	@ (800272c <HAL_RCC_OscConfig+0x274>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a6e      	ldr	r2, [pc, #440]	@ (800272c <HAL_RCC_OscConfig+0x274>)
 8002572:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002576:	6013      	str	r3, [r2, #0]
 8002578:	4b6c      	ldr	r3, [pc, #432]	@ (800272c <HAL_RCC_OscConfig+0x274>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a6b      	ldr	r2, [pc, #428]	@ (800272c <HAL_RCC_OscConfig+0x274>)
 800257e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002582:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d013      	beq.n	80025b4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258c:	f7fe fc1e 	bl	8000dcc <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002594:	f7fe fc1a 	bl	8000dcc <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b64      	cmp	r3, #100	@ 0x64
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e21f      	b.n	80029e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a6:	4b61      	ldr	r3, [pc, #388]	@ (800272c <HAL_RCC_OscConfig+0x274>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0f0      	beq.n	8002594 <HAL_RCC_OscConfig+0xdc>
 80025b2:	e014      	b.n	80025de <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b4:	f7fe fc0a 	bl	8000dcc <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025bc:	f7fe fc06 	bl	8000dcc <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b64      	cmp	r3, #100	@ 0x64
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e20b      	b.n	80029e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ce:	4b57      	ldr	r3, [pc, #348]	@ (800272c <HAL_RCC_OscConfig+0x274>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1f0      	bne.n	80025bc <HAL_RCC_OscConfig+0x104>
 80025da:	e000      	b.n	80025de <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d06f      	beq.n	80026ca <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80025ea:	4b50      	ldr	r3, [pc, #320]	@ (800272c <HAL_RCC_OscConfig+0x274>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 030c 	and.w	r3, r3, #12
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d017      	beq.n	8002626 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80025f6:	4b4d      	ldr	r3, [pc, #308]	@ (800272c <HAL_RCC_OscConfig+0x274>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80025fe:	2b08      	cmp	r3, #8
 8002600:	d105      	bne.n	800260e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002602:	4b4a      	ldr	r3, [pc, #296]	@ (800272c <HAL_RCC_OscConfig+0x274>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00b      	beq.n	8002626 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800260e:	4b47      	ldr	r3, [pc, #284]	@ (800272c <HAL_RCC_OscConfig+0x274>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002616:	2b0c      	cmp	r3, #12
 8002618:	d11c      	bne.n	8002654 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800261a:	4b44      	ldr	r3, [pc, #272]	@ (800272c <HAL_RCC_OscConfig+0x274>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d116      	bne.n	8002654 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002626:	4b41      	ldr	r3, [pc, #260]	@ (800272c <HAL_RCC_OscConfig+0x274>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d005      	beq.n	800263e <HAL_RCC_OscConfig+0x186>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d001      	beq.n	800263e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e1d3      	b.n	80029e6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800263e:	4b3b      	ldr	r3, [pc, #236]	@ (800272c <HAL_RCC_OscConfig+0x274>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	4937      	ldr	r1, [pc, #220]	@ (800272c <HAL_RCC_OscConfig+0x274>)
 800264e:	4313      	orrs	r3, r2
 8002650:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002652:	e03a      	b.n	80026ca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d020      	beq.n	800269e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800265c:	4b34      	ldr	r3, [pc, #208]	@ (8002730 <HAL_RCC_OscConfig+0x278>)
 800265e:	2201      	movs	r2, #1
 8002660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002662:	f7fe fbb3 	bl	8000dcc <HAL_GetTick>
 8002666:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002668:	e008      	b.n	800267c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800266a:	f7fe fbaf 	bl	8000dcc <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e1b4      	b.n	80029e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800267c:	4b2b      	ldr	r3, [pc, #172]	@ (800272c <HAL_RCC_OscConfig+0x274>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d0f0      	beq.n	800266a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002688:	4b28      	ldr	r3, [pc, #160]	@ (800272c <HAL_RCC_OscConfig+0x274>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	4925      	ldr	r1, [pc, #148]	@ (800272c <HAL_RCC_OscConfig+0x274>)
 8002698:	4313      	orrs	r3, r2
 800269a:	600b      	str	r3, [r1, #0]
 800269c:	e015      	b.n	80026ca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800269e:	4b24      	ldr	r3, [pc, #144]	@ (8002730 <HAL_RCC_OscConfig+0x278>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a4:	f7fe fb92 	bl	8000dcc <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026ac:	f7fe fb8e 	bl	8000dcc <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e193      	b.n	80029e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026be:	4b1b      	ldr	r3, [pc, #108]	@ (800272c <HAL_RCC_OscConfig+0x274>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1f0      	bne.n	80026ac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0308 	and.w	r3, r3, #8
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d036      	beq.n	8002744 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d016      	beq.n	800270c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026de:	4b15      	ldr	r3, [pc, #84]	@ (8002734 <HAL_RCC_OscConfig+0x27c>)
 80026e0:	2201      	movs	r2, #1
 80026e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e4:	f7fe fb72 	bl	8000dcc <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026ec:	f7fe fb6e 	bl	8000dcc <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e173      	b.n	80029e6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026fe:	4b0b      	ldr	r3, [pc, #44]	@ (800272c <HAL_RCC_OscConfig+0x274>)
 8002700:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d0f0      	beq.n	80026ec <HAL_RCC_OscConfig+0x234>
 800270a:	e01b      	b.n	8002744 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800270c:	4b09      	ldr	r3, [pc, #36]	@ (8002734 <HAL_RCC_OscConfig+0x27c>)
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002712:	f7fe fb5b 	bl	8000dcc <HAL_GetTick>
 8002716:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002718:	e00e      	b.n	8002738 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800271a:	f7fe fb57 	bl	8000dcc <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d907      	bls.n	8002738 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e15c      	b.n	80029e6 <HAL_RCC_OscConfig+0x52e>
 800272c:	40023800 	.word	0x40023800
 8002730:	42470000 	.word	0x42470000
 8002734:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002738:	4b8a      	ldr	r3, [pc, #552]	@ (8002964 <HAL_RCC_OscConfig+0x4ac>)
 800273a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800273c:	f003 0302 	and.w	r3, r3, #2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d1ea      	bne.n	800271a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0304 	and.w	r3, r3, #4
 800274c:	2b00      	cmp	r3, #0
 800274e:	f000 8097 	beq.w	8002880 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002752:	2300      	movs	r3, #0
 8002754:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002756:	4b83      	ldr	r3, [pc, #524]	@ (8002964 <HAL_RCC_OscConfig+0x4ac>)
 8002758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d10f      	bne.n	8002782 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002762:	2300      	movs	r3, #0
 8002764:	60bb      	str	r3, [r7, #8]
 8002766:	4b7f      	ldr	r3, [pc, #508]	@ (8002964 <HAL_RCC_OscConfig+0x4ac>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276a:	4a7e      	ldr	r2, [pc, #504]	@ (8002964 <HAL_RCC_OscConfig+0x4ac>)
 800276c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002770:	6413      	str	r3, [r2, #64]	@ 0x40
 8002772:	4b7c      	ldr	r3, [pc, #496]	@ (8002964 <HAL_RCC_OscConfig+0x4ac>)
 8002774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002776:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800277a:	60bb      	str	r3, [r7, #8]
 800277c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800277e:	2301      	movs	r3, #1
 8002780:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002782:	4b79      	ldr	r3, [pc, #484]	@ (8002968 <HAL_RCC_OscConfig+0x4b0>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800278a:	2b00      	cmp	r3, #0
 800278c:	d118      	bne.n	80027c0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800278e:	4b76      	ldr	r3, [pc, #472]	@ (8002968 <HAL_RCC_OscConfig+0x4b0>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a75      	ldr	r2, [pc, #468]	@ (8002968 <HAL_RCC_OscConfig+0x4b0>)
 8002794:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002798:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800279a:	f7fe fb17 	bl	8000dcc <HAL_GetTick>
 800279e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a0:	e008      	b.n	80027b4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027a2:	f7fe fb13 	bl	8000dcc <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e118      	b.n	80029e6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b4:	4b6c      	ldr	r3, [pc, #432]	@ (8002968 <HAL_RCC_OscConfig+0x4b0>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d0f0      	beq.n	80027a2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d106      	bne.n	80027d6 <HAL_RCC_OscConfig+0x31e>
 80027c8:	4b66      	ldr	r3, [pc, #408]	@ (8002964 <HAL_RCC_OscConfig+0x4ac>)
 80027ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027cc:	4a65      	ldr	r2, [pc, #404]	@ (8002964 <HAL_RCC_OscConfig+0x4ac>)
 80027ce:	f043 0301 	orr.w	r3, r3, #1
 80027d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80027d4:	e01c      	b.n	8002810 <HAL_RCC_OscConfig+0x358>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	2b05      	cmp	r3, #5
 80027dc:	d10c      	bne.n	80027f8 <HAL_RCC_OscConfig+0x340>
 80027de:	4b61      	ldr	r3, [pc, #388]	@ (8002964 <HAL_RCC_OscConfig+0x4ac>)
 80027e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027e2:	4a60      	ldr	r2, [pc, #384]	@ (8002964 <HAL_RCC_OscConfig+0x4ac>)
 80027e4:	f043 0304 	orr.w	r3, r3, #4
 80027e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80027ea:	4b5e      	ldr	r3, [pc, #376]	@ (8002964 <HAL_RCC_OscConfig+0x4ac>)
 80027ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ee:	4a5d      	ldr	r2, [pc, #372]	@ (8002964 <HAL_RCC_OscConfig+0x4ac>)
 80027f0:	f043 0301 	orr.w	r3, r3, #1
 80027f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80027f6:	e00b      	b.n	8002810 <HAL_RCC_OscConfig+0x358>
 80027f8:	4b5a      	ldr	r3, [pc, #360]	@ (8002964 <HAL_RCC_OscConfig+0x4ac>)
 80027fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027fc:	4a59      	ldr	r2, [pc, #356]	@ (8002964 <HAL_RCC_OscConfig+0x4ac>)
 80027fe:	f023 0301 	bic.w	r3, r3, #1
 8002802:	6713      	str	r3, [r2, #112]	@ 0x70
 8002804:	4b57      	ldr	r3, [pc, #348]	@ (8002964 <HAL_RCC_OscConfig+0x4ac>)
 8002806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002808:	4a56      	ldr	r2, [pc, #344]	@ (8002964 <HAL_RCC_OscConfig+0x4ac>)
 800280a:	f023 0304 	bic.w	r3, r3, #4
 800280e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d015      	beq.n	8002844 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002818:	f7fe fad8 	bl	8000dcc <HAL_GetTick>
 800281c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800281e:	e00a      	b.n	8002836 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002820:	f7fe fad4 	bl	8000dcc <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800282e:	4293      	cmp	r3, r2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e0d7      	b.n	80029e6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002836:	4b4b      	ldr	r3, [pc, #300]	@ (8002964 <HAL_RCC_OscConfig+0x4ac>)
 8002838:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d0ee      	beq.n	8002820 <HAL_RCC_OscConfig+0x368>
 8002842:	e014      	b.n	800286e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002844:	f7fe fac2 	bl	8000dcc <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800284a:	e00a      	b.n	8002862 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800284c:	f7fe fabe 	bl	8000dcc <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	f241 3288 	movw	r2, #5000	@ 0x1388
 800285a:	4293      	cmp	r3, r2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e0c1      	b.n	80029e6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002862:	4b40      	ldr	r3, [pc, #256]	@ (8002964 <HAL_RCC_OscConfig+0x4ac>)
 8002864:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1ee      	bne.n	800284c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800286e:	7dfb      	ldrb	r3, [r7, #23]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d105      	bne.n	8002880 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002874:	4b3b      	ldr	r3, [pc, #236]	@ (8002964 <HAL_RCC_OscConfig+0x4ac>)
 8002876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002878:	4a3a      	ldr	r2, [pc, #232]	@ (8002964 <HAL_RCC_OscConfig+0x4ac>)
 800287a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800287e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	2b00      	cmp	r3, #0
 8002886:	f000 80ad 	beq.w	80029e4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800288a:	4b36      	ldr	r3, [pc, #216]	@ (8002964 <HAL_RCC_OscConfig+0x4ac>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f003 030c 	and.w	r3, r3, #12
 8002892:	2b08      	cmp	r3, #8
 8002894:	d060      	beq.n	8002958 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	2b02      	cmp	r3, #2
 800289c:	d145      	bne.n	800292a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800289e:	4b33      	ldr	r3, [pc, #204]	@ (800296c <HAL_RCC_OscConfig+0x4b4>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a4:	f7fe fa92 	bl	8000dcc <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ac:	f7fe fa8e 	bl	8000dcc <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e093      	b.n	80029e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028be:	4b29      	ldr	r3, [pc, #164]	@ (8002964 <HAL_RCC_OscConfig+0x4ac>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1f0      	bne.n	80028ac <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	69da      	ldr	r2, [r3, #28]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	431a      	orrs	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d8:	019b      	lsls	r3, r3, #6
 80028da:	431a      	orrs	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e0:	085b      	lsrs	r3, r3, #1
 80028e2:	3b01      	subs	r3, #1
 80028e4:	041b      	lsls	r3, r3, #16
 80028e6:	431a      	orrs	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ec:	061b      	lsls	r3, r3, #24
 80028ee:	431a      	orrs	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f4:	071b      	lsls	r3, r3, #28
 80028f6:	491b      	ldr	r1, [pc, #108]	@ (8002964 <HAL_RCC_OscConfig+0x4ac>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028fc:	4b1b      	ldr	r3, [pc, #108]	@ (800296c <HAL_RCC_OscConfig+0x4b4>)
 80028fe:	2201      	movs	r2, #1
 8002900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002902:	f7fe fa63 	bl	8000dcc <HAL_GetTick>
 8002906:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002908:	e008      	b.n	800291c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800290a:	f7fe fa5f 	bl	8000dcc <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d901      	bls.n	800291c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e064      	b.n	80029e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800291c:	4b11      	ldr	r3, [pc, #68]	@ (8002964 <HAL_RCC_OscConfig+0x4ac>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d0f0      	beq.n	800290a <HAL_RCC_OscConfig+0x452>
 8002928:	e05c      	b.n	80029e4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800292a:	4b10      	ldr	r3, [pc, #64]	@ (800296c <HAL_RCC_OscConfig+0x4b4>)
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002930:	f7fe fa4c 	bl	8000dcc <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002936:	e008      	b.n	800294a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002938:	f7fe fa48 	bl	8000dcc <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e04d      	b.n	80029e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800294a:	4b06      	ldr	r3, [pc, #24]	@ (8002964 <HAL_RCC_OscConfig+0x4ac>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1f0      	bne.n	8002938 <HAL_RCC_OscConfig+0x480>
 8002956:	e045      	b.n	80029e4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d107      	bne.n	8002970 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e040      	b.n	80029e6 <HAL_RCC_OscConfig+0x52e>
 8002964:	40023800 	.word	0x40023800
 8002968:	40007000 	.word	0x40007000
 800296c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002970:	4b1f      	ldr	r3, [pc, #124]	@ (80029f0 <HAL_RCC_OscConfig+0x538>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d030      	beq.n	80029e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002988:	429a      	cmp	r2, r3
 800298a:	d129      	bne.n	80029e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002996:	429a      	cmp	r2, r3
 8002998:	d122      	bne.n	80029e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80029a0:	4013      	ands	r3, r2
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80029a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d119      	bne.n	80029e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029b6:	085b      	lsrs	r3, r3, #1
 80029b8:	3b01      	subs	r3, #1
 80029ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029bc:	429a      	cmp	r2, r3
 80029be:	d10f      	bne.n	80029e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d107      	bne.n	80029e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029da:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029dc:	429a      	cmp	r2, r3
 80029de:	d001      	beq.n	80029e4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e000      	b.n	80029e6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3718      	adds	r7, #24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	40023800 	.word	0x40023800

080029f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e041      	b.n	8002a8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d106      	bne.n	8002a20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 f839 	bl	8002a92 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2202      	movs	r2, #2
 8002a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	3304      	adds	r3, #4
 8002a30:	4619      	mov	r1, r3
 8002a32:	4610      	mov	r0, r2
 8002a34:	f000 f9c0 	bl	8002db8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
	...

08002aa8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d001      	beq.n	8002ac0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e04e      	b.n	8002b5e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68da      	ldr	r2, [r3, #12]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f042 0201 	orr.w	r2, r2, #1
 8002ad6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a23      	ldr	r2, [pc, #140]	@ (8002b6c <HAL_TIM_Base_Start_IT+0xc4>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d022      	beq.n	8002b28 <HAL_TIM_Base_Start_IT+0x80>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002aea:	d01d      	beq.n	8002b28 <HAL_TIM_Base_Start_IT+0x80>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a1f      	ldr	r2, [pc, #124]	@ (8002b70 <HAL_TIM_Base_Start_IT+0xc8>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d018      	beq.n	8002b28 <HAL_TIM_Base_Start_IT+0x80>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a1e      	ldr	r2, [pc, #120]	@ (8002b74 <HAL_TIM_Base_Start_IT+0xcc>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d013      	beq.n	8002b28 <HAL_TIM_Base_Start_IT+0x80>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a1c      	ldr	r2, [pc, #112]	@ (8002b78 <HAL_TIM_Base_Start_IT+0xd0>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d00e      	beq.n	8002b28 <HAL_TIM_Base_Start_IT+0x80>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a1b      	ldr	r2, [pc, #108]	@ (8002b7c <HAL_TIM_Base_Start_IT+0xd4>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d009      	beq.n	8002b28 <HAL_TIM_Base_Start_IT+0x80>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a19      	ldr	r2, [pc, #100]	@ (8002b80 <HAL_TIM_Base_Start_IT+0xd8>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d004      	beq.n	8002b28 <HAL_TIM_Base_Start_IT+0x80>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a18      	ldr	r2, [pc, #96]	@ (8002b84 <HAL_TIM_Base_Start_IT+0xdc>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d111      	bne.n	8002b4c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2b06      	cmp	r3, #6
 8002b38:	d010      	beq.n	8002b5c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f042 0201 	orr.w	r2, r2, #1
 8002b48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b4a:	e007      	b.n	8002b5c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f042 0201 	orr.w	r2, r2, #1
 8002b5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3714      	adds	r7, #20
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	40010000 	.word	0x40010000
 8002b70:	40000400 	.word	0x40000400
 8002b74:	40000800 	.word	0x40000800
 8002b78:	40000c00 	.word	0x40000c00
 8002b7c:	40010400 	.word	0x40010400
 8002b80:	40014000 	.word	0x40014000
 8002b84:	40001800 	.word	0x40001800

08002b88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d020      	beq.n	8002bec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d01b      	beq.n	8002bec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f06f 0202 	mvn.w	r2, #2
 8002bbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	f003 0303 	and.w	r3, r3, #3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 f8d2 	bl	8002d7c <HAL_TIM_IC_CaptureCallback>
 8002bd8:	e005      	b.n	8002be6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f8c4 	bl	8002d68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 f8d5 	bl	8002d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	f003 0304 	and.w	r3, r3, #4
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d020      	beq.n	8002c38 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f003 0304 	and.w	r3, r3, #4
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d01b      	beq.n	8002c38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f06f 0204 	mvn.w	r2, #4
 8002c08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2202      	movs	r2, #2
 8002c0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d003      	beq.n	8002c26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 f8ac 	bl	8002d7c <HAL_TIM_IC_CaptureCallback>
 8002c24:	e005      	b.n	8002c32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f89e 	bl	8002d68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 f8af 	bl	8002d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	f003 0308 	and.w	r3, r3, #8
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d020      	beq.n	8002c84 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f003 0308 	and.w	r3, r3, #8
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d01b      	beq.n	8002c84 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f06f 0208 	mvn.w	r2, #8
 8002c54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2204      	movs	r2, #4
 8002c5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	69db      	ldr	r3, [r3, #28]
 8002c62:	f003 0303 	and.w	r3, r3, #3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d003      	beq.n	8002c72 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 f886 	bl	8002d7c <HAL_TIM_IC_CaptureCallback>
 8002c70:	e005      	b.n	8002c7e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 f878 	bl	8002d68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f000 f889 	bl	8002d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	f003 0310 	and.w	r3, r3, #16
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d020      	beq.n	8002cd0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f003 0310 	and.w	r3, r3, #16
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d01b      	beq.n	8002cd0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f06f 0210 	mvn.w	r2, #16
 8002ca0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2208      	movs	r2, #8
 8002ca6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	69db      	ldr	r3, [r3, #28]
 8002cae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 f860 	bl	8002d7c <HAL_TIM_IC_CaptureCallback>
 8002cbc:	e005      	b.n	8002cca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 f852 	bl	8002d68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f000 f863 	bl	8002d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00c      	beq.n	8002cf4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d007      	beq.n	8002cf4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f06f 0201 	mvn.w	r2, #1
 8002cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f7fd fe2e 	bl	8000950 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00c      	beq.n	8002d18 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d007      	beq.n	8002d18 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 f906 	bl	8002f24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00c      	beq.n	8002d3c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d007      	beq.n	8002d3c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 f834 	bl	8002da4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	f003 0320 	and.w	r3, r3, #32
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00c      	beq.n	8002d60 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f003 0320 	and.w	r3, r3, #32
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d007      	beq.n	8002d60 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f06f 0220 	mvn.w	r2, #32
 8002d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 f8d8 	bl	8002f10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d60:	bf00      	nop
 8002d62:	3710      	adds	r7, #16
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a46      	ldr	r2, [pc, #280]	@ (8002ee4 <TIM_Base_SetConfig+0x12c>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d013      	beq.n	8002df8 <TIM_Base_SetConfig+0x40>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dd6:	d00f      	beq.n	8002df8 <TIM_Base_SetConfig+0x40>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a43      	ldr	r2, [pc, #268]	@ (8002ee8 <TIM_Base_SetConfig+0x130>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d00b      	beq.n	8002df8 <TIM_Base_SetConfig+0x40>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a42      	ldr	r2, [pc, #264]	@ (8002eec <TIM_Base_SetConfig+0x134>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d007      	beq.n	8002df8 <TIM_Base_SetConfig+0x40>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a41      	ldr	r2, [pc, #260]	@ (8002ef0 <TIM_Base_SetConfig+0x138>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d003      	beq.n	8002df8 <TIM_Base_SetConfig+0x40>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a40      	ldr	r2, [pc, #256]	@ (8002ef4 <TIM_Base_SetConfig+0x13c>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d108      	bne.n	8002e0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a35      	ldr	r2, [pc, #212]	@ (8002ee4 <TIM_Base_SetConfig+0x12c>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d02b      	beq.n	8002e6a <TIM_Base_SetConfig+0xb2>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e18:	d027      	beq.n	8002e6a <TIM_Base_SetConfig+0xb2>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a32      	ldr	r2, [pc, #200]	@ (8002ee8 <TIM_Base_SetConfig+0x130>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d023      	beq.n	8002e6a <TIM_Base_SetConfig+0xb2>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a31      	ldr	r2, [pc, #196]	@ (8002eec <TIM_Base_SetConfig+0x134>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d01f      	beq.n	8002e6a <TIM_Base_SetConfig+0xb2>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a30      	ldr	r2, [pc, #192]	@ (8002ef0 <TIM_Base_SetConfig+0x138>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d01b      	beq.n	8002e6a <TIM_Base_SetConfig+0xb2>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a2f      	ldr	r2, [pc, #188]	@ (8002ef4 <TIM_Base_SetConfig+0x13c>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d017      	beq.n	8002e6a <TIM_Base_SetConfig+0xb2>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a2e      	ldr	r2, [pc, #184]	@ (8002ef8 <TIM_Base_SetConfig+0x140>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d013      	beq.n	8002e6a <TIM_Base_SetConfig+0xb2>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a2d      	ldr	r2, [pc, #180]	@ (8002efc <TIM_Base_SetConfig+0x144>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d00f      	beq.n	8002e6a <TIM_Base_SetConfig+0xb2>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a2c      	ldr	r2, [pc, #176]	@ (8002f00 <TIM_Base_SetConfig+0x148>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d00b      	beq.n	8002e6a <TIM_Base_SetConfig+0xb2>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a2b      	ldr	r2, [pc, #172]	@ (8002f04 <TIM_Base_SetConfig+0x14c>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d007      	beq.n	8002e6a <TIM_Base_SetConfig+0xb2>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a2a      	ldr	r2, [pc, #168]	@ (8002f08 <TIM_Base_SetConfig+0x150>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d003      	beq.n	8002e6a <TIM_Base_SetConfig+0xb2>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a29      	ldr	r2, [pc, #164]	@ (8002f0c <TIM_Base_SetConfig+0x154>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d108      	bne.n	8002e7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a10      	ldr	r2, [pc, #64]	@ (8002ee4 <TIM_Base_SetConfig+0x12c>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d003      	beq.n	8002eb0 <TIM_Base_SetConfig+0xf8>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a12      	ldr	r2, [pc, #72]	@ (8002ef4 <TIM_Base_SetConfig+0x13c>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d103      	bne.n	8002eb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	691a      	ldr	r2, [r3, #16]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d105      	bne.n	8002ed6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	f023 0201 	bic.w	r2, r3, #1
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	611a      	str	r2, [r3, #16]
  }
}
 8002ed6:	bf00      	nop
 8002ed8:	3714      	adds	r7, #20
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	40010000 	.word	0x40010000
 8002ee8:	40000400 	.word	0x40000400
 8002eec:	40000800 	.word	0x40000800
 8002ef0:	40000c00 	.word	0x40000c00
 8002ef4:	40010400 	.word	0x40010400
 8002ef8:	40014000 	.word	0x40014000
 8002efc:	40014400 	.word	0x40014400
 8002f00:	40014800 	.word	0x40014800
 8002f04:	40001800 	.word	0x40001800
 8002f08:	40001c00 	.word	0x40001c00
 8002f0c:	40002000 	.word	0x40002000

08002f10 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e042      	b.n	8002fd0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d106      	bne.n	8002f64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f7fd fd82 	bl	8000a68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2224      	movs	r2, #36	@ 0x24
 8002f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68da      	ldr	r2, [r3, #12]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 ff4f 	bl	8003e20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	691a      	ldr	r2, [r3, #16]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	695a      	ldr	r2, [r3, #20]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002fa0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68da      	ldr	r2, [r3, #12]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002fb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2220      	movs	r2, #32
 8002fc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3708      	adds	r7, #8
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b08a      	sub	sp, #40	@ 0x28
 8002fdc:	af02      	add	r7, sp, #8
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	603b      	str	r3, [r7, #0]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	2b20      	cmp	r3, #32
 8002ff6:	d175      	bne.n	80030e4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d002      	beq.n	8003004 <HAL_UART_Transmit+0x2c>
 8002ffe:	88fb      	ldrh	r3, [r7, #6]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d101      	bne.n	8003008 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e06e      	b.n	80030e6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2221      	movs	r2, #33	@ 0x21
 8003012:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003016:	f7fd fed9 	bl	8000dcc <HAL_GetTick>
 800301a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	88fa      	ldrh	r2, [r7, #6]
 8003020:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	88fa      	ldrh	r2, [r7, #6]
 8003026:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003030:	d108      	bne.n	8003044 <HAL_UART_Transmit+0x6c>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d104      	bne.n	8003044 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800303a:	2300      	movs	r3, #0
 800303c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	61bb      	str	r3, [r7, #24]
 8003042:	e003      	b.n	800304c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003048:	2300      	movs	r3, #0
 800304a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800304c:	e02e      	b.n	80030ac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	9300      	str	r3, [sp, #0]
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	2200      	movs	r2, #0
 8003056:	2180      	movs	r1, #128	@ 0x80
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	f000 fc27 	bl	80038ac <UART_WaitOnFlagUntilTimeout>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d005      	beq.n	8003070 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2220      	movs	r2, #32
 8003068:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e03a      	b.n	80030e6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10b      	bne.n	800308e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	881b      	ldrh	r3, [r3, #0]
 800307a:	461a      	mov	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003084:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	3302      	adds	r3, #2
 800308a:	61bb      	str	r3, [r7, #24]
 800308c:	e007      	b.n	800309e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	781a      	ldrb	r2, [r3, #0]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	3301      	adds	r3, #1
 800309c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	3b01      	subs	r3, #1
 80030a6:	b29a      	uxth	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1cb      	bne.n	800304e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	9300      	str	r3, [sp, #0]
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2200      	movs	r2, #0
 80030be:	2140      	movs	r1, #64	@ 0x40
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f000 fbf3 	bl	80038ac <UART_WaitOnFlagUntilTimeout>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d005      	beq.n	80030d8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2220      	movs	r2, #32
 80030d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e006      	b.n	80030e6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2220      	movs	r2, #32
 80030dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80030e0:	2300      	movs	r3, #0
 80030e2:	e000      	b.n	80030e6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80030e4:	2302      	movs	r3, #2
  }
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3720      	adds	r7, #32
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b084      	sub	sp, #16
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	60f8      	str	r0, [r7, #12]
 80030f6:	60b9      	str	r1, [r7, #8]
 80030f8:	4613      	mov	r3, r2
 80030fa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b20      	cmp	r3, #32
 8003106:	d112      	bne.n	800312e <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d002      	beq.n	8003114 <HAL_UART_Receive_DMA+0x26>
 800310e:	88fb      	ldrh	r3, [r7, #6]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d101      	bne.n	8003118 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e00b      	b.n	8003130 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800311e:	88fb      	ldrh	r3, [r7, #6]
 8003120:	461a      	mov	r2, r3
 8003122:	68b9      	ldr	r1, [r7, #8]
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f000 fc1b 	bl	8003960 <UART_Start_Receive_DMA>
 800312a:	4603      	mov	r3, r0
 800312c:	e000      	b.n	8003130 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800312e:	2302      	movs	r3, #2
  }
}
 8003130:	4618      	mov	r0, r3
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b0ba      	sub	sp, #232	@ 0xe8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800315e:	2300      	movs	r3, #0
 8003160:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003164:	2300      	movs	r3, #0
 8003166:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800316a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800316e:	f003 030f 	and.w	r3, r3, #15
 8003172:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003176:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800317a:	2b00      	cmp	r3, #0
 800317c:	d10f      	bne.n	800319e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800317e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003182:	f003 0320 	and.w	r3, r3, #32
 8003186:	2b00      	cmp	r3, #0
 8003188:	d009      	beq.n	800319e <HAL_UART_IRQHandler+0x66>
 800318a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800318e:	f003 0320 	and.w	r3, r3, #32
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 fd83 	bl	8003ca2 <UART_Receive_IT>
      return;
 800319c:	e25b      	b.n	8003656 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800319e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f000 80de 	beq.w	8003364 <HAL_UART_IRQHandler+0x22c>
 80031a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d106      	bne.n	80031c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80031b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031b8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f000 80d1 	beq.w	8003364 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80031c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00b      	beq.n	80031e6 <HAL_UART_IRQHandler+0xae>
 80031ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d005      	beq.n	80031e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031de:	f043 0201 	orr.w	r2, r3, #1
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031ea:	f003 0304 	and.w	r3, r3, #4
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00b      	beq.n	800320a <HAL_UART_IRQHandler+0xd2>
 80031f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d005      	beq.n	800320a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003202:	f043 0202 	orr.w	r2, r3, #2
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800320a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00b      	beq.n	800322e <HAL_UART_IRQHandler+0xf6>
 8003216:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b00      	cmp	r3, #0
 8003220:	d005      	beq.n	800322e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003226:	f043 0204 	orr.w	r2, r3, #4
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800322e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	2b00      	cmp	r3, #0
 8003238:	d011      	beq.n	800325e <HAL_UART_IRQHandler+0x126>
 800323a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800323e:	f003 0320 	and.w	r3, r3, #32
 8003242:	2b00      	cmp	r3, #0
 8003244:	d105      	bne.n	8003252 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003246:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b00      	cmp	r3, #0
 8003250:	d005      	beq.n	800325e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003256:	f043 0208 	orr.w	r2, r3, #8
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003262:	2b00      	cmp	r3, #0
 8003264:	f000 81f2 	beq.w	800364c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800326c:	f003 0320 	and.w	r3, r3, #32
 8003270:	2b00      	cmp	r3, #0
 8003272:	d008      	beq.n	8003286 <HAL_UART_IRQHandler+0x14e>
 8003274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003278:	f003 0320 	and.w	r3, r3, #32
 800327c:	2b00      	cmp	r3, #0
 800327e:	d002      	beq.n	8003286 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f000 fd0e 	bl	8003ca2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003290:	2b40      	cmp	r3, #64	@ 0x40
 8003292:	bf0c      	ite	eq
 8003294:	2301      	moveq	r3, #1
 8003296:	2300      	movne	r3, #0
 8003298:	b2db      	uxtb	r3, r3
 800329a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032a2:	f003 0308 	and.w	r3, r3, #8
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d103      	bne.n	80032b2 <HAL_UART_IRQHandler+0x17a>
 80032aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d04f      	beq.n	8003352 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 fc16 	bl	8003ae4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032c2:	2b40      	cmp	r3, #64	@ 0x40
 80032c4:	d141      	bne.n	800334a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	3314      	adds	r3, #20
 80032cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80032d4:	e853 3f00 	ldrex	r3, [r3]
 80032d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80032dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80032e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	3314      	adds	r3, #20
 80032ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80032f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80032f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80032fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003302:	e841 2300 	strex	r3, r2, [r1]
 8003306:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800330a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1d9      	bne.n	80032c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003316:	2b00      	cmp	r3, #0
 8003318:	d013      	beq.n	8003342 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800331e:	4a7e      	ldr	r2, [pc, #504]	@ (8003518 <HAL_UART_IRQHandler+0x3e0>)
 8003320:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003326:	4618      	mov	r0, r3
 8003328:	f7fd ffb4 	bl	8001294 <HAL_DMA_Abort_IT>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d016      	beq.n	8003360 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003336:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800333c:	4610      	mov	r0, r2
 800333e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003340:	e00e      	b.n	8003360 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 f99e 	bl	8003684 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003348:	e00a      	b.n	8003360 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 f99a 	bl	8003684 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003350:	e006      	b.n	8003360 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 f996 	bl	8003684 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800335e:	e175      	b.n	800364c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003360:	bf00      	nop
    return;
 8003362:	e173      	b.n	800364c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003368:	2b01      	cmp	r3, #1
 800336a:	f040 814f 	bne.w	800360c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800336e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003372:	f003 0310 	and.w	r3, r3, #16
 8003376:	2b00      	cmp	r3, #0
 8003378:	f000 8148 	beq.w	800360c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800337c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003380:	f003 0310 	and.w	r3, r3, #16
 8003384:	2b00      	cmp	r3, #0
 8003386:	f000 8141 	beq.w	800360c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800338a:	2300      	movs	r3, #0
 800338c:	60bb      	str	r3, [r7, #8]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	60bb      	str	r3, [r7, #8]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	60bb      	str	r3, [r7, #8]
 800339e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033aa:	2b40      	cmp	r3, #64	@ 0x40
 80033ac:	f040 80b6 	bne.w	800351c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80033bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f000 8145 	beq.w	8003650 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80033ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80033ce:	429a      	cmp	r2, r3
 80033d0:	f080 813e 	bcs.w	8003650 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80033da:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033e6:	f000 8088 	beq.w	80034fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	330c      	adds	r3, #12
 80033f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80033f8:	e853 3f00 	ldrex	r3, [r3]
 80033fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003400:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003404:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003408:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	330c      	adds	r3, #12
 8003412:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003416:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800341a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800341e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003422:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003426:	e841 2300 	strex	r3, r2, [r1]
 800342a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800342e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1d9      	bne.n	80033ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	3314      	adds	r3, #20
 800343c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800343e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003440:	e853 3f00 	ldrex	r3, [r3]
 8003444:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003446:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003448:	f023 0301 	bic.w	r3, r3, #1
 800344c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	3314      	adds	r3, #20
 8003456:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800345a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800345e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003460:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003462:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003466:	e841 2300 	strex	r3, r2, [r1]
 800346a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800346c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1e1      	bne.n	8003436 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	3314      	adds	r3, #20
 8003478:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800347a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800347c:	e853 3f00 	ldrex	r3, [r3]
 8003480:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003482:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003484:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003488:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	3314      	adds	r3, #20
 8003492:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003496:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003498:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800349a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800349c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800349e:	e841 2300 	strex	r3, r2, [r1]
 80034a2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80034a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1e3      	bne.n	8003472 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2220      	movs	r2, #32
 80034ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	330c      	adds	r3, #12
 80034be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034c2:	e853 3f00 	ldrex	r3, [r3]
 80034c6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80034c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80034ca:	f023 0310 	bic.w	r3, r3, #16
 80034ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	330c      	adds	r3, #12
 80034d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80034dc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80034de:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80034e2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80034e4:	e841 2300 	strex	r3, r2, [r1]
 80034e8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80034ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1e3      	bne.n	80034b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7fd fe5d 	bl	80011b4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2202      	movs	r2, #2
 80034fe:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003508:	b29b      	uxth	r3, r3
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	b29b      	uxth	r3, r3
 800350e:	4619      	mov	r1, r3
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 f8c1 	bl	8003698 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003516:	e09b      	b.n	8003650 <HAL_UART_IRQHandler+0x518>
 8003518:	08003bab 	.word	0x08003bab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003524:	b29b      	uxth	r3, r3
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003530:	b29b      	uxth	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	f000 808e 	beq.w	8003654 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003538:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800353c:	2b00      	cmp	r3, #0
 800353e:	f000 8089 	beq.w	8003654 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	330c      	adds	r3, #12
 8003548:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800354a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800354c:	e853 3f00 	ldrex	r3, [r3]
 8003550:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003552:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003554:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003558:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	330c      	adds	r3, #12
 8003562:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003566:	647a      	str	r2, [r7, #68]	@ 0x44
 8003568:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800356a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800356c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800356e:	e841 2300 	strex	r3, r2, [r1]
 8003572:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003574:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1e3      	bne.n	8003542 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	3314      	adds	r3, #20
 8003580:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003584:	e853 3f00 	ldrex	r3, [r3]
 8003588:	623b      	str	r3, [r7, #32]
   return(result);
 800358a:	6a3b      	ldr	r3, [r7, #32]
 800358c:	f023 0301 	bic.w	r3, r3, #1
 8003590:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	3314      	adds	r3, #20
 800359a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800359e:	633a      	str	r2, [r7, #48]	@ 0x30
 80035a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80035a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035a6:	e841 2300 	strex	r3, r2, [r1]
 80035aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80035ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1e3      	bne.n	800357a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2220      	movs	r2, #32
 80035b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	330c      	adds	r3, #12
 80035c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	e853 3f00 	ldrex	r3, [r3]
 80035ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f023 0310 	bic.w	r3, r3, #16
 80035d6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	330c      	adds	r3, #12
 80035e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80035e4:	61fa      	str	r2, [r7, #28]
 80035e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e8:	69b9      	ldr	r1, [r7, #24]
 80035ea:	69fa      	ldr	r2, [r7, #28]
 80035ec:	e841 2300 	strex	r3, r2, [r1]
 80035f0:	617b      	str	r3, [r7, #20]
   return(result);
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1e3      	bne.n	80035c0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2202      	movs	r2, #2
 80035fc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80035fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003602:	4619      	mov	r1, r3
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f000 f847 	bl	8003698 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800360a:	e023      	b.n	8003654 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800360c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003610:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003614:	2b00      	cmp	r3, #0
 8003616:	d009      	beq.n	800362c <HAL_UART_IRQHandler+0x4f4>
 8003618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800361c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003620:	2b00      	cmp	r3, #0
 8003622:	d003      	beq.n	800362c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 fad4 	bl	8003bd2 <UART_Transmit_IT>
    return;
 800362a:	e014      	b.n	8003656 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800362c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00e      	beq.n	8003656 <HAL_UART_IRQHandler+0x51e>
 8003638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800363c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003640:	2b00      	cmp	r3, #0
 8003642:	d008      	beq.n	8003656 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f000 fb14 	bl	8003c72 <UART_EndTransmit_IT>
    return;
 800364a:	e004      	b.n	8003656 <HAL_UART_IRQHandler+0x51e>
    return;
 800364c:	bf00      	nop
 800364e:	e002      	b.n	8003656 <HAL_UART_IRQHandler+0x51e>
      return;
 8003650:	bf00      	nop
 8003652:	e000      	b.n	8003656 <HAL_UART_IRQHandler+0x51e>
      return;
 8003654:	bf00      	nop
  }
}
 8003656:	37e8      	adds	r7, #232	@ 0xe8
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003664:	bf00      	nop
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	460b      	mov	r3, r1
 80036a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b09c      	sub	sp, #112	@ 0x70
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036bc:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d172      	bne.n	80037b2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80036cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036ce:	2200      	movs	r2, #0
 80036d0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	330c      	adds	r3, #12
 80036d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036dc:	e853 3f00 	ldrex	r3, [r3]
 80036e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80036e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80036ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	330c      	adds	r3, #12
 80036f0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80036f2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80036f4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80036f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80036fa:	e841 2300 	strex	r3, r2, [r1]
 80036fe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003700:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1e5      	bne.n	80036d2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003706:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	3314      	adds	r3, #20
 800370c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800370e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003710:	e853 3f00 	ldrex	r3, [r3]
 8003714:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003716:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003718:	f023 0301 	bic.w	r3, r3, #1
 800371c:	667b      	str	r3, [r7, #100]	@ 0x64
 800371e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	3314      	adds	r3, #20
 8003724:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003726:	647a      	str	r2, [r7, #68]	@ 0x44
 8003728:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800372a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800372c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800372e:	e841 2300 	strex	r3, r2, [r1]
 8003732:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003734:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1e5      	bne.n	8003706 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800373a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	3314      	adds	r3, #20
 8003740:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003744:	e853 3f00 	ldrex	r3, [r3]
 8003748:	623b      	str	r3, [r7, #32]
   return(result);
 800374a:	6a3b      	ldr	r3, [r7, #32]
 800374c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003750:	663b      	str	r3, [r7, #96]	@ 0x60
 8003752:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	3314      	adds	r3, #20
 8003758:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800375a:	633a      	str	r2, [r7, #48]	@ 0x30
 800375c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800375e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003760:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003762:	e841 2300 	strex	r3, r2, [r1]
 8003766:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1e5      	bne.n	800373a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800376e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003770:	2220      	movs	r2, #32
 8003772:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003776:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800377a:	2b01      	cmp	r3, #1
 800377c:	d119      	bne.n	80037b2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800377e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	330c      	adds	r3, #12
 8003784:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	e853 3f00 	ldrex	r3, [r3]
 800378c:	60fb      	str	r3, [r7, #12]
   return(result);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f023 0310 	bic.w	r3, r3, #16
 8003794:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003796:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	330c      	adds	r3, #12
 800379c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800379e:	61fa      	str	r2, [r7, #28]
 80037a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a2:	69b9      	ldr	r1, [r7, #24]
 80037a4:	69fa      	ldr	r2, [r7, #28]
 80037a6:	e841 2300 	strex	r3, r2, [r1]
 80037aa:	617b      	str	r3, [r7, #20]
   return(result);
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1e5      	bne.n	800377e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037b4:	2200      	movs	r2, #0
 80037b6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d106      	bne.n	80037ce <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80037c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037c2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80037c4:	4619      	mov	r1, r3
 80037c6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80037c8:	f7ff ff66 	bl	8003698 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80037cc:	e002      	b.n	80037d4 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80037ce:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80037d0:	f7fc fec6 	bl	8000560 <HAL_UART_RxCpltCallback>
}
 80037d4:	bf00      	nop
 80037d6:	3770      	adds	r7, #112	@ 0x70
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037e8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2201      	movs	r2, #1
 80037ee:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d108      	bne.n	800380a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80037fc:	085b      	lsrs	r3, r3, #1
 80037fe:	b29b      	uxth	r3, r3
 8003800:	4619      	mov	r1, r3
 8003802:	68f8      	ldr	r0, [r7, #12]
 8003804:	f7ff ff48 	bl	8003698 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003808:	e002      	b.n	8003810 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f7ff ff30 	bl	8003670 <HAL_UART_RxHalfCpltCallback>
}
 8003810:	bf00      	nop
 8003812:	3710      	adds	r7, #16
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003820:	2300      	movs	r3, #0
 8003822:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003828:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003834:	2b80      	cmp	r3, #128	@ 0x80
 8003836:	bf0c      	ite	eq
 8003838:	2301      	moveq	r3, #1
 800383a:	2300      	movne	r3, #0
 800383c:	b2db      	uxtb	r3, r3
 800383e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003846:	b2db      	uxtb	r3, r3
 8003848:	2b21      	cmp	r3, #33	@ 0x21
 800384a:	d108      	bne.n	800385e <UART_DMAError+0x46>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d005      	beq.n	800385e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	2200      	movs	r2, #0
 8003856:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003858:	68b8      	ldr	r0, [r7, #8]
 800385a:	f000 f91b 	bl	8003a94 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	695b      	ldr	r3, [r3, #20]
 8003864:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003868:	2b40      	cmp	r3, #64	@ 0x40
 800386a:	bf0c      	ite	eq
 800386c:	2301      	moveq	r3, #1
 800386e:	2300      	movne	r3, #0
 8003870:	b2db      	uxtb	r3, r3
 8003872:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800387a:	b2db      	uxtb	r3, r3
 800387c:	2b22      	cmp	r3, #34	@ 0x22
 800387e:	d108      	bne.n	8003892 <UART_DMAError+0x7a>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d005      	beq.n	8003892 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	2200      	movs	r2, #0
 800388a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800388c:	68b8      	ldr	r0, [r7, #8]
 800388e:	f000 f929 	bl	8003ae4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003896:	f043 0210 	orr.w	r2, r3, #16
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800389e:	68b8      	ldr	r0, [r7, #8]
 80038a0:	f7ff fef0 	bl	8003684 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038a4:	bf00      	nop
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	603b      	str	r3, [r7, #0]
 80038b8:	4613      	mov	r3, r2
 80038ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038bc:	e03b      	b.n	8003936 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038be:	6a3b      	ldr	r3, [r7, #32]
 80038c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c4:	d037      	beq.n	8003936 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038c6:	f7fd fa81 	bl	8000dcc <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	6a3a      	ldr	r2, [r7, #32]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d302      	bcc.n	80038dc <UART_WaitOnFlagUntilTimeout+0x30>
 80038d6:	6a3b      	ldr	r3, [r7, #32]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d101      	bne.n	80038e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e03a      	b.n	8003956 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	f003 0304 	and.w	r3, r3, #4
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d023      	beq.n	8003936 <UART_WaitOnFlagUntilTimeout+0x8a>
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	2b80      	cmp	r3, #128	@ 0x80
 80038f2:	d020      	beq.n	8003936 <UART_WaitOnFlagUntilTimeout+0x8a>
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	2b40      	cmp	r3, #64	@ 0x40
 80038f8:	d01d      	beq.n	8003936 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0308 	and.w	r3, r3, #8
 8003904:	2b08      	cmp	r3, #8
 8003906:	d116      	bne.n	8003936 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003908:	2300      	movs	r3, #0
 800390a:	617b      	str	r3, [r7, #20]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	617b      	str	r3, [r7, #20]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	617b      	str	r3, [r7, #20]
 800391c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f000 f8e0 	bl	8003ae4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2208      	movs	r2, #8
 8003928:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e00f      	b.n	8003956 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	4013      	ands	r3, r2
 8003940:	68ba      	ldr	r2, [r7, #8]
 8003942:	429a      	cmp	r2, r3
 8003944:	bf0c      	ite	eq
 8003946:	2301      	moveq	r3, #1
 8003948:	2300      	movne	r3, #0
 800394a:	b2db      	uxtb	r3, r3
 800394c:	461a      	mov	r2, r3
 800394e:	79fb      	ldrb	r3, [r7, #7]
 8003950:	429a      	cmp	r2, r3
 8003952:	d0b4      	beq.n	80038be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3718      	adds	r7, #24
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
	...

08003960 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b098      	sub	sp, #96	@ 0x60
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	4613      	mov	r3, r2
 800396c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800396e:	68ba      	ldr	r2, [r7, #8]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	88fa      	ldrh	r2, [r7, #6]
 8003978:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2222      	movs	r2, #34	@ 0x22
 8003984:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800398c:	4a3e      	ldr	r2, [pc, #248]	@ (8003a88 <UART_Start_Receive_DMA+0x128>)
 800398e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003994:	4a3d      	ldr	r2, [pc, #244]	@ (8003a8c <UART_Start_Receive_DMA+0x12c>)
 8003996:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800399c:	4a3c      	ldr	r2, [pc, #240]	@ (8003a90 <UART_Start_Receive_DMA+0x130>)
 800399e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039a4:	2200      	movs	r2, #0
 80039a6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80039a8:	f107 0308 	add.w	r3, r7, #8
 80039ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	3304      	adds	r3, #4
 80039b8:	4619      	mov	r1, r3
 80039ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	88fb      	ldrh	r3, [r7, #6]
 80039c0:	f7fd fba0 	bl	8001104 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80039c4:	2300      	movs	r3, #0
 80039c6:	613b      	str	r3, [r7, #16]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	613b      	str	r3, [r7, #16]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	613b      	str	r3, [r7, #16]
 80039d8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d019      	beq.n	8003a16 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	330c      	adds	r3, #12
 80039e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039ec:	e853 3f00 	ldrex	r3, [r3]
 80039f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80039f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	330c      	adds	r3, #12
 8003a00:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a02:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003a04:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a06:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003a08:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a0a:	e841 2300 	strex	r3, r2, [r1]
 8003a0e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003a10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1e5      	bne.n	80039e2 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	3314      	adds	r3, #20
 8003a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a20:	e853 3f00 	ldrex	r3, [r3]
 8003a24:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a28:	f043 0301 	orr.w	r3, r3, #1
 8003a2c:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	3314      	adds	r3, #20
 8003a34:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003a36:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003a38:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003a3c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003a3e:	e841 2300 	strex	r3, r2, [r1]
 8003a42:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d1e5      	bne.n	8003a16 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	3314      	adds	r3, #20
 8003a50:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	e853 3f00 	ldrex	r3, [r3]
 8003a58:	617b      	str	r3, [r7, #20]
   return(result);
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a60:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	3314      	adds	r3, #20
 8003a68:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003a6a:	627a      	str	r2, [r7, #36]	@ 0x24
 8003a6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a6e:	6a39      	ldr	r1, [r7, #32]
 8003a70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a72:	e841 2300 	strex	r3, r2, [r1]
 8003a76:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1e5      	bne.n	8003a4a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3760      	adds	r7, #96	@ 0x60
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	080036b1 	.word	0x080036b1
 8003a8c:	080037dd 	.word	0x080037dd
 8003a90:	08003819 	.word	0x08003819

08003a94 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b089      	sub	sp, #36	@ 0x24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	330c      	adds	r3, #12
 8003aa2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	e853 3f00 	ldrex	r3, [r3]
 8003aaa:	60bb      	str	r3, [r7, #8]
   return(result);
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003ab2:	61fb      	str	r3, [r7, #28]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	330c      	adds	r3, #12
 8003aba:	69fa      	ldr	r2, [r7, #28]
 8003abc:	61ba      	str	r2, [r7, #24]
 8003abe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac0:	6979      	ldr	r1, [r7, #20]
 8003ac2:	69ba      	ldr	r2, [r7, #24]
 8003ac4:	e841 2300 	strex	r3, r2, [r1]
 8003ac8:	613b      	str	r3, [r7, #16]
   return(result);
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1e5      	bne.n	8003a9c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003ad8:	bf00      	nop
 8003ada:	3724      	adds	r7, #36	@ 0x24
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b095      	sub	sp, #84	@ 0x54
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	330c      	adds	r3, #12
 8003af2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003af6:	e853 3f00 	ldrex	r3, [r3]
 8003afa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003afe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	330c      	adds	r3, #12
 8003b0a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b0c:	643a      	str	r2, [r7, #64]	@ 0x40
 8003b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b10:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003b12:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b14:	e841 2300 	strex	r3, r2, [r1]
 8003b18:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1e5      	bne.n	8003aec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	3314      	adds	r3, #20
 8003b26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b28:	6a3b      	ldr	r3, [r7, #32]
 8003b2a:	e853 3f00 	ldrex	r3, [r3]
 8003b2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	f023 0301 	bic.w	r3, r3, #1
 8003b36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	3314      	adds	r3, #20
 8003b3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b40:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b42:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b48:	e841 2300 	strex	r3, r2, [r1]
 8003b4c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1e5      	bne.n	8003b20 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d119      	bne.n	8003b90 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	330c      	adds	r3, #12
 8003b62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	e853 3f00 	ldrex	r3, [r3]
 8003b6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	f023 0310 	bic.w	r3, r3, #16
 8003b72:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	330c      	adds	r3, #12
 8003b7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b7c:	61ba      	str	r2, [r7, #24]
 8003b7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b80:	6979      	ldr	r1, [r7, #20]
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	e841 2300 	strex	r3, r2, [r1]
 8003b88:	613b      	str	r3, [r7, #16]
   return(result);
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1e5      	bne.n	8003b5c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2220      	movs	r2, #32
 8003b94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003b9e:	bf00      	nop
 8003ba0:	3754      	adds	r7, #84	@ 0x54
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr

08003baa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b084      	sub	sp, #16
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bb6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003bc4:	68f8      	ldr	r0, [r7, #12]
 8003bc6:	f7ff fd5d 	bl	8003684 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bca:	bf00      	nop
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b085      	sub	sp, #20
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b21      	cmp	r3, #33	@ 0x21
 8003be4:	d13e      	bne.n	8003c64 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bee:	d114      	bne.n	8003c1a <UART_Transmit_IT+0x48>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d110      	bne.n	8003c1a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	881b      	ldrh	r3, [r3, #0]
 8003c02:	461a      	mov	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c0c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	1c9a      	adds	r2, r3, #2
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	621a      	str	r2, [r3, #32]
 8003c18:	e008      	b.n	8003c2c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	1c59      	adds	r1, r3, #1
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	6211      	str	r1, [r2, #32]
 8003c24:	781a      	ldrb	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	3b01      	subs	r3, #1
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	4619      	mov	r1, r3
 8003c3a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d10f      	bne.n	8003c60 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68da      	ldr	r2, [r3, #12]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c4e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68da      	ldr	r2, [r3, #12]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c5e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c60:	2300      	movs	r3, #0
 8003c62:	e000      	b.n	8003c66 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003c64:	2302      	movs	r3, #2
  }
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3714      	adds	r7, #20
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr

08003c72 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b082      	sub	sp, #8
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68da      	ldr	r2, [r3, #12]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c88:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2220      	movs	r2, #32
 8003c8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f7ff fce2 	bl	800365c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3708      	adds	r7, #8
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b08c      	sub	sp, #48	@ 0x30
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b22      	cmp	r3, #34	@ 0x22
 8003cb4:	f040 80ae 	bne.w	8003e14 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cc0:	d117      	bne.n	8003cf2 <UART_Receive_IT+0x50>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d113      	bne.n	8003cf2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ce0:	b29a      	uxth	r2, r3
 8003ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ce4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cea:	1c9a      	adds	r2, r3, #2
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	629a      	str	r2, [r3, #40]	@ 0x28
 8003cf0:	e026      	b.n	8003d40 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d04:	d007      	beq.n	8003d16 <UART_Receive_IT+0x74>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10a      	bne.n	8003d24 <UART_Receive_IT+0x82>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d106      	bne.n	8003d24 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d20:	701a      	strb	r2, [r3, #0]
 8003d22:	e008      	b.n	8003d36 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d30:	b2da      	uxtb	r2, r3
 8003d32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d34:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d3a:	1c5a      	adds	r2, r3, #1
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	3b01      	subs	r3, #1
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d15d      	bne.n	8003e10 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68da      	ldr	r2, [r3, #12]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f022 0220 	bic.w	r2, r2, #32
 8003d62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68da      	ldr	r2, [r3, #12]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	695a      	ldr	r2, [r3, #20]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 0201 	bic.w	r2, r2, #1
 8003d82:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2220      	movs	r2, #32
 8003d88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d135      	bne.n	8003e06 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	330c      	adds	r3, #12
 8003da6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	e853 3f00 	ldrex	r3, [r3]
 8003dae:	613b      	str	r3, [r7, #16]
   return(result);
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	f023 0310 	bic.w	r3, r3, #16
 8003db6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	330c      	adds	r3, #12
 8003dbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dc0:	623a      	str	r2, [r7, #32]
 8003dc2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc4:	69f9      	ldr	r1, [r7, #28]
 8003dc6:	6a3a      	ldr	r2, [r7, #32]
 8003dc8:	e841 2300 	strex	r3, r2, [r1]
 8003dcc:	61bb      	str	r3, [r7, #24]
   return(result);
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1e5      	bne.n	8003da0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0310 	and.w	r3, r3, #16
 8003dde:	2b10      	cmp	r3, #16
 8003de0:	d10a      	bne.n	8003df8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003de2:	2300      	movs	r3, #0
 8003de4:	60fb      	str	r3, [r7, #12]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	60fb      	str	r3, [r7, #12]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	60fb      	str	r3, [r7, #12]
 8003df6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f7ff fc4a 	bl	8003698 <HAL_UARTEx_RxEventCallback>
 8003e04:	e002      	b.n	8003e0c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f7fc fbaa 	bl	8000560 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	e002      	b.n	8003e16 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003e10:	2300      	movs	r3, #0
 8003e12:	e000      	b.n	8003e16 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003e14:	2302      	movs	r3, #2
  }
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3730      	adds	r7, #48	@ 0x30
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
	...

08003e20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e24:	b0c0      	sub	sp, #256	@ 0x100
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e3c:	68d9      	ldr	r1, [r3, #12]
 8003e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	ea40 0301 	orr.w	r3, r0, r1
 8003e48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e4e:	689a      	ldr	r2, [r3, #8]
 8003e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	431a      	orrs	r2, r3
 8003e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	431a      	orrs	r2, r3
 8003e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e64:	69db      	ldr	r3, [r3, #28]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003e78:	f021 010c 	bic.w	r1, r1, #12
 8003e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003e86:	430b      	orrs	r3, r1
 8003e88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e9a:	6999      	ldr	r1, [r3, #24]
 8003e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	ea40 0301 	orr.w	r3, r0, r1
 8003ea6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	4b8f      	ldr	r3, [pc, #572]	@ (80040ec <UART_SetConfig+0x2cc>)
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d005      	beq.n	8003ec0 <UART_SetConfig+0xa0>
 8003eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	4b8d      	ldr	r3, [pc, #564]	@ (80040f0 <UART_SetConfig+0x2d0>)
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d104      	bne.n	8003eca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ec0:	f7fe f884 	bl	8001fcc <HAL_RCC_GetPCLK2Freq>
 8003ec4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003ec8:	e003      	b.n	8003ed2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003eca:	f7fe f86b 	bl	8001fa4 <HAL_RCC_GetPCLK1Freq>
 8003ece:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ed6:	69db      	ldr	r3, [r3, #28]
 8003ed8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003edc:	f040 810c 	bne.w	80040f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ee0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003eea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003eee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003ef2:	4622      	mov	r2, r4
 8003ef4:	462b      	mov	r3, r5
 8003ef6:	1891      	adds	r1, r2, r2
 8003ef8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003efa:	415b      	adcs	r3, r3
 8003efc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003efe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003f02:	4621      	mov	r1, r4
 8003f04:	eb12 0801 	adds.w	r8, r2, r1
 8003f08:	4629      	mov	r1, r5
 8003f0a:	eb43 0901 	adc.w	r9, r3, r1
 8003f0e:	f04f 0200 	mov.w	r2, #0
 8003f12:	f04f 0300 	mov.w	r3, #0
 8003f16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f22:	4690      	mov	r8, r2
 8003f24:	4699      	mov	r9, r3
 8003f26:	4623      	mov	r3, r4
 8003f28:	eb18 0303 	adds.w	r3, r8, r3
 8003f2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003f30:	462b      	mov	r3, r5
 8003f32:	eb49 0303 	adc.w	r3, r9, r3
 8003f36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003f46:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003f4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003f4e:	460b      	mov	r3, r1
 8003f50:	18db      	adds	r3, r3, r3
 8003f52:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f54:	4613      	mov	r3, r2
 8003f56:	eb42 0303 	adc.w	r3, r2, r3
 8003f5a:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003f60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003f64:	f7fc f954 	bl	8000210 <__aeabi_uldivmod>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	4b61      	ldr	r3, [pc, #388]	@ (80040f4 <UART_SetConfig+0x2d4>)
 8003f6e:	fba3 2302 	umull	r2, r3, r3, r2
 8003f72:	095b      	lsrs	r3, r3, #5
 8003f74:	011c      	lsls	r4, r3, #4
 8003f76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f80:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003f84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003f88:	4642      	mov	r2, r8
 8003f8a:	464b      	mov	r3, r9
 8003f8c:	1891      	adds	r1, r2, r2
 8003f8e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003f90:	415b      	adcs	r3, r3
 8003f92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003f98:	4641      	mov	r1, r8
 8003f9a:	eb12 0a01 	adds.w	sl, r2, r1
 8003f9e:	4649      	mov	r1, r9
 8003fa0:	eb43 0b01 	adc.w	fp, r3, r1
 8003fa4:	f04f 0200 	mov.w	r2, #0
 8003fa8:	f04f 0300 	mov.w	r3, #0
 8003fac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003fb0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003fb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fb8:	4692      	mov	sl, r2
 8003fba:	469b      	mov	fp, r3
 8003fbc:	4643      	mov	r3, r8
 8003fbe:	eb1a 0303 	adds.w	r3, sl, r3
 8003fc2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003fc6:	464b      	mov	r3, r9
 8003fc8:	eb4b 0303 	adc.w	r3, fp, r3
 8003fcc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003fdc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003fe0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	18db      	adds	r3, r3, r3
 8003fe8:	643b      	str	r3, [r7, #64]	@ 0x40
 8003fea:	4613      	mov	r3, r2
 8003fec:	eb42 0303 	adc.w	r3, r2, r3
 8003ff0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ff2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003ff6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003ffa:	f7fc f909 	bl	8000210 <__aeabi_uldivmod>
 8003ffe:	4602      	mov	r2, r0
 8004000:	460b      	mov	r3, r1
 8004002:	4611      	mov	r1, r2
 8004004:	4b3b      	ldr	r3, [pc, #236]	@ (80040f4 <UART_SetConfig+0x2d4>)
 8004006:	fba3 2301 	umull	r2, r3, r3, r1
 800400a:	095b      	lsrs	r3, r3, #5
 800400c:	2264      	movs	r2, #100	@ 0x64
 800400e:	fb02 f303 	mul.w	r3, r2, r3
 8004012:	1acb      	subs	r3, r1, r3
 8004014:	00db      	lsls	r3, r3, #3
 8004016:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800401a:	4b36      	ldr	r3, [pc, #216]	@ (80040f4 <UART_SetConfig+0x2d4>)
 800401c:	fba3 2302 	umull	r2, r3, r3, r2
 8004020:	095b      	lsrs	r3, r3, #5
 8004022:	005b      	lsls	r3, r3, #1
 8004024:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004028:	441c      	add	r4, r3
 800402a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800402e:	2200      	movs	r2, #0
 8004030:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004034:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004038:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800403c:	4642      	mov	r2, r8
 800403e:	464b      	mov	r3, r9
 8004040:	1891      	adds	r1, r2, r2
 8004042:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004044:	415b      	adcs	r3, r3
 8004046:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004048:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800404c:	4641      	mov	r1, r8
 800404e:	1851      	adds	r1, r2, r1
 8004050:	6339      	str	r1, [r7, #48]	@ 0x30
 8004052:	4649      	mov	r1, r9
 8004054:	414b      	adcs	r3, r1
 8004056:	637b      	str	r3, [r7, #52]	@ 0x34
 8004058:	f04f 0200 	mov.w	r2, #0
 800405c:	f04f 0300 	mov.w	r3, #0
 8004060:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004064:	4659      	mov	r1, fp
 8004066:	00cb      	lsls	r3, r1, #3
 8004068:	4651      	mov	r1, sl
 800406a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800406e:	4651      	mov	r1, sl
 8004070:	00ca      	lsls	r2, r1, #3
 8004072:	4610      	mov	r0, r2
 8004074:	4619      	mov	r1, r3
 8004076:	4603      	mov	r3, r0
 8004078:	4642      	mov	r2, r8
 800407a:	189b      	adds	r3, r3, r2
 800407c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004080:	464b      	mov	r3, r9
 8004082:	460a      	mov	r2, r1
 8004084:	eb42 0303 	adc.w	r3, r2, r3
 8004088:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800408c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004098:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800409c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80040a0:	460b      	mov	r3, r1
 80040a2:	18db      	adds	r3, r3, r3
 80040a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040a6:	4613      	mov	r3, r2
 80040a8:	eb42 0303 	adc.w	r3, r2, r3
 80040ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80040b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80040b6:	f7fc f8ab 	bl	8000210 <__aeabi_uldivmod>
 80040ba:	4602      	mov	r2, r0
 80040bc:	460b      	mov	r3, r1
 80040be:	4b0d      	ldr	r3, [pc, #52]	@ (80040f4 <UART_SetConfig+0x2d4>)
 80040c0:	fba3 1302 	umull	r1, r3, r3, r2
 80040c4:	095b      	lsrs	r3, r3, #5
 80040c6:	2164      	movs	r1, #100	@ 0x64
 80040c8:	fb01 f303 	mul.w	r3, r1, r3
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	00db      	lsls	r3, r3, #3
 80040d0:	3332      	adds	r3, #50	@ 0x32
 80040d2:	4a08      	ldr	r2, [pc, #32]	@ (80040f4 <UART_SetConfig+0x2d4>)
 80040d4:	fba2 2303 	umull	r2, r3, r2, r3
 80040d8:	095b      	lsrs	r3, r3, #5
 80040da:	f003 0207 	and.w	r2, r3, #7
 80040de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4422      	add	r2, r4
 80040e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80040e8:	e106      	b.n	80042f8 <UART_SetConfig+0x4d8>
 80040ea:	bf00      	nop
 80040ec:	40011000 	.word	0x40011000
 80040f0:	40011400 	.word	0x40011400
 80040f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040fc:	2200      	movs	r2, #0
 80040fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004102:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004106:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800410a:	4642      	mov	r2, r8
 800410c:	464b      	mov	r3, r9
 800410e:	1891      	adds	r1, r2, r2
 8004110:	6239      	str	r1, [r7, #32]
 8004112:	415b      	adcs	r3, r3
 8004114:	627b      	str	r3, [r7, #36]	@ 0x24
 8004116:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800411a:	4641      	mov	r1, r8
 800411c:	1854      	adds	r4, r2, r1
 800411e:	4649      	mov	r1, r9
 8004120:	eb43 0501 	adc.w	r5, r3, r1
 8004124:	f04f 0200 	mov.w	r2, #0
 8004128:	f04f 0300 	mov.w	r3, #0
 800412c:	00eb      	lsls	r3, r5, #3
 800412e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004132:	00e2      	lsls	r2, r4, #3
 8004134:	4614      	mov	r4, r2
 8004136:	461d      	mov	r5, r3
 8004138:	4643      	mov	r3, r8
 800413a:	18e3      	adds	r3, r4, r3
 800413c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004140:	464b      	mov	r3, r9
 8004142:	eb45 0303 	adc.w	r3, r5, r3
 8004146:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800414a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004156:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800415a:	f04f 0200 	mov.w	r2, #0
 800415e:	f04f 0300 	mov.w	r3, #0
 8004162:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004166:	4629      	mov	r1, r5
 8004168:	008b      	lsls	r3, r1, #2
 800416a:	4621      	mov	r1, r4
 800416c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004170:	4621      	mov	r1, r4
 8004172:	008a      	lsls	r2, r1, #2
 8004174:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004178:	f7fc f84a 	bl	8000210 <__aeabi_uldivmod>
 800417c:	4602      	mov	r2, r0
 800417e:	460b      	mov	r3, r1
 8004180:	4b60      	ldr	r3, [pc, #384]	@ (8004304 <UART_SetConfig+0x4e4>)
 8004182:	fba3 2302 	umull	r2, r3, r3, r2
 8004186:	095b      	lsrs	r3, r3, #5
 8004188:	011c      	lsls	r4, r3, #4
 800418a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800418e:	2200      	movs	r2, #0
 8004190:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004194:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004198:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800419c:	4642      	mov	r2, r8
 800419e:	464b      	mov	r3, r9
 80041a0:	1891      	adds	r1, r2, r2
 80041a2:	61b9      	str	r1, [r7, #24]
 80041a4:	415b      	adcs	r3, r3
 80041a6:	61fb      	str	r3, [r7, #28]
 80041a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041ac:	4641      	mov	r1, r8
 80041ae:	1851      	adds	r1, r2, r1
 80041b0:	6139      	str	r1, [r7, #16]
 80041b2:	4649      	mov	r1, r9
 80041b4:	414b      	adcs	r3, r1
 80041b6:	617b      	str	r3, [r7, #20]
 80041b8:	f04f 0200 	mov.w	r2, #0
 80041bc:	f04f 0300 	mov.w	r3, #0
 80041c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041c4:	4659      	mov	r1, fp
 80041c6:	00cb      	lsls	r3, r1, #3
 80041c8:	4651      	mov	r1, sl
 80041ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041ce:	4651      	mov	r1, sl
 80041d0:	00ca      	lsls	r2, r1, #3
 80041d2:	4610      	mov	r0, r2
 80041d4:	4619      	mov	r1, r3
 80041d6:	4603      	mov	r3, r0
 80041d8:	4642      	mov	r2, r8
 80041da:	189b      	adds	r3, r3, r2
 80041dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80041e0:	464b      	mov	r3, r9
 80041e2:	460a      	mov	r2, r1
 80041e4:	eb42 0303 	adc.w	r3, r2, r3
 80041e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80041ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80041f6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80041f8:	f04f 0200 	mov.w	r2, #0
 80041fc:	f04f 0300 	mov.w	r3, #0
 8004200:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004204:	4649      	mov	r1, r9
 8004206:	008b      	lsls	r3, r1, #2
 8004208:	4641      	mov	r1, r8
 800420a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800420e:	4641      	mov	r1, r8
 8004210:	008a      	lsls	r2, r1, #2
 8004212:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004216:	f7fb fffb 	bl	8000210 <__aeabi_uldivmod>
 800421a:	4602      	mov	r2, r0
 800421c:	460b      	mov	r3, r1
 800421e:	4611      	mov	r1, r2
 8004220:	4b38      	ldr	r3, [pc, #224]	@ (8004304 <UART_SetConfig+0x4e4>)
 8004222:	fba3 2301 	umull	r2, r3, r3, r1
 8004226:	095b      	lsrs	r3, r3, #5
 8004228:	2264      	movs	r2, #100	@ 0x64
 800422a:	fb02 f303 	mul.w	r3, r2, r3
 800422e:	1acb      	subs	r3, r1, r3
 8004230:	011b      	lsls	r3, r3, #4
 8004232:	3332      	adds	r3, #50	@ 0x32
 8004234:	4a33      	ldr	r2, [pc, #204]	@ (8004304 <UART_SetConfig+0x4e4>)
 8004236:	fba2 2303 	umull	r2, r3, r2, r3
 800423a:	095b      	lsrs	r3, r3, #5
 800423c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004240:	441c      	add	r4, r3
 8004242:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004246:	2200      	movs	r2, #0
 8004248:	673b      	str	r3, [r7, #112]	@ 0x70
 800424a:	677a      	str	r2, [r7, #116]	@ 0x74
 800424c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004250:	4642      	mov	r2, r8
 8004252:	464b      	mov	r3, r9
 8004254:	1891      	adds	r1, r2, r2
 8004256:	60b9      	str	r1, [r7, #8]
 8004258:	415b      	adcs	r3, r3
 800425a:	60fb      	str	r3, [r7, #12]
 800425c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004260:	4641      	mov	r1, r8
 8004262:	1851      	adds	r1, r2, r1
 8004264:	6039      	str	r1, [r7, #0]
 8004266:	4649      	mov	r1, r9
 8004268:	414b      	adcs	r3, r1
 800426a:	607b      	str	r3, [r7, #4]
 800426c:	f04f 0200 	mov.w	r2, #0
 8004270:	f04f 0300 	mov.w	r3, #0
 8004274:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004278:	4659      	mov	r1, fp
 800427a:	00cb      	lsls	r3, r1, #3
 800427c:	4651      	mov	r1, sl
 800427e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004282:	4651      	mov	r1, sl
 8004284:	00ca      	lsls	r2, r1, #3
 8004286:	4610      	mov	r0, r2
 8004288:	4619      	mov	r1, r3
 800428a:	4603      	mov	r3, r0
 800428c:	4642      	mov	r2, r8
 800428e:	189b      	adds	r3, r3, r2
 8004290:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004292:	464b      	mov	r3, r9
 8004294:	460a      	mov	r2, r1
 8004296:	eb42 0303 	adc.w	r3, r2, r3
 800429a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800429c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80042a6:	667a      	str	r2, [r7, #100]	@ 0x64
 80042a8:	f04f 0200 	mov.w	r2, #0
 80042ac:	f04f 0300 	mov.w	r3, #0
 80042b0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80042b4:	4649      	mov	r1, r9
 80042b6:	008b      	lsls	r3, r1, #2
 80042b8:	4641      	mov	r1, r8
 80042ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042be:	4641      	mov	r1, r8
 80042c0:	008a      	lsls	r2, r1, #2
 80042c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80042c6:	f7fb ffa3 	bl	8000210 <__aeabi_uldivmod>
 80042ca:	4602      	mov	r2, r0
 80042cc:	460b      	mov	r3, r1
 80042ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004304 <UART_SetConfig+0x4e4>)
 80042d0:	fba3 1302 	umull	r1, r3, r3, r2
 80042d4:	095b      	lsrs	r3, r3, #5
 80042d6:	2164      	movs	r1, #100	@ 0x64
 80042d8:	fb01 f303 	mul.w	r3, r1, r3
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	011b      	lsls	r3, r3, #4
 80042e0:	3332      	adds	r3, #50	@ 0x32
 80042e2:	4a08      	ldr	r2, [pc, #32]	@ (8004304 <UART_SetConfig+0x4e4>)
 80042e4:	fba2 2303 	umull	r2, r3, r2, r3
 80042e8:	095b      	lsrs	r3, r3, #5
 80042ea:	f003 020f 	and.w	r2, r3, #15
 80042ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4422      	add	r2, r4
 80042f6:	609a      	str	r2, [r3, #8]
}
 80042f8:	bf00      	nop
 80042fa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80042fe:	46bd      	mov	sp, r7
 8004300:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004304:	51eb851f 	.word	0x51eb851f

08004308 <__NVIC_SetPriority>:
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	4603      	mov	r3, r0
 8004310:	6039      	str	r1, [r7, #0]
 8004312:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004318:	2b00      	cmp	r3, #0
 800431a:	db0a      	blt.n	8004332 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	b2da      	uxtb	r2, r3
 8004320:	490c      	ldr	r1, [pc, #48]	@ (8004354 <__NVIC_SetPriority+0x4c>)
 8004322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004326:	0112      	lsls	r2, r2, #4
 8004328:	b2d2      	uxtb	r2, r2
 800432a:	440b      	add	r3, r1
 800432c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004330:	e00a      	b.n	8004348 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	b2da      	uxtb	r2, r3
 8004336:	4908      	ldr	r1, [pc, #32]	@ (8004358 <__NVIC_SetPriority+0x50>)
 8004338:	79fb      	ldrb	r3, [r7, #7]
 800433a:	f003 030f 	and.w	r3, r3, #15
 800433e:	3b04      	subs	r3, #4
 8004340:	0112      	lsls	r2, r2, #4
 8004342:	b2d2      	uxtb	r2, r2
 8004344:	440b      	add	r3, r1
 8004346:	761a      	strb	r2, [r3, #24]
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr
 8004354:	e000e100 	.word	0xe000e100
 8004358:	e000ed00 	.word	0xe000ed00

0800435c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800435c:	b580      	push	{r7, lr}
 800435e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004360:	4b05      	ldr	r3, [pc, #20]	@ (8004378 <SysTick_Handler+0x1c>)
 8004362:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004364:	f001 fdc6 	bl	8005ef4 <xTaskGetSchedulerState>
 8004368:	4603      	mov	r3, r0
 800436a:	2b01      	cmp	r3, #1
 800436c:	d001      	beq.n	8004372 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800436e:	f002 fbbb 	bl	8006ae8 <xPortSysTickHandler>
  }
}
 8004372:	bf00      	nop
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	e000e010 	.word	0xe000e010

0800437c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800437c:	b580      	push	{r7, lr}
 800437e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004380:	2100      	movs	r1, #0
 8004382:	f06f 0004 	mvn.w	r0, #4
 8004386:	f7ff ffbf 	bl	8004308 <__NVIC_SetPriority>
#endif
}
 800438a:	bf00      	nop
 800438c:	bd80      	pop	{r7, pc}
	...

08004390 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004396:	f3ef 8305 	mrs	r3, IPSR
 800439a:	603b      	str	r3, [r7, #0]
  return(result);
 800439c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d003      	beq.n	80043aa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80043a2:	f06f 0305 	mvn.w	r3, #5
 80043a6:	607b      	str	r3, [r7, #4]
 80043a8:	e00c      	b.n	80043c4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80043aa:	4b0a      	ldr	r3, [pc, #40]	@ (80043d4 <osKernelInitialize+0x44>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d105      	bne.n	80043be <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80043b2:	4b08      	ldr	r3, [pc, #32]	@ (80043d4 <osKernelInitialize+0x44>)
 80043b4:	2201      	movs	r2, #1
 80043b6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80043b8:	2300      	movs	r3, #0
 80043ba:	607b      	str	r3, [r7, #4]
 80043bc:	e002      	b.n	80043c4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80043be:	f04f 33ff 	mov.w	r3, #4294967295
 80043c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80043c4:	687b      	ldr	r3, [r7, #4]
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	370c      	adds	r7, #12
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	2000018c 	.word	0x2000018c

080043d8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043de:	f3ef 8305 	mrs	r3, IPSR
 80043e2:	603b      	str	r3, [r7, #0]
  return(result);
 80043e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d003      	beq.n	80043f2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80043ea:	f06f 0305 	mvn.w	r3, #5
 80043ee:	607b      	str	r3, [r7, #4]
 80043f0:	e010      	b.n	8004414 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80043f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004420 <osKernelStart+0x48>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d109      	bne.n	800440e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80043fa:	f7ff ffbf 	bl	800437c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80043fe:	4b08      	ldr	r3, [pc, #32]	@ (8004420 <osKernelStart+0x48>)
 8004400:	2202      	movs	r2, #2
 8004402:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004404:	f001 f928 	bl	8005658 <vTaskStartScheduler>
      stat = osOK;
 8004408:	2300      	movs	r3, #0
 800440a:	607b      	str	r3, [r7, #4]
 800440c:	e002      	b.n	8004414 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800440e:	f04f 33ff 	mov.w	r3, #4294967295
 8004412:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004414:	687b      	ldr	r3, [r7, #4]
}
 8004416:	4618      	mov	r0, r3
 8004418:	3708      	adds	r7, #8
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	2000018c 	.word	0x2000018c

08004424 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004424:	b580      	push	{r7, lr}
 8004426:	b08e      	sub	sp, #56	@ 0x38
 8004428:	af04      	add	r7, sp, #16
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004430:	2300      	movs	r3, #0
 8004432:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004434:	f3ef 8305 	mrs	r3, IPSR
 8004438:	617b      	str	r3, [r7, #20]
  return(result);
 800443a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800443c:	2b00      	cmp	r3, #0
 800443e:	d17e      	bne.n	800453e <osThreadNew+0x11a>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d07b      	beq.n	800453e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004446:	2380      	movs	r3, #128	@ 0x80
 8004448:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800444a:	2318      	movs	r3, #24
 800444c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800444e:	2300      	movs	r3, #0
 8004450:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004452:	f04f 33ff 	mov.w	r3, #4294967295
 8004456:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d045      	beq.n	80044ea <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d002      	beq.n	800446c <osThreadNew+0x48>
        name = attr->name;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d002      	beq.n	800447a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d008      	beq.n	8004492 <osThreadNew+0x6e>
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	2b38      	cmp	r3, #56	@ 0x38
 8004484:	d805      	bhi.n	8004492 <osThreadNew+0x6e>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <osThreadNew+0x72>
        return (NULL);
 8004492:	2300      	movs	r3, #0
 8004494:	e054      	b.n	8004540 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	695b      	ldr	r3, [r3, #20]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d003      	beq.n	80044a6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	089b      	lsrs	r3, r3, #2
 80044a4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00e      	beq.n	80044cc <osThreadNew+0xa8>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	2b5b      	cmp	r3, #91	@ 0x5b
 80044b4:	d90a      	bls.n	80044cc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d006      	beq.n	80044cc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d002      	beq.n	80044cc <osThreadNew+0xa8>
        mem = 1;
 80044c6:	2301      	movs	r3, #1
 80044c8:	61bb      	str	r3, [r7, #24]
 80044ca:	e010      	b.n	80044ee <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d10c      	bne.n	80044ee <osThreadNew+0xca>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d108      	bne.n	80044ee <osThreadNew+0xca>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d104      	bne.n	80044ee <osThreadNew+0xca>
          mem = 0;
 80044e4:	2300      	movs	r3, #0
 80044e6:	61bb      	str	r3, [r7, #24]
 80044e8:	e001      	b.n	80044ee <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80044ea:	2300      	movs	r3, #0
 80044ec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d110      	bne.n	8004516 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80044fc:	9202      	str	r2, [sp, #8]
 80044fe:	9301      	str	r3, [sp, #4]
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	6a3a      	ldr	r2, [r7, #32]
 8004508:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f000 fec8 	bl	80052a0 <xTaskCreateStatic>
 8004510:	4603      	mov	r3, r0
 8004512:	613b      	str	r3, [r7, #16]
 8004514:	e013      	b.n	800453e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d110      	bne.n	800453e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800451c:	6a3b      	ldr	r3, [r7, #32]
 800451e:	b29a      	uxth	r2, r3
 8004520:	f107 0310 	add.w	r3, r7, #16
 8004524:	9301      	str	r3, [sp, #4]
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	9300      	str	r3, [sp, #0]
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f000 ff16 	bl	8005360 <xTaskCreate>
 8004534:	4603      	mov	r3, r0
 8004536:	2b01      	cmp	r3, #1
 8004538:	d001      	beq.n	800453e <osThreadNew+0x11a>
            hTask = NULL;
 800453a:	2300      	movs	r3, #0
 800453c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800453e:	693b      	ldr	r3, [r7, #16]
}
 8004540:	4618      	mov	r0, r3
 8004542:	3728      	adds	r7, #40	@ 0x28
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004550:	f3ef 8305 	mrs	r3, IPSR
 8004554:	60bb      	str	r3, [r7, #8]
  return(result);
 8004556:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004558:	2b00      	cmp	r3, #0
 800455a:	d003      	beq.n	8004564 <osDelay+0x1c>
    stat = osErrorISR;
 800455c:	f06f 0305 	mvn.w	r3, #5
 8004560:	60fb      	str	r3, [r7, #12]
 8004562:	e007      	b.n	8004574 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004564:	2300      	movs	r3, #0
 8004566:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d002      	beq.n	8004574 <osDelay+0x2c>
      vTaskDelay(ticks);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f001 f83c 	bl	80055ec <vTaskDelay>
    }
  }

  return (stat);
 8004574:	68fb      	ldr	r3, [r7, #12]
}
 8004576:	4618      	mov	r0, r3
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800457e:	b580      	push	{r7, lr}
 8004580:	b08a      	sub	sp, #40	@ 0x28
 8004582:	af02      	add	r7, sp, #8
 8004584:	60f8      	str	r0, [r7, #12]
 8004586:	60b9      	str	r1, [r7, #8]
 8004588:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800458a:	2300      	movs	r3, #0
 800458c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800458e:	f3ef 8305 	mrs	r3, IPSR
 8004592:	613b      	str	r3, [r7, #16]
  return(result);
 8004594:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004596:	2b00      	cmp	r3, #0
 8004598:	d15f      	bne.n	800465a <osMessageQueueNew+0xdc>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d05c      	beq.n	800465a <osMessageQueueNew+0xdc>
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d059      	beq.n	800465a <osMessageQueueNew+0xdc>
    mem = -1;
 80045a6:	f04f 33ff 	mov.w	r3, #4294967295
 80045aa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d029      	beq.n	8004606 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d012      	beq.n	80045e0 <osMessageQueueNew+0x62>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	2b4f      	cmp	r3, #79	@ 0x4f
 80045c0:	d90e      	bls.n	80045e0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00a      	beq.n	80045e0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	695a      	ldr	r2, [r3, #20]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	68b9      	ldr	r1, [r7, #8]
 80045d2:	fb01 f303 	mul.w	r3, r1, r3
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d302      	bcc.n	80045e0 <osMessageQueueNew+0x62>
        mem = 1;
 80045da:	2301      	movs	r3, #1
 80045dc:	61bb      	str	r3, [r7, #24]
 80045de:	e014      	b.n	800460a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d110      	bne.n	800460a <osMessageQueueNew+0x8c>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10c      	bne.n	800460a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d108      	bne.n	800460a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d104      	bne.n	800460a <osMessageQueueNew+0x8c>
          mem = 0;
 8004600:	2300      	movs	r3, #0
 8004602:	61bb      	str	r3, [r7, #24]
 8004604:	e001      	b.n	800460a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004606:	2300      	movs	r3, #0
 8004608:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	2b01      	cmp	r3, #1
 800460e:	d10b      	bne.n	8004628 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	691a      	ldr	r2, [r3, #16]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	2100      	movs	r1, #0
 800461a:	9100      	str	r1, [sp, #0]
 800461c:	68b9      	ldr	r1, [r7, #8]
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	f000 f972 	bl	8004908 <xQueueGenericCreateStatic>
 8004624:	61f8      	str	r0, [r7, #28]
 8004626:	e008      	b.n	800463a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d105      	bne.n	800463a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800462e:	2200      	movs	r2, #0
 8004630:	68b9      	ldr	r1, [r7, #8]
 8004632:	68f8      	ldr	r0, [r7, #12]
 8004634:	f000 f9e5 	bl	8004a02 <xQueueGenericCreate>
 8004638:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00c      	beq.n	800465a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d003      	beq.n	800464e <osMessageQueueNew+0xd0>
        name = attr->name;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	617b      	str	r3, [r7, #20]
 800464c:	e001      	b.n	8004652 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800464e:	2300      	movs	r3, #0
 8004650:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8004652:	6979      	ldr	r1, [r7, #20]
 8004654:	69f8      	ldr	r0, [r7, #28]
 8004656:	f000 fdc5 	bl	80051e4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800465a:	69fb      	ldr	r3, [r7, #28]
}
 800465c:	4618      	mov	r0, r3
 800465e:	3720      	adds	r7, #32
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	4a07      	ldr	r2, [pc, #28]	@ (8004690 <vApplicationGetIdleTaskMemory+0x2c>)
 8004674:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	4a06      	ldr	r2, [pc, #24]	@ (8004694 <vApplicationGetIdleTaskMemory+0x30>)
 800467a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2280      	movs	r2, #128	@ 0x80
 8004680:	601a      	str	r2, [r3, #0]
}
 8004682:	bf00      	nop
 8004684:	3714      	adds	r7, #20
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	20000190 	.word	0x20000190
 8004694:	200001ec 	.word	0x200001ec

08004698 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	4a07      	ldr	r2, [pc, #28]	@ (80046c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80046a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	4a06      	ldr	r2, [pc, #24]	@ (80046c8 <vApplicationGetTimerTaskMemory+0x30>)
 80046ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80046b6:	601a      	str	r2, [r3, #0]
}
 80046b8:	bf00      	nop
 80046ba:	3714      	adds	r7, #20
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr
 80046c4:	200003ec 	.word	0x200003ec
 80046c8:	20000448 	.word	0x20000448

080046cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f103 0208 	add.w	r2, r3, #8
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f04f 32ff 	mov.w	r2, #4294967295
 80046e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f103 0208 	add.w	r2, r3, #8
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f103 0208 	add.w	r2, r3, #8
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004700:	bf00      	nop
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800471a:	bf00      	nop
 800471c:	370c      	adds	r7, #12
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr

08004726 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004726:	b480      	push	{r7}
 8004728:	b085      	sub	sp, #20
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
 800472e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	689a      	ldr	r2, [r3, #8]
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	683a      	ldr	r2, [r7, #0]
 800474a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	683a      	ldr	r2, [r7, #0]
 8004750:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	1c5a      	adds	r2, r3, #1
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	601a      	str	r2, [r3, #0]
}
 8004762:	bf00      	nop
 8004764:	3714      	adds	r7, #20
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr

0800476e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800476e:	b480      	push	{r7}
 8004770:	b085      	sub	sp, #20
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
 8004776:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004784:	d103      	bne.n	800478e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	60fb      	str	r3, [r7, #12]
 800478c:	e00c      	b.n	80047a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	3308      	adds	r3, #8
 8004792:	60fb      	str	r3, [r7, #12]
 8004794:	e002      	b.n	800479c <vListInsert+0x2e>
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	60fb      	str	r3, [r7, #12]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68ba      	ldr	r2, [r7, #8]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d2f6      	bcs.n	8004796 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	685a      	ldr	r2, [r3, #4]
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	683a      	ldr	r2, [r7, #0]
 80047c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	1c5a      	adds	r2, r3, #1
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	601a      	str	r2, [r3, #0]
}
 80047d4:	bf00      	nop
 80047d6:	3714      	adds	r7, #20
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	6892      	ldr	r2, [r2, #8]
 80047f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	6852      	ldr	r2, [r2, #4]
 8004800:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	429a      	cmp	r2, r3
 800480a:	d103      	bne.n	8004814 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	689a      	ldr	r2, [r3, #8]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	1e5a      	subs	r2, r3, #1
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
}
 8004828:	4618      	mov	r0, r3
 800482a:	3714      	adds	r7, #20
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d10b      	bne.n	8004860 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800484c:	f383 8811 	msr	BASEPRI, r3
 8004850:	f3bf 8f6f 	isb	sy
 8004854:	f3bf 8f4f 	dsb	sy
 8004858:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800485a:	bf00      	nop
 800485c:	bf00      	nop
 800485e:	e7fd      	b.n	800485c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004860:	f002 f8b2 	bl	80069c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800486c:	68f9      	ldr	r1, [r7, #12]
 800486e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004870:	fb01 f303 	mul.w	r3, r1, r3
 8004874:	441a      	add	r2, r3
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004890:	3b01      	subs	r3, #1
 8004892:	68f9      	ldr	r1, [r7, #12]
 8004894:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004896:	fb01 f303 	mul.w	r3, r1, r3
 800489a:	441a      	add	r2, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	22ff      	movs	r2, #255	@ 0xff
 80048a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	22ff      	movs	r2, #255	@ 0xff
 80048ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d114      	bne.n	80048e0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d01a      	beq.n	80048f4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	3310      	adds	r3, #16
 80048c2:	4618      	mov	r0, r3
 80048c4:	f001 f956 	bl	8005b74 <xTaskRemoveFromEventList>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d012      	beq.n	80048f4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80048ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004904 <xQueueGenericReset+0xd0>)
 80048d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048d4:	601a      	str	r2, [r3, #0]
 80048d6:	f3bf 8f4f 	dsb	sy
 80048da:	f3bf 8f6f 	isb	sy
 80048de:	e009      	b.n	80048f4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	3310      	adds	r3, #16
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7ff fef1 	bl	80046cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	3324      	adds	r3, #36	@ 0x24
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7ff feec 	bl	80046cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80048f4:	f002 f89a 	bl	8006a2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80048f8:	2301      	movs	r3, #1
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3710      	adds	r7, #16
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	e000ed04 	.word	0xe000ed04

08004908 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004908:	b580      	push	{r7, lr}
 800490a:	b08e      	sub	sp, #56	@ 0x38
 800490c:	af02      	add	r7, sp, #8
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
 8004914:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d10b      	bne.n	8004934 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800491c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004920:	f383 8811 	msr	BASEPRI, r3
 8004924:	f3bf 8f6f 	isb	sy
 8004928:	f3bf 8f4f 	dsb	sy
 800492c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800492e:	bf00      	nop
 8004930:	bf00      	nop
 8004932:	e7fd      	b.n	8004930 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10b      	bne.n	8004952 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800493a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800493e:	f383 8811 	msr	BASEPRI, r3
 8004942:	f3bf 8f6f 	isb	sy
 8004946:	f3bf 8f4f 	dsb	sy
 800494a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800494c:	bf00      	nop
 800494e:	bf00      	nop
 8004950:	e7fd      	b.n	800494e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d002      	beq.n	800495e <xQueueGenericCreateStatic+0x56>
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d001      	beq.n	8004962 <xQueueGenericCreateStatic+0x5a>
 800495e:	2301      	movs	r3, #1
 8004960:	e000      	b.n	8004964 <xQueueGenericCreateStatic+0x5c>
 8004962:	2300      	movs	r3, #0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d10b      	bne.n	8004980 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800496c:	f383 8811 	msr	BASEPRI, r3
 8004970:	f3bf 8f6f 	isb	sy
 8004974:	f3bf 8f4f 	dsb	sy
 8004978:	623b      	str	r3, [r7, #32]
}
 800497a:	bf00      	nop
 800497c:	bf00      	nop
 800497e:	e7fd      	b.n	800497c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d102      	bne.n	800498c <xQueueGenericCreateStatic+0x84>
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d101      	bne.n	8004990 <xQueueGenericCreateStatic+0x88>
 800498c:	2301      	movs	r3, #1
 800498e:	e000      	b.n	8004992 <xQueueGenericCreateStatic+0x8a>
 8004990:	2300      	movs	r3, #0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10b      	bne.n	80049ae <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800499a:	f383 8811 	msr	BASEPRI, r3
 800499e:	f3bf 8f6f 	isb	sy
 80049a2:	f3bf 8f4f 	dsb	sy
 80049a6:	61fb      	str	r3, [r7, #28]
}
 80049a8:	bf00      	nop
 80049aa:	bf00      	nop
 80049ac:	e7fd      	b.n	80049aa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80049ae:	2350      	movs	r3, #80	@ 0x50
 80049b0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	2b50      	cmp	r3, #80	@ 0x50
 80049b6:	d00b      	beq.n	80049d0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80049b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049bc:	f383 8811 	msr	BASEPRI, r3
 80049c0:	f3bf 8f6f 	isb	sy
 80049c4:	f3bf 8f4f 	dsb	sy
 80049c8:	61bb      	str	r3, [r7, #24]
}
 80049ca:	bf00      	nop
 80049cc:	bf00      	nop
 80049ce:	e7fd      	b.n	80049cc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80049d0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80049d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d00d      	beq.n	80049f8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80049dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80049e4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80049e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049ea:	9300      	str	r3, [sp, #0]
 80049ec:	4613      	mov	r3, r2
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	68b9      	ldr	r1, [r7, #8]
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f000 f840 	bl	8004a78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80049f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3730      	adds	r7, #48	@ 0x30
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b08a      	sub	sp, #40	@ 0x28
 8004a06:	af02      	add	r7, sp, #8
 8004a08:	60f8      	str	r0, [r7, #12]
 8004a0a:	60b9      	str	r1, [r7, #8]
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d10b      	bne.n	8004a2e <xQueueGenericCreate+0x2c>
	__asm volatile
 8004a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a1a:	f383 8811 	msr	BASEPRI, r3
 8004a1e:	f3bf 8f6f 	isb	sy
 8004a22:	f3bf 8f4f 	dsb	sy
 8004a26:	613b      	str	r3, [r7, #16]
}
 8004a28:	bf00      	nop
 8004a2a:	bf00      	nop
 8004a2c:	e7fd      	b.n	8004a2a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	68ba      	ldr	r2, [r7, #8]
 8004a32:	fb02 f303 	mul.w	r3, r2, r3
 8004a36:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	3350      	adds	r3, #80	@ 0x50
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f002 f8e5 	bl	8006c0c <pvPortMalloc>
 8004a42:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d011      	beq.n	8004a6e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	3350      	adds	r3, #80	@ 0x50
 8004a52:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a5c:	79fa      	ldrb	r2, [r7, #7]
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	9300      	str	r3, [sp, #0]
 8004a62:	4613      	mov	r3, r2
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	68b9      	ldr	r1, [r7, #8]
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	f000 f805 	bl	8004a78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004a6e:	69bb      	ldr	r3, [r7, #24]
	}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3720      	adds	r7, #32
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]
 8004a84:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d103      	bne.n	8004a94 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	69ba      	ldr	r2, [r7, #24]
 8004a90:	601a      	str	r2, [r3, #0]
 8004a92:	e002      	b.n	8004a9a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004aa6:	2101      	movs	r1, #1
 8004aa8:	69b8      	ldr	r0, [r7, #24]
 8004aaa:	f7ff fec3 	bl	8004834 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	78fa      	ldrb	r2, [r7, #3]
 8004ab2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004ab6:	bf00      	nop
 8004ab8:	3710      	adds	r7, #16
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
	...

08004ac0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b08e      	sub	sp, #56	@ 0x38
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	607a      	str	r2, [r7, #4]
 8004acc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d10b      	bne.n	8004af4 <xQueueGenericSend+0x34>
	__asm volatile
 8004adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ae0:	f383 8811 	msr	BASEPRI, r3
 8004ae4:	f3bf 8f6f 	isb	sy
 8004ae8:	f3bf 8f4f 	dsb	sy
 8004aec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004aee:	bf00      	nop
 8004af0:	bf00      	nop
 8004af2:	e7fd      	b.n	8004af0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d103      	bne.n	8004b02 <xQueueGenericSend+0x42>
 8004afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d101      	bne.n	8004b06 <xQueueGenericSend+0x46>
 8004b02:	2301      	movs	r3, #1
 8004b04:	e000      	b.n	8004b08 <xQueueGenericSend+0x48>
 8004b06:	2300      	movs	r3, #0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10b      	bne.n	8004b24 <xQueueGenericSend+0x64>
	__asm volatile
 8004b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b10:	f383 8811 	msr	BASEPRI, r3
 8004b14:	f3bf 8f6f 	isb	sy
 8004b18:	f3bf 8f4f 	dsb	sy
 8004b1c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004b1e:	bf00      	nop
 8004b20:	bf00      	nop
 8004b22:	e7fd      	b.n	8004b20 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d103      	bne.n	8004b32 <xQueueGenericSend+0x72>
 8004b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d101      	bne.n	8004b36 <xQueueGenericSend+0x76>
 8004b32:	2301      	movs	r3, #1
 8004b34:	e000      	b.n	8004b38 <xQueueGenericSend+0x78>
 8004b36:	2300      	movs	r3, #0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d10b      	bne.n	8004b54 <xQueueGenericSend+0x94>
	__asm volatile
 8004b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b40:	f383 8811 	msr	BASEPRI, r3
 8004b44:	f3bf 8f6f 	isb	sy
 8004b48:	f3bf 8f4f 	dsb	sy
 8004b4c:	623b      	str	r3, [r7, #32]
}
 8004b4e:	bf00      	nop
 8004b50:	bf00      	nop
 8004b52:	e7fd      	b.n	8004b50 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b54:	f001 f9ce 	bl	8005ef4 <xTaskGetSchedulerState>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d102      	bne.n	8004b64 <xQueueGenericSend+0xa4>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d101      	bne.n	8004b68 <xQueueGenericSend+0xa8>
 8004b64:	2301      	movs	r3, #1
 8004b66:	e000      	b.n	8004b6a <xQueueGenericSend+0xaa>
 8004b68:	2300      	movs	r3, #0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d10b      	bne.n	8004b86 <xQueueGenericSend+0xc6>
	__asm volatile
 8004b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b72:	f383 8811 	msr	BASEPRI, r3
 8004b76:	f3bf 8f6f 	isb	sy
 8004b7a:	f3bf 8f4f 	dsb	sy
 8004b7e:	61fb      	str	r3, [r7, #28]
}
 8004b80:	bf00      	nop
 8004b82:	bf00      	nop
 8004b84:	e7fd      	b.n	8004b82 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b86:	f001 ff1f 	bl	80069c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d302      	bcc.n	8004b9c <xQueueGenericSend+0xdc>
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d129      	bne.n	8004bf0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b9c:	683a      	ldr	r2, [r7, #0]
 8004b9e:	68b9      	ldr	r1, [r7, #8]
 8004ba0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004ba2:	f000 fa0f 	bl	8004fc4 <prvCopyDataToQueue>
 8004ba6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d010      	beq.n	8004bd2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bb2:	3324      	adds	r3, #36	@ 0x24
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f000 ffdd 	bl	8005b74 <xTaskRemoveFromEventList>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d013      	beq.n	8004be8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004bc0:	4b3f      	ldr	r3, [pc, #252]	@ (8004cc0 <xQueueGenericSend+0x200>)
 8004bc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bc6:	601a      	str	r2, [r3, #0]
 8004bc8:	f3bf 8f4f 	dsb	sy
 8004bcc:	f3bf 8f6f 	isb	sy
 8004bd0:	e00a      	b.n	8004be8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004bd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d007      	beq.n	8004be8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004bd8:	4b39      	ldr	r3, [pc, #228]	@ (8004cc0 <xQueueGenericSend+0x200>)
 8004bda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bde:	601a      	str	r2, [r3, #0]
 8004be0:	f3bf 8f4f 	dsb	sy
 8004be4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004be8:	f001 ff20 	bl	8006a2c <vPortExitCritical>
				return pdPASS;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e063      	b.n	8004cb8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d103      	bne.n	8004bfe <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004bf6:	f001 ff19 	bl	8006a2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	e05c      	b.n	8004cb8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004bfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d106      	bne.n	8004c12 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c04:	f107 0314 	add.w	r3, r7, #20
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f001 f817 	bl	8005c3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c12:	f001 ff0b 	bl	8006a2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c16:	f000 fd87 	bl	8005728 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c1a:	f001 fed5 	bl	80069c8 <vPortEnterCritical>
 8004c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c20:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004c24:	b25b      	sxtb	r3, r3
 8004c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c2a:	d103      	bne.n	8004c34 <xQueueGenericSend+0x174>
 8004c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c36:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c3a:	b25b      	sxtb	r3, r3
 8004c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c40:	d103      	bne.n	8004c4a <xQueueGenericSend+0x18a>
 8004c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c4a:	f001 feef 	bl	8006a2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c4e:	1d3a      	adds	r2, r7, #4
 8004c50:	f107 0314 	add.w	r3, r7, #20
 8004c54:	4611      	mov	r1, r2
 8004c56:	4618      	mov	r0, r3
 8004c58:	f001 f806 	bl	8005c68 <xTaskCheckForTimeOut>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d124      	bne.n	8004cac <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004c62:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c64:	f000 faa6 	bl	80051b4 <prvIsQueueFull>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d018      	beq.n	8004ca0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c70:	3310      	adds	r3, #16
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	4611      	mov	r1, r2
 8004c76:	4618      	mov	r0, r3
 8004c78:	f000 ff2a 	bl	8005ad0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004c7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c7e:	f000 fa31 	bl	80050e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004c82:	f000 fd5f 	bl	8005744 <xTaskResumeAll>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f47f af7c 	bne.w	8004b86 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8004cc0 <xQueueGenericSend+0x200>)
 8004c90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c94:	601a      	str	r2, [r3, #0]
 8004c96:	f3bf 8f4f 	dsb	sy
 8004c9a:	f3bf 8f6f 	isb	sy
 8004c9e:	e772      	b.n	8004b86 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004ca0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004ca2:	f000 fa1f 	bl	80050e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ca6:	f000 fd4d 	bl	8005744 <xTaskResumeAll>
 8004caa:	e76c      	b.n	8004b86 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004cac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004cae:	f000 fa19 	bl	80050e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004cb2:	f000 fd47 	bl	8005744 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004cb6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3738      	adds	r7, #56	@ 0x38
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	e000ed04 	.word	0xe000ed04

08004cc4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b090      	sub	sp, #64	@ 0x40
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	607a      	str	r2, [r7, #4]
 8004cd0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d10b      	bne.n	8004cf4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ce0:	f383 8811 	msr	BASEPRI, r3
 8004ce4:	f3bf 8f6f 	isb	sy
 8004ce8:	f3bf 8f4f 	dsb	sy
 8004cec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004cee:	bf00      	nop
 8004cf0:	bf00      	nop
 8004cf2:	e7fd      	b.n	8004cf0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d103      	bne.n	8004d02 <xQueueGenericSendFromISR+0x3e>
 8004cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <xQueueGenericSendFromISR+0x42>
 8004d02:	2301      	movs	r3, #1
 8004d04:	e000      	b.n	8004d08 <xQueueGenericSendFromISR+0x44>
 8004d06:	2300      	movs	r3, #0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d10b      	bne.n	8004d24 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d10:	f383 8811 	msr	BASEPRI, r3
 8004d14:	f3bf 8f6f 	isb	sy
 8004d18:	f3bf 8f4f 	dsb	sy
 8004d1c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004d1e:	bf00      	nop
 8004d20:	bf00      	nop
 8004d22:	e7fd      	b.n	8004d20 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	d103      	bne.n	8004d32 <xQueueGenericSendFromISR+0x6e>
 8004d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d101      	bne.n	8004d36 <xQueueGenericSendFromISR+0x72>
 8004d32:	2301      	movs	r3, #1
 8004d34:	e000      	b.n	8004d38 <xQueueGenericSendFromISR+0x74>
 8004d36:	2300      	movs	r3, #0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d10b      	bne.n	8004d54 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d40:	f383 8811 	msr	BASEPRI, r3
 8004d44:	f3bf 8f6f 	isb	sy
 8004d48:	f3bf 8f4f 	dsb	sy
 8004d4c:	623b      	str	r3, [r7, #32]
}
 8004d4e:	bf00      	nop
 8004d50:	bf00      	nop
 8004d52:	e7fd      	b.n	8004d50 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d54:	f001 ff18 	bl	8006b88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004d58:	f3ef 8211 	mrs	r2, BASEPRI
 8004d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d60:	f383 8811 	msr	BASEPRI, r3
 8004d64:	f3bf 8f6f 	isb	sy
 8004d68:	f3bf 8f4f 	dsb	sy
 8004d6c:	61fa      	str	r2, [r7, #28]
 8004d6e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004d70:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d72:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d302      	bcc.n	8004d86 <xQueueGenericSendFromISR+0xc2>
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d12f      	bne.n	8004de6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d88:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d8c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d96:	683a      	ldr	r2, [r7, #0]
 8004d98:	68b9      	ldr	r1, [r7, #8]
 8004d9a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004d9c:	f000 f912 	bl	8004fc4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004da0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da8:	d112      	bne.n	8004dd0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d016      	beq.n	8004de0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004db4:	3324      	adds	r3, #36	@ 0x24
 8004db6:	4618      	mov	r0, r3
 8004db8:	f000 fedc 	bl	8005b74 <xTaskRemoveFromEventList>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00e      	beq.n	8004de0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00b      	beq.n	8004de0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	601a      	str	r2, [r3, #0]
 8004dce:	e007      	b.n	8004de0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004dd0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	b25a      	sxtb	r2, r3
 8004dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ddc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004de0:	2301      	movs	r3, #1
 8004de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004de4:	e001      	b.n	8004dea <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004de6:	2300      	movs	r3, #0
 8004de8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004dea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dec:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004df4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004df6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3740      	adds	r7, #64	@ 0x40
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b08c      	sub	sp, #48	@ 0x30
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10b      	bne.n	8004e32 <xQueueReceive+0x32>
	__asm volatile
 8004e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e1e:	f383 8811 	msr	BASEPRI, r3
 8004e22:	f3bf 8f6f 	isb	sy
 8004e26:	f3bf 8f4f 	dsb	sy
 8004e2a:	623b      	str	r3, [r7, #32]
}
 8004e2c:	bf00      	nop
 8004e2e:	bf00      	nop
 8004e30:	e7fd      	b.n	8004e2e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d103      	bne.n	8004e40 <xQueueReceive+0x40>
 8004e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d101      	bne.n	8004e44 <xQueueReceive+0x44>
 8004e40:	2301      	movs	r3, #1
 8004e42:	e000      	b.n	8004e46 <xQueueReceive+0x46>
 8004e44:	2300      	movs	r3, #0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10b      	bne.n	8004e62 <xQueueReceive+0x62>
	__asm volatile
 8004e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e4e:	f383 8811 	msr	BASEPRI, r3
 8004e52:	f3bf 8f6f 	isb	sy
 8004e56:	f3bf 8f4f 	dsb	sy
 8004e5a:	61fb      	str	r3, [r7, #28]
}
 8004e5c:	bf00      	nop
 8004e5e:	bf00      	nop
 8004e60:	e7fd      	b.n	8004e5e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e62:	f001 f847 	bl	8005ef4 <xTaskGetSchedulerState>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d102      	bne.n	8004e72 <xQueueReceive+0x72>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d101      	bne.n	8004e76 <xQueueReceive+0x76>
 8004e72:	2301      	movs	r3, #1
 8004e74:	e000      	b.n	8004e78 <xQueueReceive+0x78>
 8004e76:	2300      	movs	r3, #0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d10b      	bne.n	8004e94 <xQueueReceive+0x94>
	__asm volatile
 8004e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e80:	f383 8811 	msr	BASEPRI, r3
 8004e84:	f3bf 8f6f 	isb	sy
 8004e88:	f3bf 8f4f 	dsb	sy
 8004e8c:	61bb      	str	r3, [r7, #24]
}
 8004e8e:	bf00      	nop
 8004e90:	bf00      	nop
 8004e92:	e7fd      	b.n	8004e90 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e94:	f001 fd98 	bl	80069c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e9c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d01f      	beq.n	8004ee4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004ea4:	68b9      	ldr	r1, [r7, #8]
 8004ea6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ea8:	f000 f8f6 	bl	8005098 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eae:	1e5a      	subs	r2, r3, #1
 8004eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eb2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d00f      	beq.n	8004edc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ebe:	3310      	adds	r3, #16
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f000 fe57 	bl	8005b74 <xTaskRemoveFromEventList>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d007      	beq.n	8004edc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004ecc:	4b3c      	ldr	r3, [pc, #240]	@ (8004fc0 <xQueueReceive+0x1c0>)
 8004ece:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ed2:	601a      	str	r2, [r3, #0]
 8004ed4:	f3bf 8f4f 	dsb	sy
 8004ed8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004edc:	f001 fda6 	bl	8006a2c <vPortExitCritical>
				return pdPASS;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e069      	b.n	8004fb8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d103      	bne.n	8004ef2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004eea:	f001 fd9f 	bl	8006a2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	e062      	b.n	8004fb8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d106      	bne.n	8004f06 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ef8:	f107 0310 	add.w	r3, r7, #16
 8004efc:	4618      	mov	r0, r3
 8004efe:	f000 fe9d 	bl	8005c3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004f02:	2301      	movs	r3, #1
 8004f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004f06:	f001 fd91 	bl	8006a2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f0a:	f000 fc0d 	bl	8005728 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f0e:	f001 fd5b 	bl	80069c8 <vPortEnterCritical>
 8004f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f14:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f18:	b25b      	sxtb	r3, r3
 8004f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f1e:	d103      	bne.n	8004f28 <xQueueReceive+0x128>
 8004f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f2a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f2e:	b25b      	sxtb	r3, r3
 8004f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f34:	d103      	bne.n	8004f3e <xQueueReceive+0x13e>
 8004f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f3e:	f001 fd75 	bl	8006a2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f42:	1d3a      	adds	r2, r7, #4
 8004f44:	f107 0310 	add.w	r3, r7, #16
 8004f48:	4611      	mov	r1, r2
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f000 fe8c 	bl	8005c68 <xTaskCheckForTimeOut>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d123      	bne.n	8004f9e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f58:	f000 f916 	bl	8005188 <prvIsQueueEmpty>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d017      	beq.n	8004f92 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f64:	3324      	adds	r3, #36	@ 0x24
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	4611      	mov	r1, r2
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f000 fdb0 	bl	8005ad0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004f70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f72:	f000 f8b7 	bl	80050e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004f76:	f000 fbe5 	bl	8005744 <xTaskResumeAll>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d189      	bne.n	8004e94 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004f80:	4b0f      	ldr	r3, [pc, #60]	@ (8004fc0 <xQueueReceive+0x1c0>)
 8004f82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f86:	601a      	str	r2, [r3, #0]
 8004f88:	f3bf 8f4f 	dsb	sy
 8004f8c:	f3bf 8f6f 	isb	sy
 8004f90:	e780      	b.n	8004e94 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004f92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f94:	f000 f8a6 	bl	80050e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f98:	f000 fbd4 	bl	8005744 <xTaskResumeAll>
 8004f9c:	e77a      	b.n	8004e94 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004f9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004fa0:	f000 f8a0 	bl	80050e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004fa4:	f000 fbce 	bl	8005744 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004fa8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004faa:	f000 f8ed 	bl	8005188 <prvIsQueueEmpty>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f43f af6f 	beq.w	8004e94 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004fb6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3730      	adds	r7, #48	@ 0x30
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	e000ed04 	.word	0xe000ed04

08004fc4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b086      	sub	sp, #24
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fd8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d10d      	bne.n	8004ffe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d14d      	bne.n	8005086 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f000 ff9e 	bl	8005f30 <xTaskPriorityDisinherit>
 8004ff4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	609a      	str	r2, [r3, #8]
 8004ffc:	e043      	b.n	8005086 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d119      	bne.n	8005038 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6858      	ldr	r0, [r3, #4]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800500c:	461a      	mov	r2, r3
 800500e:	68b9      	ldr	r1, [r7, #8]
 8005010:	f002 f816 	bl	8007040 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	685a      	ldr	r2, [r3, #4]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800501c:	441a      	add	r2, r3
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	685a      	ldr	r2, [r3, #4]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	429a      	cmp	r2, r3
 800502c:	d32b      	bcc.n	8005086 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	605a      	str	r2, [r3, #4]
 8005036:	e026      	b.n	8005086 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	68d8      	ldr	r0, [r3, #12]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005040:	461a      	mov	r2, r3
 8005042:	68b9      	ldr	r1, [r7, #8]
 8005044:	f001 fffc 	bl	8007040 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	68da      	ldr	r2, [r3, #12]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005050:	425b      	negs	r3, r3
 8005052:	441a      	add	r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	68da      	ldr	r2, [r3, #12]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	429a      	cmp	r2, r3
 8005062:	d207      	bcs.n	8005074 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	689a      	ldr	r2, [r3, #8]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800506c:	425b      	negs	r3, r3
 800506e:	441a      	add	r2, r3
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b02      	cmp	r3, #2
 8005078:	d105      	bne.n	8005086 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d002      	beq.n	8005086 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	3b01      	subs	r3, #1
 8005084:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	1c5a      	adds	r2, r3, #1
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800508e:	697b      	ldr	r3, [r7, #20]
}
 8005090:	4618      	mov	r0, r3
 8005092:	3718      	adds	r7, #24
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d018      	beq.n	80050dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	68da      	ldr	r2, [r3, #12]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b2:	441a      	add	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	68da      	ldr	r2, [r3, #12]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d303      	bcc.n	80050cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	68d9      	ldr	r1, [r3, #12]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d4:	461a      	mov	r2, r3
 80050d6:	6838      	ldr	r0, [r7, #0]
 80050d8:	f001 ffb2 	bl	8007040 <memcpy>
	}
}
 80050dc:	bf00      	nop
 80050de:	3708      	adds	r7, #8
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80050ec:	f001 fc6c 	bl	80069c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80050f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80050f8:	e011      	b.n	800511e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d012      	beq.n	8005128 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	3324      	adds	r3, #36	@ 0x24
 8005106:	4618      	mov	r0, r3
 8005108:	f000 fd34 	bl	8005b74 <xTaskRemoveFromEventList>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d001      	beq.n	8005116 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005112:	f000 fe0d 	bl	8005d30 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005116:	7bfb      	ldrb	r3, [r7, #15]
 8005118:	3b01      	subs	r3, #1
 800511a:	b2db      	uxtb	r3, r3
 800511c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800511e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005122:	2b00      	cmp	r3, #0
 8005124:	dce9      	bgt.n	80050fa <prvUnlockQueue+0x16>
 8005126:	e000      	b.n	800512a <prvUnlockQueue+0x46>
					break;
 8005128:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	22ff      	movs	r2, #255	@ 0xff
 800512e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005132:	f001 fc7b 	bl	8006a2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005136:	f001 fc47 	bl	80069c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005140:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005142:	e011      	b.n	8005168 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d012      	beq.n	8005172 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	3310      	adds	r3, #16
 8005150:	4618      	mov	r0, r3
 8005152:	f000 fd0f 	bl	8005b74 <xTaskRemoveFromEventList>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d001      	beq.n	8005160 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800515c:	f000 fde8 	bl	8005d30 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005160:	7bbb      	ldrb	r3, [r7, #14]
 8005162:	3b01      	subs	r3, #1
 8005164:	b2db      	uxtb	r3, r3
 8005166:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005168:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800516c:	2b00      	cmp	r3, #0
 800516e:	dce9      	bgt.n	8005144 <prvUnlockQueue+0x60>
 8005170:	e000      	b.n	8005174 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005172:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	22ff      	movs	r2, #255	@ 0xff
 8005178:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800517c:	f001 fc56 	bl	8006a2c <vPortExitCritical>
}
 8005180:	bf00      	nop
 8005182:	3710      	adds	r7, #16
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005190:	f001 fc1a 	bl	80069c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005198:	2b00      	cmp	r3, #0
 800519a:	d102      	bne.n	80051a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800519c:	2301      	movs	r3, #1
 800519e:	60fb      	str	r3, [r7, #12]
 80051a0:	e001      	b.n	80051a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80051a2:	2300      	movs	r3, #0
 80051a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80051a6:	f001 fc41 	bl	8006a2c <vPortExitCritical>

	return xReturn;
 80051aa:	68fb      	ldr	r3, [r7, #12]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3710      	adds	r7, #16
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80051bc:	f001 fc04 	bl	80069c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d102      	bne.n	80051d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80051cc:	2301      	movs	r3, #1
 80051ce:	60fb      	str	r3, [r7, #12]
 80051d0:	e001      	b.n	80051d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80051d2:	2300      	movs	r3, #0
 80051d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80051d6:	f001 fc29 	bl	8006a2c <vPortExitCritical>

	return xReturn;
 80051da:	68fb      	ldr	r3, [r7, #12]
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3710      	adds	r7, #16
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80051e4:	b480      	push	{r7}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80051ee:	2300      	movs	r3, #0
 80051f0:	60fb      	str	r3, [r7, #12]
 80051f2:	e014      	b.n	800521e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80051f4:	4a0f      	ldr	r2, [pc, #60]	@ (8005234 <vQueueAddToRegistry+0x50>)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d10b      	bne.n	8005218 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005200:	490c      	ldr	r1, [pc, #48]	@ (8005234 <vQueueAddToRegistry+0x50>)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	683a      	ldr	r2, [r7, #0]
 8005206:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800520a:	4a0a      	ldr	r2, [pc, #40]	@ (8005234 <vQueueAddToRegistry+0x50>)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	00db      	lsls	r3, r3, #3
 8005210:	4413      	add	r3, r2
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005216:	e006      	b.n	8005226 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	3301      	adds	r3, #1
 800521c:	60fb      	str	r3, [r7, #12]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2b07      	cmp	r3, #7
 8005222:	d9e7      	bls.n	80051f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005224:	bf00      	nop
 8005226:	bf00      	nop
 8005228:	3714      	adds	r7, #20
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	20000848 	.word	0x20000848

08005238 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005238:	b580      	push	{r7, lr}
 800523a:	b086      	sub	sp, #24
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005248:	f001 fbbe 	bl	80069c8 <vPortEnterCritical>
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005252:	b25b      	sxtb	r3, r3
 8005254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005258:	d103      	bne.n	8005262 <vQueueWaitForMessageRestricted+0x2a>
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005268:	b25b      	sxtb	r3, r3
 800526a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800526e:	d103      	bne.n	8005278 <vQueueWaitForMessageRestricted+0x40>
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005278:	f001 fbd8 	bl	8006a2c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005280:	2b00      	cmp	r3, #0
 8005282:	d106      	bne.n	8005292 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	3324      	adds	r3, #36	@ 0x24
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	68b9      	ldr	r1, [r7, #8]
 800528c:	4618      	mov	r0, r3
 800528e:	f000 fc45 	bl	8005b1c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005292:	6978      	ldr	r0, [r7, #20]
 8005294:	f7ff ff26 	bl	80050e4 <prvUnlockQueue>
	}
 8005298:	bf00      	nop
 800529a:	3718      	adds	r7, #24
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b08e      	sub	sp, #56	@ 0x38
 80052a4:	af04      	add	r7, sp, #16
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]
 80052ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80052ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d10b      	bne.n	80052cc <xTaskCreateStatic+0x2c>
	__asm volatile
 80052b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052b8:	f383 8811 	msr	BASEPRI, r3
 80052bc:	f3bf 8f6f 	isb	sy
 80052c0:	f3bf 8f4f 	dsb	sy
 80052c4:	623b      	str	r3, [r7, #32]
}
 80052c6:	bf00      	nop
 80052c8:	bf00      	nop
 80052ca:	e7fd      	b.n	80052c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80052cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d10b      	bne.n	80052ea <xTaskCreateStatic+0x4a>
	__asm volatile
 80052d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052d6:	f383 8811 	msr	BASEPRI, r3
 80052da:	f3bf 8f6f 	isb	sy
 80052de:	f3bf 8f4f 	dsb	sy
 80052e2:	61fb      	str	r3, [r7, #28]
}
 80052e4:	bf00      	nop
 80052e6:	bf00      	nop
 80052e8:	e7fd      	b.n	80052e6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80052ea:	235c      	movs	r3, #92	@ 0x5c
 80052ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	2b5c      	cmp	r3, #92	@ 0x5c
 80052f2:	d00b      	beq.n	800530c <xTaskCreateStatic+0x6c>
	__asm volatile
 80052f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052f8:	f383 8811 	msr	BASEPRI, r3
 80052fc:	f3bf 8f6f 	isb	sy
 8005300:	f3bf 8f4f 	dsb	sy
 8005304:	61bb      	str	r3, [r7, #24]
}
 8005306:	bf00      	nop
 8005308:	bf00      	nop
 800530a:	e7fd      	b.n	8005308 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800530c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800530e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005310:	2b00      	cmp	r3, #0
 8005312:	d01e      	beq.n	8005352 <xTaskCreateStatic+0xb2>
 8005314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005316:	2b00      	cmp	r3, #0
 8005318:	d01b      	beq.n	8005352 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800531a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800531c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800531e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005320:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005322:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005326:	2202      	movs	r2, #2
 8005328:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800532c:	2300      	movs	r3, #0
 800532e:	9303      	str	r3, [sp, #12]
 8005330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005332:	9302      	str	r3, [sp, #8]
 8005334:	f107 0314 	add.w	r3, r7, #20
 8005338:	9301      	str	r3, [sp, #4]
 800533a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800533c:	9300      	str	r3, [sp, #0]
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	68b9      	ldr	r1, [r7, #8]
 8005344:	68f8      	ldr	r0, [r7, #12]
 8005346:	f000 f850 	bl	80053ea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800534a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800534c:	f000 f8de 	bl	800550c <prvAddNewTaskToReadyList>
 8005350:	e001      	b.n	8005356 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005352:	2300      	movs	r3, #0
 8005354:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005356:	697b      	ldr	r3, [r7, #20]
	}
 8005358:	4618      	mov	r0, r3
 800535a:	3728      	adds	r7, #40	@ 0x28
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005360:	b580      	push	{r7, lr}
 8005362:	b08c      	sub	sp, #48	@ 0x30
 8005364:	af04      	add	r7, sp, #16
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	603b      	str	r3, [r7, #0]
 800536c:	4613      	mov	r3, r2
 800536e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005370:	88fb      	ldrh	r3, [r7, #6]
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4618      	mov	r0, r3
 8005376:	f001 fc49 	bl	8006c0c <pvPortMalloc>
 800537a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00e      	beq.n	80053a0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005382:	205c      	movs	r0, #92	@ 0x5c
 8005384:	f001 fc42 	bl	8006c0c <pvPortMalloc>
 8005388:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d003      	beq.n	8005398 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	631a      	str	r2, [r3, #48]	@ 0x30
 8005396:	e005      	b.n	80053a4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005398:	6978      	ldr	r0, [r7, #20]
 800539a:	f001 fd05 	bl	8006da8 <vPortFree>
 800539e:	e001      	b.n	80053a4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80053a0:	2300      	movs	r3, #0
 80053a2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d017      	beq.n	80053da <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80053b2:	88fa      	ldrh	r2, [r7, #6]
 80053b4:	2300      	movs	r3, #0
 80053b6:	9303      	str	r3, [sp, #12]
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	9302      	str	r3, [sp, #8]
 80053bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053be:	9301      	str	r3, [sp, #4]
 80053c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053c2:	9300      	str	r3, [sp, #0]
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	68b9      	ldr	r1, [r7, #8]
 80053c8:	68f8      	ldr	r0, [r7, #12]
 80053ca:	f000 f80e 	bl	80053ea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80053ce:	69f8      	ldr	r0, [r7, #28]
 80053d0:	f000 f89c 	bl	800550c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80053d4:	2301      	movs	r3, #1
 80053d6:	61bb      	str	r3, [r7, #24]
 80053d8:	e002      	b.n	80053e0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80053da:	f04f 33ff 	mov.w	r3, #4294967295
 80053de:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80053e0:	69bb      	ldr	r3, [r7, #24]
	}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3720      	adds	r7, #32
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}

080053ea <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b088      	sub	sp, #32
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	60f8      	str	r0, [r7, #12]
 80053f2:	60b9      	str	r1, [r7, #8]
 80053f4:	607a      	str	r2, [r7, #4]
 80053f6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80053f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053fa:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	461a      	mov	r2, r3
 8005402:	21a5      	movs	r1, #165	@ 0xa5
 8005404:	f001 fdf0 	bl	8006fe8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800540a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005412:	3b01      	subs	r3, #1
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	4413      	add	r3, r2
 8005418:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	f023 0307 	bic.w	r3, r3, #7
 8005420:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	f003 0307 	and.w	r3, r3, #7
 8005428:	2b00      	cmp	r3, #0
 800542a:	d00b      	beq.n	8005444 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800542c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005430:	f383 8811 	msr	BASEPRI, r3
 8005434:	f3bf 8f6f 	isb	sy
 8005438:	f3bf 8f4f 	dsb	sy
 800543c:	617b      	str	r3, [r7, #20]
}
 800543e:	bf00      	nop
 8005440:	bf00      	nop
 8005442:	e7fd      	b.n	8005440 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d01f      	beq.n	800548a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800544a:	2300      	movs	r3, #0
 800544c:	61fb      	str	r3, [r7, #28]
 800544e:	e012      	b.n	8005476 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005450:	68ba      	ldr	r2, [r7, #8]
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	4413      	add	r3, r2
 8005456:	7819      	ldrb	r1, [r3, #0]
 8005458:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	4413      	add	r3, r2
 800545e:	3334      	adds	r3, #52	@ 0x34
 8005460:	460a      	mov	r2, r1
 8005462:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005464:	68ba      	ldr	r2, [r7, #8]
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	4413      	add	r3, r2
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d006      	beq.n	800547e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	3301      	adds	r3, #1
 8005474:	61fb      	str	r3, [r7, #28]
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	2b0f      	cmp	r3, #15
 800547a:	d9e9      	bls.n	8005450 <prvInitialiseNewTask+0x66>
 800547c:	e000      	b.n	8005480 <prvInitialiseNewTask+0x96>
			{
				break;
 800547e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005482:	2200      	movs	r2, #0
 8005484:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005488:	e003      	b.n	8005492 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800548a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800548c:	2200      	movs	r2, #0
 800548e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005494:	2b37      	cmp	r3, #55	@ 0x37
 8005496:	d901      	bls.n	800549c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005498:	2337      	movs	r3, #55	@ 0x37
 800549a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800549c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800549e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054a0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80054a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054a6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80054a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054aa:	2200      	movs	r2, #0
 80054ac:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80054ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054b0:	3304      	adds	r3, #4
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7ff f92a 	bl	800470c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80054b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ba:	3318      	adds	r3, #24
 80054bc:	4618      	mov	r0, r3
 80054be:	f7ff f925 	bl	800470c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80054c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054c6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ca:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80054ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054d0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80054d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054d6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80054d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054da:	2200      	movs	r2, #0
 80054dc:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80054de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80054e6:	683a      	ldr	r2, [r7, #0]
 80054e8:	68f9      	ldr	r1, [r7, #12]
 80054ea:	69b8      	ldr	r0, [r7, #24]
 80054ec:	f001 f93e 	bl	800676c <pxPortInitialiseStack>
 80054f0:	4602      	mov	r2, r0
 80054f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054f4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80054f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d002      	beq.n	8005502 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80054fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005500:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005502:	bf00      	nop
 8005504:	3720      	adds	r7, #32
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
	...

0800550c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005514:	f001 fa58 	bl	80069c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005518:	4b2d      	ldr	r3, [pc, #180]	@ (80055d0 <prvAddNewTaskToReadyList+0xc4>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	3301      	adds	r3, #1
 800551e:	4a2c      	ldr	r2, [pc, #176]	@ (80055d0 <prvAddNewTaskToReadyList+0xc4>)
 8005520:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005522:	4b2c      	ldr	r3, [pc, #176]	@ (80055d4 <prvAddNewTaskToReadyList+0xc8>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d109      	bne.n	800553e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800552a:	4a2a      	ldr	r2, [pc, #168]	@ (80055d4 <prvAddNewTaskToReadyList+0xc8>)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005530:	4b27      	ldr	r3, [pc, #156]	@ (80055d0 <prvAddNewTaskToReadyList+0xc4>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d110      	bne.n	800555a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005538:	f000 fc1e 	bl	8005d78 <prvInitialiseTaskLists>
 800553c:	e00d      	b.n	800555a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800553e:	4b26      	ldr	r3, [pc, #152]	@ (80055d8 <prvAddNewTaskToReadyList+0xcc>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d109      	bne.n	800555a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005546:	4b23      	ldr	r3, [pc, #140]	@ (80055d4 <prvAddNewTaskToReadyList+0xc8>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005550:	429a      	cmp	r2, r3
 8005552:	d802      	bhi.n	800555a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005554:	4a1f      	ldr	r2, [pc, #124]	@ (80055d4 <prvAddNewTaskToReadyList+0xc8>)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800555a:	4b20      	ldr	r3, [pc, #128]	@ (80055dc <prvAddNewTaskToReadyList+0xd0>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	3301      	adds	r3, #1
 8005560:	4a1e      	ldr	r2, [pc, #120]	@ (80055dc <prvAddNewTaskToReadyList+0xd0>)
 8005562:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005564:	4b1d      	ldr	r3, [pc, #116]	@ (80055dc <prvAddNewTaskToReadyList+0xd0>)
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005570:	4b1b      	ldr	r3, [pc, #108]	@ (80055e0 <prvAddNewTaskToReadyList+0xd4>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	429a      	cmp	r2, r3
 8005576:	d903      	bls.n	8005580 <prvAddNewTaskToReadyList+0x74>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800557c:	4a18      	ldr	r2, [pc, #96]	@ (80055e0 <prvAddNewTaskToReadyList+0xd4>)
 800557e:	6013      	str	r3, [r2, #0]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005584:	4613      	mov	r3, r2
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	4413      	add	r3, r2
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	4a15      	ldr	r2, [pc, #84]	@ (80055e4 <prvAddNewTaskToReadyList+0xd8>)
 800558e:	441a      	add	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	3304      	adds	r3, #4
 8005594:	4619      	mov	r1, r3
 8005596:	4610      	mov	r0, r2
 8005598:	f7ff f8c5 	bl	8004726 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800559c:	f001 fa46 	bl	8006a2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80055a0:	4b0d      	ldr	r3, [pc, #52]	@ (80055d8 <prvAddNewTaskToReadyList+0xcc>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00e      	beq.n	80055c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80055a8:	4b0a      	ldr	r3, [pc, #40]	@ (80055d4 <prvAddNewTaskToReadyList+0xc8>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d207      	bcs.n	80055c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80055b6:	4b0c      	ldr	r3, [pc, #48]	@ (80055e8 <prvAddNewTaskToReadyList+0xdc>)
 80055b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055bc:	601a      	str	r2, [r3, #0]
 80055be:	f3bf 8f4f 	dsb	sy
 80055c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055c6:	bf00      	nop
 80055c8:	3708      	adds	r7, #8
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	20000d5c 	.word	0x20000d5c
 80055d4:	20000888 	.word	0x20000888
 80055d8:	20000d68 	.word	0x20000d68
 80055dc:	20000d78 	.word	0x20000d78
 80055e0:	20000d64 	.word	0x20000d64
 80055e4:	2000088c 	.word	0x2000088c
 80055e8:	e000ed04 	.word	0xe000ed04

080055ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80055f4:	2300      	movs	r3, #0
 80055f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d018      	beq.n	8005630 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80055fe:	4b14      	ldr	r3, [pc, #80]	@ (8005650 <vTaskDelay+0x64>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00b      	beq.n	800561e <vTaskDelay+0x32>
	__asm volatile
 8005606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800560a:	f383 8811 	msr	BASEPRI, r3
 800560e:	f3bf 8f6f 	isb	sy
 8005612:	f3bf 8f4f 	dsb	sy
 8005616:	60bb      	str	r3, [r7, #8]
}
 8005618:	bf00      	nop
 800561a:	bf00      	nop
 800561c:	e7fd      	b.n	800561a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800561e:	f000 f883 	bl	8005728 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005622:	2100      	movs	r1, #0
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f000 fcf3 	bl	8006010 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800562a:	f000 f88b 	bl	8005744 <xTaskResumeAll>
 800562e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d107      	bne.n	8005646 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005636:	4b07      	ldr	r3, [pc, #28]	@ (8005654 <vTaskDelay+0x68>)
 8005638:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800563c:	601a      	str	r2, [r3, #0]
 800563e:	f3bf 8f4f 	dsb	sy
 8005642:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005646:	bf00      	nop
 8005648:	3710      	adds	r7, #16
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	20000d84 	.word	0x20000d84
 8005654:	e000ed04 	.word	0xe000ed04

08005658 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b08a      	sub	sp, #40	@ 0x28
 800565c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800565e:	2300      	movs	r3, #0
 8005660:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005662:	2300      	movs	r3, #0
 8005664:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005666:	463a      	mov	r2, r7
 8005668:	1d39      	adds	r1, r7, #4
 800566a:	f107 0308 	add.w	r3, r7, #8
 800566e:	4618      	mov	r0, r3
 8005670:	f7fe fff8 	bl	8004664 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005674:	6839      	ldr	r1, [r7, #0]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	68ba      	ldr	r2, [r7, #8]
 800567a:	9202      	str	r2, [sp, #8]
 800567c:	9301      	str	r3, [sp, #4]
 800567e:	2300      	movs	r3, #0
 8005680:	9300      	str	r3, [sp, #0]
 8005682:	2300      	movs	r3, #0
 8005684:	460a      	mov	r2, r1
 8005686:	4922      	ldr	r1, [pc, #136]	@ (8005710 <vTaskStartScheduler+0xb8>)
 8005688:	4822      	ldr	r0, [pc, #136]	@ (8005714 <vTaskStartScheduler+0xbc>)
 800568a:	f7ff fe09 	bl	80052a0 <xTaskCreateStatic>
 800568e:	4603      	mov	r3, r0
 8005690:	4a21      	ldr	r2, [pc, #132]	@ (8005718 <vTaskStartScheduler+0xc0>)
 8005692:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005694:	4b20      	ldr	r3, [pc, #128]	@ (8005718 <vTaskStartScheduler+0xc0>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d002      	beq.n	80056a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800569c:	2301      	movs	r3, #1
 800569e:	617b      	str	r3, [r7, #20]
 80056a0:	e001      	b.n	80056a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80056a2:	2300      	movs	r3, #0
 80056a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d102      	bne.n	80056b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80056ac:	f000 fd04 	bl	80060b8 <xTimerCreateTimerTask>
 80056b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d116      	bne.n	80056e6 <vTaskStartScheduler+0x8e>
	__asm volatile
 80056b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056bc:	f383 8811 	msr	BASEPRI, r3
 80056c0:	f3bf 8f6f 	isb	sy
 80056c4:	f3bf 8f4f 	dsb	sy
 80056c8:	613b      	str	r3, [r7, #16]
}
 80056ca:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80056cc:	4b13      	ldr	r3, [pc, #76]	@ (800571c <vTaskStartScheduler+0xc4>)
 80056ce:	f04f 32ff 	mov.w	r2, #4294967295
 80056d2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80056d4:	4b12      	ldr	r3, [pc, #72]	@ (8005720 <vTaskStartScheduler+0xc8>)
 80056d6:	2201      	movs	r2, #1
 80056d8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80056da:	4b12      	ldr	r3, [pc, #72]	@ (8005724 <vTaskStartScheduler+0xcc>)
 80056dc:	2200      	movs	r2, #0
 80056de:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80056e0:	f001 f8ce 	bl	8006880 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80056e4:	e00f      	b.n	8005706 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ec:	d10b      	bne.n	8005706 <vTaskStartScheduler+0xae>
	__asm volatile
 80056ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f2:	f383 8811 	msr	BASEPRI, r3
 80056f6:	f3bf 8f6f 	isb	sy
 80056fa:	f3bf 8f4f 	dsb	sy
 80056fe:	60fb      	str	r3, [r7, #12]
}
 8005700:	bf00      	nop
 8005702:	bf00      	nop
 8005704:	e7fd      	b.n	8005702 <vTaskStartScheduler+0xaa>
}
 8005706:	bf00      	nop
 8005708:	3718      	adds	r7, #24
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	08007098 	.word	0x08007098
 8005714:	08005d49 	.word	0x08005d49
 8005718:	20000d80 	.word	0x20000d80
 800571c:	20000d7c 	.word	0x20000d7c
 8005720:	20000d68 	.word	0x20000d68
 8005724:	20000d60 	.word	0x20000d60

08005728 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005728:	b480      	push	{r7}
 800572a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800572c:	4b04      	ldr	r3, [pc, #16]	@ (8005740 <vTaskSuspendAll+0x18>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	3301      	adds	r3, #1
 8005732:	4a03      	ldr	r2, [pc, #12]	@ (8005740 <vTaskSuspendAll+0x18>)
 8005734:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005736:	bf00      	nop
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr
 8005740:	20000d84 	.word	0x20000d84

08005744 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800574a:	2300      	movs	r3, #0
 800574c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800574e:	2300      	movs	r3, #0
 8005750:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005752:	4b42      	ldr	r3, [pc, #264]	@ (800585c <xTaskResumeAll+0x118>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d10b      	bne.n	8005772 <xTaskResumeAll+0x2e>
	__asm volatile
 800575a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800575e:	f383 8811 	msr	BASEPRI, r3
 8005762:	f3bf 8f6f 	isb	sy
 8005766:	f3bf 8f4f 	dsb	sy
 800576a:	603b      	str	r3, [r7, #0]
}
 800576c:	bf00      	nop
 800576e:	bf00      	nop
 8005770:	e7fd      	b.n	800576e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005772:	f001 f929 	bl	80069c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005776:	4b39      	ldr	r3, [pc, #228]	@ (800585c <xTaskResumeAll+0x118>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	3b01      	subs	r3, #1
 800577c:	4a37      	ldr	r2, [pc, #220]	@ (800585c <xTaskResumeAll+0x118>)
 800577e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005780:	4b36      	ldr	r3, [pc, #216]	@ (800585c <xTaskResumeAll+0x118>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d162      	bne.n	800584e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005788:	4b35      	ldr	r3, [pc, #212]	@ (8005860 <xTaskResumeAll+0x11c>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d05e      	beq.n	800584e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005790:	e02f      	b.n	80057f2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005792:	4b34      	ldr	r3, [pc, #208]	@ (8005864 <xTaskResumeAll+0x120>)
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	3318      	adds	r3, #24
 800579e:	4618      	mov	r0, r3
 80057a0:	f7ff f81e 	bl	80047e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	3304      	adds	r3, #4
 80057a8:	4618      	mov	r0, r3
 80057aa:	f7ff f819 	bl	80047e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057b2:	4b2d      	ldr	r3, [pc, #180]	@ (8005868 <xTaskResumeAll+0x124>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d903      	bls.n	80057c2 <xTaskResumeAll+0x7e>
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057be:	4a2a      	ldr	r2, [pc, #168]	@ (8005868 <xTaskResumeAll+0x124>)
 80057c0:	6013      	str	r3, [r2, #0]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057c6:	4613      	mov	r3, r2
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	4413      	add	r3, r2
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	4a27      	ldr	r2, [pc, #156]	@ (800586c <xTaskResumeAll+0x128>)
 80057d0:	441a      	add	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	3304      	adds	r3, #4
 80057d6:	4619      	mov	r1, r3
 80057d8:	4610      	mov	r0, r2
 80057da:	f7fe ffa4 	bl	8004726 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057e2:	4b23      	ldr	r3, [pc, #140]	@ (8005870 <xTaskResumeAll+0x12c>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d302      	bcc.n	80057f2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80057ec:	4b21      	ldr	r3, [pc, #132]	@ (8005874 <xTaskResumeAll+0x130>)
 80057ee:	2201      	movs	r2, #1
 80057f0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057f2:	4b1c      	ldr	r3, [pc, #112]	@ (8005864 <xTaskResumeAll+0x120>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1cb      	bne.n	8005792 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d001      	beq.n	8005804 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005800:	f000 fb58 	bl	8005eb4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005804:	4b1c      	ldr	r3, [pc, #112]	@ (8005878 <xTaskResumeAll+0x134>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d010      	beq.n	8005832 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005810:	f000 f846 	bl	80058a0 <xTaskIncrementTick>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d002      	beq.n	8005820 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800581a:	4b16      	ldr	r3, [pc, #88]	@ (8005874 <xTaskResumeAll+0x130>)
 800581c:	2201      	movs	r2, #1
 800581e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	3b01      	subs	r3, #1
 8005824:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d1f1      	bne.n	8005810 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800582c:	4b12      	ldr	r3, [pc, #72]	@ (8005878 <xTaskResumeAll+0x134>)
 800582e:	2200      	movs	r2, #0
 8005830:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005832:	4b10      	ldr	r3, [pc, #64]	@ (8005874 <xTaskResumeAll+0x130>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d009      	beq.n	800584e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800583a:	2301      	movs	r3, #1
 800583c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800583e:	4b0f      	ldr	r3, [pc, #60]	@ (800587c <xTaskResumeAll+0x138>)
 8005840:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005844:	601a      	str	r2, [r3, #0]
 8005846:	f3bf 8f4f 	dsb	sy
 800584a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800584e:	f001 f8ed 	bl	8006a2c <vPortExitCritical>

	return xAlreadyYielded;
 8005852:	68bb      	ldr	r3, [r7, #8]
}
 8005854:	4618      	mov	r0, r3
 8005856:	3710      	adds	r7, #16
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}
 800585c:	20000d84 	.word	0x20000d84
 8005860:	20000d5c 	.word	0x20000d5c
 8005864:	20000d1c 	.word	0x20000d1c
 8005868:	20000d64 	.word	0x20000d64
 800586c:	2000088c 	.word	0x2000088c
 8005870:	20000888 	.word	0x20000888
 8005874:	20000d70 	.word	0x20000d70
 8005878:	20000d6c 	.word	0x20000d6c
 800587c:	e000ed04 	.word	0xe000ed04

08005880 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005886:	4b05      	ldr	r3, [pc, #20]	@ (800589c <xTaskGetTickCount+0x1c>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800588c:	687b      	ldr	r3, [r7, #4]
}
 800588e:	4618      	mov	r0, r3
 8005890:	370c      	adds	r7, #12
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop
 800589c:	20000d60 	.word	0x20000d60

080058a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b086      	sub	sp, #24
 80058a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80058a6:	2300      	movs	r3, #0
 80058a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058aa:	4b4f      	ldr	r3, [pc, #316]	@ (80059e8 <xTaskIncrementTick+0x148>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	f040 8090 	bne.w	80059d4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80058b4:	4b4d      	ldr	r3, [pc, #308]	@ (80059ec <xTaskIncrementTick+0x14c>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	3301      	adds	r3, #1
 80058ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80058bc:	4a4b      	ldr	r2, [pc, #300]	@ (80059ec <xTaskIncrementTick+0x14c>)
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d121      	bne.n	800590c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80058c8:	4b49      	ldr	r3, [pc, #292]	@ (80059f0 <xTaskIncrementTick+0x150>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00b      	beq.n	80058ea <xTaskIncrementTick+0x4a>
	__asm volatile
 80058d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058d6:	f383 8811 	msr	BASEPRI, r3
 80058da:	f3bf 8f6f 	isb	sy
 80058de:	f3bf 8f4f 	dsb	sy
 80058e2:	603b      	str	r3, [r7, #0]
}
 80058e4:	bf00      	nop
 80058e6:	bf00      	nop
 80058e8:	e7fd      	b.n	80058e6 <xTaskIncrementTick+0x46>
 80058ea:	4b41      	ldr	r3, [pc, #260]	@ (80059f0 <xTaskIncrementTick+0x150>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	60fb      	str	r3, [r7, #12]
 80058f0:	4b40      	ldr	r3, [pc, #256]	@ (80059f4 <xTaskIncrementTick+0x154>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a3e      	ldr	r2, [pc, #248]	@ (80059f0 <xTaskIncrementTick+0x150>)
 80058f6:	6013      	str	r3, [r2, #0]
 80058f8:	4a3e      	ldr	r2, [pc, #248]	@ (80059f4 <xTaskIncrementTick+0x154>)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6013      	str	r3, [r2, #0]
 80058fe:	4b3e      	ldr	r3, [pc, #248]	@ (80059f8 <xTaskIncrementTick+0x158>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	3301      	adds	r3, #1
 8005904:	4a3c      	ldr	r2, [pc, #240]	@ (80059f8 <xTaskIncrementTick+0x158>)
 8005906:	6013      	str	r3, [r2, #0]
 8005908:	f000 fad4 	bl	8005eb4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800590c:	4b3b      	ldr	r3, [pc, #236]	@ (80059fc <xTaskIncrementTick+0x15c>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	693a      	ldr	r2, [r7, #16]
 8005912:	429a      	cmp	r2, r3
 8005914:	d349      	bcc.n	80059aa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005916:	4b36      	ldr	r3, [pc, #216]	@ (80059f0 <xTaskIncrementTick+0x150>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d104      	bne.n	800592a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005920:	4b36      	ldr	r3, [pc, #216]	@ (80059fc <xTaskIncrementTick+0x15c>)
 8005922:	f04f 32ff 	mov.w	r2, #4294967295
 8005926:	601a      	str	r2, [r3, #0]
					break;
 8005928:	e03f      	b.n	80059aa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800592a:	4b31      	ldr	r3, [pc, #196]	@ (80059f0 <xTaskIncrementTick+0x150>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	429a      	cmp	r2, r3
 8005940:	d203      	bcs.n	800594a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005942:	4a2e      	ldr	r2, [pc, #184]	@ (80059fc <xTaskIncrementTick+0x15c>)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005948:	e02f      	b.n	80059aa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	3304      	adds	r3, #4
 800594e:	4618      	mov	r0, r3
 8005950:	f7fe ff46 	bl	80047e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005958:	2b00      	cmp	r3, #0
 800595a:	d004      	beq.n	8005966 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	3318      	adds	r3, #24
 8005960:	4618      	mov	r0, r3
 8005962:	f7fe ff3d 	bl	80047e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800596a:	4b25      	ldr	r3, [pc, #148]	@ (8005a00 <xTaskIncrementTick+0x160>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	429a      	cmp	r2, r3
 8005970:	d903      	bls.n	800597a <xTaskIncrementTick+0xda>
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005976:	4a22      	ldr	r2, [pc, #136]	@ (8005a00 <xTaskIncrementTick+0x160>)
 8005978:	6013      	str	r3, [r2, #0]
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800597e:	4613      	mov	r3, r2
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	4413      	add	r3, r2
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	4a1f      	ldr	r2, [pc, #124]	@ (8005a04 <xTaskIncrementTick+0x164>)
 8005988:	441a      	add	r2, r3
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	3304      	adds	r3, #4
 800598e:	4619      	mov	r1, r3
 8005990:	4610      	mov	r0, r2
 8005992:	f7fe fec8 	bl	8004726 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800599a:	4b1b      	ldr	r3, [pc, #108]	@ (8005a08 <xTaskIncrementTick+0x168>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d3b8      	bcc.n	8005916 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80059a4:	2301      	movs	r3, #1
 80059a6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059a8:	e7b5      	b.n	8005916 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80059aa:	4b17      	ldr	r3, [pc, #92]	@ (8005a08 <xTaskIncrementTick+0x168>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059b0:	4914      	ldr	r1, [pc, #80]	@ (8005a04 <xTaskIncrementTick+0x164>)
 80059b2:	4613      	mov	r3, r2
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	4413      	add	r3, r2
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	440b      	add	r3, r1
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d901      	bls.n	80059c6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80059c2:	2301      	movs	r3, #1
 80059c4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80059c6:	4b11      	ldr	r3, [pc, #68]	@ (8005a0c <xTaskIncrementTick+0x16c>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d007      	beq.n	80059de <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80059ce:	2301      	movs	r3, #1
 80059d0:	617b      	str	r3, [r7, #20]
 80059d2:	e004      	b.n	80059de <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80059d4:	4b0e      	ldr	r3, [pc, #56]	@ (8005a10 <xTaskIncrementTick+0x170>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	3301      	adds	r3, #1
 80059da:	4a0d      	ldr	r2, [pc, #52]	@ (8005a10 <xTaskIncrementTick+0x170>)
 80059dc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80059de:	697b      	ldr	r3, [r7, #20]
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3718      	adds	r7, #24
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	20000d84 	.word	0x20000d84
 80059ec:	20000d60 	.word	0x20000d60
 80059f0:	20000d14 	.word	0x20000d14
 80059f4:	20000d18 	.word	0x20000d18
 80059f8:	20000d74 	.word	0x20000d74
 80059fc:	20000d7c 	.word	0x20000d7c
 8005a00:	20000d64 	.word	0x20000d64
 8005a04:	2000088c 	.word	0x2000088c
 8005a08:	20000888 	.word	0x20000888
 8005a0c:	20000d70 	.word	0x20000d70
 8005a10:	20000d6c 	.word	0x20000d6c

08005a14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005a1a:	4b28      	ldr	r3, [pc, #160]	@ (8005abc <vTaskSwitchContext+0xa8>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d003      	beq.n	8005a2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005a22:	4b27      	ldr	r3, [pc, #156]	@ (8005ac0 <vTaskSwitchContext+0xac>)
 8005a24:	2201      	movs	r2, #1
 8005a26:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005a28:	e042      	b.n	8005ab0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8005a2a:	4b25      	ldr	r3, [pc, #148]	@ (8005ac0 <vTaskSwitchContext+0xac>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a30:	4b24      	ldr	r3, [pc, #144]	@ (8005ac4 <vTaskSwitchContext+0xb0>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	60fb      	str	r3, [r7, #12]
 8005a36:	e011      	b.n	8005a5c <vTaskSwitchContext+0x48>
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d10b      	bne.n	8005a56 <vTaskSwitchContext+0x42>
	__asm volatile
 8005a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a42:	f383 8811 	msr	BASEPRI, r3
 8005a46:	f3bf 8f6f 	isb	sy
 8005a4a:	f3bf 8f4f 	dsb	sy
 8005a4e:	607b      	str	r3, [r7, #4]
}
 8005a50:	bf00      	nop
 8005a52:	bf00      	nop
 8005a54:	e7fd      	b.n	8005a52 <vTaskSwitchContext+0x3e>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	60fb      	str	r3, [r7, #12]
 8005a5c:	491a      	ldr	r1, [pc, #104]	@ (8005ac8 <vTaskSwitchContext+0xb4>)
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	4613      	mov	r3, r2
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	4413      	add	r3, r2
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	440b      	add	r3, r1
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d0e3      	beq.n	8005a38 <vTaskSwitchContext+0x24>
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	4613      	mov	r3, r2
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	4413      	add	r3, r2
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	4a13      	ldr	r2, [pc, #76]	@ (8005ac8 <vTaskSwitchContext+0xb4>)
 8005a7c:	4413      	add	r3, r2
 8005a7e:	60bb      	str	r3, [r7, #8]
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	685a      	ldr	r2, [r3, #4]
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	605a      	str	r2, [r3, #4]
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	685a      	ldr	r2, [r3, #4]
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	3308      	adds	r3, #8
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d104      	bne.n	8005aa0 <vTaskSwitchContext+0x8c>
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	685a      	ldr	r2, [r3, #4]
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	605a      	str	r2, [r3, #4]
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	4a09      	ldr	r2, [pc, #36]	@ (8005acc <vTaskSwitchContext+0xb8>)
 8005aa8:	6013      	str	r3, [r2, #0]
 8005aaa:	4a06      	ldr	r2, [pc, #24]	@ (8005ac4 <vTaskSwitchContext+0xb0>)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6013      	str	r3, [r2, #0]
}
 8005ab0:	bf00      	nop
 8005ab2:	3714      	adds	r7, #20
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr
 8005abc:	20000d84 	.word	0x20000d84
 8005ac0:	20000d70 	.word	0x20000d70
 8005ac4:	20000d64 	.word	0x20000d64
 8005ac8:	2000088c 	.word	0x2000088c
 8005acc:	20000888 	.word	0x20000888

08005ad0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d10b      	bne.n	8005af8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ae4:	f383 8811 	msr	BASEPRI, r3
 8005ae8:	f3bf 8f6f 	isb	sy
 8005aec:	f3bf 8f4f 	dsb	sy
 8005af0:	60fb      	str	r3, [r7, #12]
}
 8005af2:	bf00      	nop
 8005af4:	bf00      	nop
 8005af6:	e7fd      	b.n	8005af4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005af8:	4b07      	ldr	r3, [pc, #28]	@ (8005b18 <vTaskPlaceOnEventList+0x48>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	3318      	adds	r3, #24
 8005afe:	4619      	mov	r1, r3
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f7fe fe34 	bl	800476e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005b06:	2101      	movs	r1, #1
 8005b08:	6838      	ldr	r0, [r7, #0]
 8005b0a:	f000 fa81 	bl	8006010 <prvAddCurrentTaskToDelayedList>
}
 8005b0e:	bf00      	nop
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	20000888 	.word	0x20000888

08005b1c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d10b      	bne.n	8005b46 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b32:	f383 8811 	msr	BASEPRI, r3
 8005b36:	f3bf 8f6f 	isb	sy
 8005b3a:	f3bf 8f4f 	dsb	sy
 8005b3e:	617b      	str	r3, [r7, #20]
}
 8005b40:	bf00      	nop
 8005b42:	bf00      	nop
 8005b44:	e7fd      	b.n	8005b42 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b46:	4b0a      	ldr	r3, [pc, #40]	@ (8005b70 <vTaskPlaceOnEventListRestricted+0x54>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	3318      	adds	r3, #24
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	f7fe fde9 	bl	8004726 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d002      	beq.n	8005b60 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b5e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005b60:	6879      	ldr	r1, [r7, #4]
 8005b62:	68b8      	ldr	r0, [r7, #8]
 8005b64:	f000 fa54 	bl	8006010 <prvAddCurrentTaskToDelayedList>
	}
 8005b68:	bf00      	nop
 8005b6a:	3718      	adds	r7, #24
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	20000888 	.word	0x20000888

08005b74 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b086      	sub	sp, #24
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10b      	bne.n	8005ba2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b8e:	f383 8811 	msr	BASEPRI, r3
 8005b92:	f3bf 8f6f 	isb	sy
 8005b96:	f3bf 8f4f 	dsb	sy
 8005b9a:	60fb      	str	r3, [r7, #12]
}
 8005b9c:	bf00      	nop
 8005b9e:	bf00      	nop
 8005ba0:	e7fd      	b.n	8005b9e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	3318      	adds	r3, #24
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7fe fe1a 	bl	80047e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bac:	4b1d      	ldr	r3, [pc, #116]	@ (8005c24 <xTaskRemoveFromEventList+0xb0>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d11d      	bne.n	8005bf0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	3304      	adds	r3, #4
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f7fe fe11 	bl	80047e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bc2:	4b19      	ldr	r3, [pc, #100]	@ (8005c28 <xTaskRemoveFromEventList+0xb4>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d903      	bls.n	8005bd2 <xTaskRemoveFromEventList+0x5e>
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bce:	4a16      	ldr	r2, [pc, #88]	@ (8005c28 <xTaskRemoveFromEventList+0xb4>)
 8005bd0:	6013      	str	r3, [r2, #0]
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	4413      	add	r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4a13      	ldr	r2, [pc, #76]	@ (8005c2c <xTaskRemoveFromEventList+0xb8>)
 8005be0:	441a      	add	r2, r3
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	3304      	adds	r3, #4
 8005be6:	4619      	mov	r1, r3
 8005be8:	4610      	mov	r0, r2
 8005bea:	f7fe fd9c 	bl	8004726 <vListInsertEnd>
 8005bee:	e005      	b.n	8005bfc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	3318      	adds	r3, #24
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	480e      	ldr	r0, [pc, #56]	@ (8005c30 <xTaskRemoveFromEventList+0xbc>)
 8005bf8:	f7fe fd95 	bl	8004726 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c00:	4b0c      	ldr	r3, [pc, #48]	@ (8005c34 <xTaskRemoveFromEventList+0xc0>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d905      	bls.n	8005c16 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8005c38 <xTaskRemoveFromEventList+0xc4>)
 8005c10:	2201      	movs	r2, #1
 8005c12:	601a      	str	r2, [r3, #0]
 8005c14:	e001      	b.n	8005c1a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005c16:	2300      	movs	r3, #0
 8005c18:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005c1a:	697b      	ldr	r3, [r7, #20]
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3718      	adds	r7, #24
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	20000d84 	.word	0x20000d84
 8005c28:	20000d64 	.word	0x20000d64
 8005c2c:	2000088c 	.word	0x2000088c
 8005c30:	20000d1c 	.word	0x20000d1c
 8005c34:	20000888 	.word	0x20000888
 8005c38:	20000d70 	.word	0x20000d70

08005c3c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005c44:	4b06      	ldr	r3, [pc, #24]	@ (8005c60 <vTaskInternalSetTimeOutState+0x24>)
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005c4c:	4b05      	ldr	r3, [pc, #20]	@ (8005c64 <vTaskInternalSetTimeOutState+0x28>)
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	605a      	str	r2, [r3, #4]
}
 8005c54:	bf00      	nop
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr
 8005c60:	20000d74 	.word	0x20000d74
 8005c64:	20000d60 	.word	0x20000d60

08005c68 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b088      	sub	sp, #32
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d10b      	bne.n	8005c90 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005c78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c7c:	f383 8811 	msr	BASEPRI, r3
 8005c80:	f3bf 8f6f 	isb	sy
 8005c84:	f3bf 8f4f 	dsb	sy
 8005c88:	613b      	str	r3, [r7, #16]
}
 8005c8a:	bf00      	nop
 8005c8c:	bf00      	nop
 8005c8e:	e7fd      	b.n	8005c8c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d10b      	bne.n	8005cae <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c9a:	f383 8811 	msr	BASEPRI, r3
 8005c9e:	f3bf 8f6f 	isb	sy
 8005ca2:	f3bf 8f4f 	dsb	sy
 8005ca6:	60fb      	str	r3, [r7, #12]
}
 8005ca8:	bf00      	nop
 8005caa:	bf00      	nop
 8005cac:	e7fd      	b.n	8005caa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005cae:	f000 fe8b 	bl	80069c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005cb2:	4b1d      	ldr	r3, [pc, #116]	@ (8005d28 <xTaskCheckForTimeOut+0xc0>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	69ba      	ldr	r2, [r7, #24]
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cca:	d102      	bne.n	8005cd2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	61fb      	str	r3, [r7, #28]
 8005cd0:	e023      	b.n	8005d1a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	4b15      	ldr	r3, [pc, #84]	@ (8005d2c <xTaskCheckForTimeOut+0xc4>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d007      	beq.n	8005cee <xTaskCheckForTimeOut+0x86>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	69ba      	ldr	r2, [r7, #24]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d302      	bcc.n	8005cee <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	61fb      	str	r3, [r7, #28]
 8005cec:	e015      	b.n	8005d1a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	697a      	ldr	r2, [r7, #20]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d20b      	bcs.n	8005d10 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	1ad2      	subs	r2, r2, r3
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f7ff ff99 	bl	8005c3c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	61fb      	str	r3, [r7, #28]
 8005d0e:	e004      	b.n	8005d1a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	2200      	movs	r2, #0
 8005d14:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005d16:	2301      	movs	r3, #1
 8005d18:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005d1a:	f000 fe87 	bl	8006a2c <vPortExitCritical>

	return xReturn;
 8005d1e:	69fb      	ldr	r3, [r7, #28]
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3720      	adds	r7, #32
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	20000d60 	.word	0x20000d60
 8005d2c:	20000d74 	.word	0x20000d74

08005d30 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005d30:	b480      	push	{r7}
 8005d32:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005d34:	4b03      	ldr	r3, [pc, #12]	@ (8005d44 <vTaskMissedYield+0x14>)
 8005d36:	2201      	movs	r2, #1
 8005d38:	601a      	str	r2, [r3, #0]
}
 8005d3a:	bf00      	nop
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr
 8005d44:	20000d70 	.word	0x20000d70

08005d48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005d50:	f000 f852 	bl	8005df8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005d54:	4b06      	ldr	r3, [pc, #24]	@ (8005d70 <prvIdleTask+0x28>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d9f9      	bls.n	8005d50 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005d5c:	4b05      	ldr	r3, [pc, #20]	@ (8005d74 <prvIdleTask+0x2c>)
 8005d5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d62:	601a      	str	r2, [r3, #0]
 8005d64:	f3bf 8f4f 	dsb	sy
 8005d68:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005d6c:	e7f0      	b.n	8005d50 <prvIdleTask+0x8>
 8005d6e:	bf00      	nop
 8005d70:	2000088c 	.word	0x2000088c
 8005d74:	e000ed04 	.word	0xe000ed04

08005d78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b082      	sub	sp, #8
 8005d7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d7e:	2300      	movs	r3, #0
 8005d80:	607b      	str	r3, [r7, #4]
 8005d82:	e00c      	b.n	8005d9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	4613      	mov	r3, r2
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	4413      	add	r3, r2
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	4a12      	ldr	r2, [pc, #72]	@ (8005dd8 <prvInitialiseTaskLists+0x60>)
 8005d90:	4413      	add	r3, r2
 8005d92:	4618      	mov	r0, r3
 8005d94:	f7fe fc9a 	bl	80046cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	607b      	str	r3, [r7, #4]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2b37      	cmp	r3, #55	@ 0x37
 8005da2:	d9ef      	bls.n	8005d84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005da4:	480d      	ldr	r0, [pc, #52]	@ (8005ddc <prvInitialiseTaskLists+0x64>)
 8005da6:	f7fe fc91 	bl	80046cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005daa:	480d      	ldr	r0, [pc, #52]	@ (8005de0 <prvInitialiseTaskLists+0x68>)
 8005dac:	f7fe fc8e 	bl	80046cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005db0:	480c      	ldr	r0, [pc, #48]	@ (8005de4 <prvInitialiseTaskLists+0x6c>)
 8005db2:	f7fe fc8b 	bl	80046cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005db6:	480c      	ldr	r0, [pc, #48]	@ (8005de8 <prvInitialiseTaskLists+0x70>)
 8005db8:	f7fe fc88 	bl	80046cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005dbc:	480b      	ldr	r0, [pc, #44]	@ (8005dec <prvInitialiseTaskLists+0x74>)
 8005dbe:	f7fe fc85 	bl	80046cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8005df0 <prvInitialiseTaskLists+0x78>)
 8005dc4:	4a05      	ldr	r2, [pc, #20]	@ (8005ddc <prvInitialiseTaskLists+0x64>)
 8005dc6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005dc8:	4b0a      	ldr	r3, [pc, #40]	@ (8005df4 <prvInitialiseTaskLists+0x7c>)
 8005dca:	4a05      	ldr	r2, [pc, #20]	@ (8005de0 <prvInitialiseTaskLists+0x68>)
 8005dcc:	601a      	str	r2, [r3, #0]
}
 8005dce:	bf00      	nop
 8005dd0:	3708      	adds	r7, #8
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	2000088c 	.word	0x2000088c
 8005ddc:	20000cec 	.word	0x20000cec
 8005de0:	20000d00 	.word	0x20000d00
 8005de4:	20000d1c 	.word	0x20000d1c
 8005de8:	20000d30 	.word	0x20000d30
 8005dec:	20000d48 	.word	0x20000d48
 8005df0:	20000d14 	.word	0x20000d14
 8005df4:	20000d18 	.word	0x20000d18

08005df8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005dfe:	e019      	b.n	8005e34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005e00:	f000 fde2 	bl	80069c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e04:	4b10      	ldr	r3, [pc, #64]	@ (8005e48 <prvCheckTasksWaitingTermination+0x50>)
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	3304      	adds	r3, #4
 8005e10:	4618      	mov	r0, r3
 8005e12:	f7fe fce5 	bl	80047e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005e16:	4b0d      	ldr	r3, [pc, #52]	@ (8005e4c <prvCheckTasksWaitingTermination+0x54>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	4a0b      	ldr	r2, [pc, #44]	@ (8005e4c <prvCheckTasksWaitingTermination+0x54>)
 8005e1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005e20:	4b0b      	ldr	r3, [pc, #44]	@ (8005e50 <prvCheckTasksWaitingTermination+0x58>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	3b01      	subs	r3, #1
 8005e26:	4a0a      	ldr	r2, [pc, #40]	@ (8005e50 <prvCheckTasksWaitingTermination+0x58>)
 8005e28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005e2a:	f000 fdff 	bl	8006a2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 f810 	bl	8005e54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e34:	4b06      	ldr	r3, [pc, #24]	@ (8005e50 <prvCheckTasksWaitingTermination+0x58>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d1e1      	bne.n	8005e00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005e3c:	bf00      	nop
 8005e3e:	bf00      	nop
 8005e40:	3708      	adds	r7, #8
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	20000d30 	.word	0x20000d30
 8005e4c:	20000d5c 	.word	0x20000d5c
 8005e50:	20000d44 	.word	0x20000d44

08005e54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d108      	bne.n	8005e78 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f000 ff9c 	bl	8006da8 <vPortFree>
				vPortFree( pxTCB );
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 ff99 	bl	8006da8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005e76:	e019      	b.n	8005eac <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d103      	bne.n	8005e8a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 ff90 	bl	8006da8 <vPortFree>
	}
 8005e88:	e010      	b.n	8005eac <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	d00b      	beq.n	8005eac <prvDeleteTCB+0x58>
	__asm volatile
 8005e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e98:	f383 8811 	msr	BASEPRI, r3
 8005e9c:	f3bf 8f6f 	isb	sy
 8005ea0:	f3bf 8f4f 	dsb	sy
 8005ea4:	60fb      	str	r3, [r7, #12]
}
 8005ea6:	bf00      	nop
 8005ea8:	bf00      	nop
 8005eaa:	e7fd      	b.n	8005ea8 <prvDeleteTCB+0x54>
	}
 8005eac:	bf00      	nop
 8005eae:	3710      	adds	r7, #16
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005eba:	4b0c      	ldr	r3, [pc, #48]	@ (8005eec <prvResetNextTaskUnblockTime+0x38>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d104      	bne.n	8005ece <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005ec4:	4b0a      	ldr	r3, [pc, #40]	@ (8005ef0 <prvResetNextTaskUnblockTime+0x3c>)
 8005ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8005eca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005ecc:	e008      	b.n	8005ee0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ece:	4b07      	ldr	r3, [pc, #28]	@ (8005eec <prvResetNextTaskUnblockTime+0x38>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	4a04      	ldr	r2, [pc, #16]	@ (8005ef0 <prvResetNextTaskUnblockTime+0x3c>)
 8005ede:	6013      	str	r3, [r2, #0]
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr
 8005eec:	20000d14 	.word	0x20000d14
 8005ef0:	20000d7c 	.word	0x20000d7c

08005ef4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005efa:	4b0b      	ldr	r3, [pc, #44]	@ (8005f28 <xTaskGetSchedulerState+0x34>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d102      	bne.n	8005f08 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005f02:	2301      	movs	r3, #1
 8005f04:	607b      	str	r3, [r7, #4]
 8005f06:	e008      	b.n	8005f1a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f08:	4b08      	ldr	r3, [pc, #32]	@ (8005f2c <xTaskGetSchedulerState+0x38>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d102      	bne.n	8005f16 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005f10:	2302      	movs	r3, #2
 8005f12:	607b      	str	r3, [r7, #4]
 8005f14:	e001      	b.n	8005f1a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005f16:	2300      	movs	r3, #0
 8005f18:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005f1a:	687b      	ldr	r3, [r7, #4]
	}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr
 8005f28:	20000d68 	.word	0x20000d68
 8005f2c:	20000d84 	.word	0x20000d84

08005f30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b086      	sub	sp, #24
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d058      	beq.n	8005ff8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005f46:	4b2f      	ldr	r3, [pc, #188]	@ (8006004 <xTaskPriorityDisinherit+0xd4>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	693a      	ldr	r2, [r7, #16]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d00b      	beq.n	8005f68 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f54:	f383 8811 	msr	BASEPRI, r3
 8005f58:	f3bf 8f6f 	isb	sy
 8005f5c:	f3bf 8f4f 	dsb	sy
 8005f60:	60fb      	str	r3, [r7, #12]
}
 8005f62:	bf00      	nop
 8005f64:	bf00      	nop
 8005f66:	e7fd      	b.n	8005f64 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d10b      	bne.n	8005f88 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f74:	f383 8811 	msr	BASEPRI, r3
 8005f78:	f3bf 8f6f 	isb	sy
 8005f7c:	f3bf 8f4f 	dsb	sy
 8005f80:	60bb      	str	r3, [r7, #8]
}
 8005f82:	bf00      	nop
 8005f84:	bf00      	nop
 8005f86:	e7fd      	b.n	8005f84 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f8c:	1e5a      	subs	r2, r3, #1
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d02c      	beq.n	8005ff8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d128      	bne.n	8005ff8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	3304      	adds	r3, #4
 8005faa:	4618      	mov	r0, r3
 8005fac:	f7fe fc18 	bl	80047e0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fbc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8006008 <xTaskPriorityDisinherit+0xd8>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d903      	bls.n	8005fd8 <xTaskPriorityDisinherit+0xa8>
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fd4:	4a0c      	ldr	r2, [pc, #48]	@ (8006008 <xTaskPriorityDisinherit+0xd8>)
 8005fd6:	6013      	str	r3, [r2, #0]
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fdc:	4613      	mov	r3, r2
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4413      	add	r3, r2
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	4a09      	ldr	r2, [pc, #36]	@ (800600c <xTaskPriorityDisinherit+0xdc>)
 8005fe6:	441a      	add	r2, r3
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	3304      	adds	r3, #4
 8005fec:	4619      	mov	r1, r3
 8005fee:	4610      	mov	r0, r2
 8005ff0:	f7fe fb99 	bl	8004726 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005ff8:	697b      	ldr	r3, [r7, #20]
	}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3718      	adds	r7, #24
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	20000888 	.word	0x20000888
 8006008:	20000d64 	.word	0x20000d64
 800600c:	2000088c 	.word	0x2000088c

08006010 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800601a:	4b21      	ldr	r3, [pc, #132]	@ (80060a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006020:	4b20      	ldr	r3, [pc, #128]	@ (80060a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	3304      	adds	r3, #4
 8006026:	4618      	mov	r0, r3
 8006028:	f7fe fbda 	bl	80047e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006032:	d10a      	bne.n	800604a <prvAddCurrentTaskToDelayedList+0x3a>
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d007      	beq.n	800604a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800603a:	4b1a      	ldr	r3, [pc, #104]	@ (80060a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	3304      	adds	r3, #4
 8006040:	4619      	mov	r1, r3
 8006042:	4819      	ldr	r0, [pc, #100]	@ (80060a8 <prvAddCurrentTaskToDelayedList+0x98>)
 8006044:	f7fe fb6f 	bl	8004726 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006048:	e026      	b.n	8006098 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800604a:	68fa      	ldr	r2, [r7, #12]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4413      	add	r3, r2
 8006050:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006052:	4b14      	ldr	r3, [pc, #80]	@ (80060a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	68ba      	ldr	r2, [r7, #8]
 8006058:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800605a:	68ba      	ldr	r2, [r7, #8]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	429a      	cmp	r2, r3
 8006060:	d209      	bcs.n	8006076 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006062:	4b12      	ldr	r3, [pc, #72]	@ (80060ac <prvAddCurrentTaskToDelayedList+0x9c>)
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	4b0f      	ldr	r3, [pc, #60]	@ (80060a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	3304      	adds	r3, #4
 800606c:	4619      	mov	r1, r3
 800606e:	4610      	mov	r0, r2
 8006070:	f7fe fb7d 	bl	800476e <vListInsert>
}
 8006074:	e010      	b.n	8006098 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006076:	4b0e      	ldr	r3, [pc, #56]	@ (80060b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	4b0a      	ldr	r3, [pc, #40]	@ (80060a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	3304      	adds	r3, #4
 8006080:	4619      	mov	r1, r3
 8006082:	4610      	mov	r0, r2
 8006084:	f7fe fb73 	bl	800476e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006088:	4b0a      	ldr	r3, [pc, #40]	@ (80060b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68ba      	ldr	r2, [r7, #8]
 800608e:	429a      	cmp	r2, r3
 8006090:	d202      	bcs.n	8006098 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006092:	4a08      	ldr	r2, [pc, #32]	@ (80060b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	6013      	str	r3, [r2, #0]
}
 8006098:	bf00      	nop
 800609a:	3710      	adds	r7, #16
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	20000d60 	.word	0x20000d60
 80060a4:	20000888 	.word	0x20000888
 80060a8:	20000d48 	.word	0x20000d48
 80060ac:	20000d18 	.word	0x20000d18
 80060b0:	20000d14 	.word	0x20000d14
 80060b4:	20000d7c 	.word	0x20000d7c

080060b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b08a      	sub	sp, #40	@ 0x28
 80060bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80060be:	2300      	movs	r3, #0
 80060c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80060c2:	f000 fb13 	bl	80066ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80060c6:	4b1d      	ldr	r3, [pc, #116]	@ (800613c <xTimerCreateTimerTask+0x84>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d021      	beq.n	8006112 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80060ce:	2300      	movs	r3, #0
 80060d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80060d2:	2300      	movs	r3, #0
 80060d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80060d6:	1d3a      	adds	r2, r7, #4
 80060d8:	f107 0108 	add.w	r1, r7, #8
 80060dc:	f107 030c 	add.w	r3, r7, #12
 80060e0:	4618      	mov	r0, r3
 80060e2:	f7fe fad9 	bl	8004698 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80060e6:	6879      	ldr	r1, [r7, #4]
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	9202      	str	r2, [sp, #8]
 80060ee:	9301      	str	r3, [sp, #4]
 80060f0:	2302      	movs	r3, #2
 80060f2:	9300      	str	r3, [sp, #0]
 80060f4:	2300      	movs	r3, #0
 80060f6:	460a      	mov	r2, r1
 80060f8:	4911      	ldr	r1, [pc, #68]	@ (8006140 <xTimerCreateTimerTask+0x88>)
 80060fa:	4812      	ldr	r0, [pc, #72]	@ (8006144 <xTimerCreateTimerTask+0x8c>)
 80060fc:	f7ff f8d0 	bl	80052a0 <xTaskCreateStatic>
 8006100:	4603      	mov	r3, r0
 8006102:	4a11      	ldr	r2, [pc, #68]	@ (8006148 <xTimerCreateTimerTask+0x90>)
 8006104:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006106:	4b10      	ldr	r3, [pc, #64]	@ (8006148 <xTimerCreateTimerTask+0x90>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d001      	beq.n	8006112 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800610e:	2301      	movs	r3, #1
 8006110:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d10b      	bne.n	8006130 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800611c:	f383 8811 	msr	BASEPRI, r3
 8006120:	f3bf 8f6f 	isb	sy
 8006124:	f3bf 8f4f 	dsb	sy
 8006128:	613b      	str	r3, [r7, #16]
}
 800612a:	bf00      	nop
 800612c:	bf00      	nop
 800612e:	e7fd      	b.n	800612c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006130:	697b      	ldr	r3, [r7, #20]
}
 8006132:	4618      	mov	r0, r3
 8006134:	3718      	adds	r7, #24
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	20000db8 	.word	0x20000db8
 8006140:	080070a0 	.word	0x080070a0
 8006144:	08006285 	.word	0x08006285
 8006148:	20000dbc 	.word	0x20000dbc

0800614c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b08a      	sub	sp, #40	@ 0x28
 8006150:	af00      	add	r7, sp, #0
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	607a      	str	r2, [r7, #4]
 8006158:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800615a:	2300      	movs	r3, #0
 800615c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d10b      	bne.n	800617c <xTimerGenericCommand+0x30>
	__asm volatile
 8006164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006168:	f383 8811 	msr	BASEPRI, r3
 800616c:	f3bf 8f6f 	isb	sy
 8006170:	f3bf 8f4f 	dsb	sy
 8006174:	623b      	str	r3, [r7, #32]
}
 8006176:	bf00      	nop
 8006178:	bf00      	nop
 800617a:	e7fd      	b.n	8006178 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800617c:	4b19      	ldr	r3, [pc, #100]	@ (80061e4 <xTimerGenericCommand+0x98>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d02a      	beq.n	80061da <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	2b05      	cmp	r3, #5
 8006194:	dc18      	bgt.n	80061c8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006196:	f7ff fead 	bl	8005ef4 <xTaskGetSchedulerState>
 800619a:	4603      	mov	r3, r0
 800619c:	2b02      	cmp	r3, #2
 800619e:	d109      	bne.n	80061b4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80061a0:	4b10      	ldr	r3, [pc, #64]	@ (80061e4 <xTimerGenericCommand+0x98>)
 80061a2:	6818      	ldr	r0, [r3, #0]
 80061a4:	f107 0110 	add.w	r1, r7, #16
 80061a8:	2300      	movs	r3, #0
 80061aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061ac:	f7fe fc88 	bl	8004ac0 <xQueueGenericSend>
 80061b0:	6278      	str	r0, [r7, #36]	@ 0x24
 80061b2:	e012      	b.n	80061da <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80061b4:	4b0b      	ldr	r3, [pc, #44]	@ (80061e4 <xTimerGenericCommand+0x98>)
 80061b6:	6818      	ldr	r0, [r3, #0]
 80061b8:	f107 0110 	add.w	r1, r7, #16
 80061bc:	2300      	movs	r3, #0
 80061be:	2200      	movs	r2, #0
 80061c0:	f7fe fc7e 	bl	8004ac0 <xQueueGenericSend>
 80061c4:	6278      	str	r0, [r7, #36]	@ 0x24
 80061c6:	e008      	b.n	80061da <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80061c8:	4b06      	ldr	r3, [pc, #24]	@ (80061e4 <xTimerGenericCommand+0x98>)
 80061ca:	6818      	ldr	r0, [r3, #0]
 80061cc:	f107 0110 	add.w	r1, r7, #16
 80061d0:	2300      	movs	r3, #0
 80061d2:	683a      	ldr	r2, [r7, #0]
 80061d4:	f7fe fd76 	bl	8004cc4 <xQueueGenericSendFromISR>
 80061d8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80061da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3728      	adds	r7, #40	@ 0x28
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	20000db8 	.word	0x20000db8

080061e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b088      	sub	sp, #32
 80061ec:	af02      	add	r7, sp, #8
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061f2:	4b23      	ldr	r3, [pc, #140]	@ (8006280 <prvProcessExpiredTimer+0x98>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	3304      	adds	r3, #4
 8006200:	4618      	mov	r0, r3
 8006202:	f7fe faed 	bl	80047e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800620c:	f003 0304 	and.w	r3, r3, #4
 8006210:	2b00      	cmp	r3, #0
 8006212:	d023      	beq.n	800625c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	699a      	ldr	r2, [r3, #24]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	18d1      	adds	r1, r2, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	683a      	ldr	r2, [r7, #0]
 8006220:	6978      	ldr	r0, [r7, #20]
 8006222:	f000 f8d5 	bl	80063d0 <prvInsertTimerInActiveList>
 8006226:	4603      	mov	r3, r0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d020      	beq.n	800626e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800622c:	2300      	movs	r3, #0
 800622e:	9300      	str	r3, [sp, #0]
 8006230:	2300      	movs	r3, #0
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	2100      	movs	r1, #0
 8006236:	6978      	ldr	r0, [r7, #20]
 8006238:	f7ff ff88 	bl	800614c <xTimerGenericCommand>
 800623c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d114      	bne.n	800626e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006248:	f383 8811 	msr	BASEPRI, r3
 800624c:	f3bf 8f6f 	isb	sy
 8006250:	f3bf 8f4f 	dsb	sy
 8006254:	60fb      	str	r3, [r7, #12]
}
 8006256:	bf00      	nop
 8006258:	bf00      	nop
 800625a:	e7fd      	b.n	8006258 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006262:	f023 0301 	bic.w	r3, r3, #1
 8006266:	b2da      	uxtb	r2, r3
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	6a1b      	ldr	r3, [r3, #32]
 8006272:	6978      	ldr	r0, [r7, #20]
 8006274:	4798      	blx	r3
}
 8006276:	bf00      	nop
 8006278:	3718      	adds	r7, #24
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	20000db0 	.word	0x20000db0

08006284 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800628c:	f107 0308 	add.w	r3, r7, #8
 8006290:	4618      	mov	r0, r3
 8006292:	f000 f859 	bl	8006348 <prvGetNextExpireTime>
 8006296:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	4619      	mov	r1, r3
 800629c:	68f8      	ldr	r0, [r7, #12]
 800629e:	f000 f805 	bl	80062ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80062a2:	f000 f8d7 	bl	8006454 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80062a6:	bf00      	nop
 80062a8:	e7f0      	b.n	800628c <prvTimerTask+0x8>
	...

080062ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80062b6:	f7ff fa37 	bl	8005728 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80062ba:	f107 0308 	add.w	r3, r7, #8
 80062be:	4618      	mov	r0, r3
 80062c0:	f000 f866 	bl	8006390 <prvSampleTimeNow>
 80062c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d130      	bne.n	800632e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d10a      	bne.n	80062e8 <prvProcessTimerOrBlockTask+0x3c>
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d806      	bhi.n	80062e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80062da:	f7ff fa33 	bl	8005744 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80062de:	68f9      	ldr	r1, [r7, #12]
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f7ff ff81 	bl	80061e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80062e6:	e024      	b.n	8006332 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d008      	beq.n	8006300 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80062ee:	4b13      	ldr	r3, [pc, #76]	@ (800633c <prvProcessTimerOrBlockTask+0x90>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d101      	bne.n	80062fc <prvProcessTimerOrBlockTask+0x50>
 80062f8:	2301      	movs	r3, #1
 80062fa:	e000      	b.n	80062fe <prvProcessTimerOrBlockTask+0x52>
 80062fc:	2300      	movs	r3, #0
 80062fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006300:	4b0f      	ldr	r3, [pc, #60]	@ (8006340 <prvProcessTimerOrBlockTask+0x94>)
 8006302:	6818      	ldr	r0, [r3, #0]
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	683a      	ldr	r2, [r7, #0]
 800630c:	4619      	mov	r1, r3
 800630e:	f7fe ff93 	bl	8005238 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006312:	f7ff fa17 	bl	8005744 <xTaskResumeAll>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d10a      	bne.n	8006332 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800631c:	4b09      	ldr	r3, [pc, #36]	@ (8006344 <prvProcessTimerOrBlockTask+0x98>)
 800631e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006322:	601a      	str	r2, [r3, #0]
 8006324:	f3bf 8f4f 	dsb	sy
 8006328:	f3bf 8f6f 	isb	sy
}
 800632c:	e001      	b.n	8006332 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800632e:	f7ff fa09 	bl	8005744 <xTaskResumeAll>
}
 8006332:	bf00      	nop
 8006334:	3710      	adds	r7, #16
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	20000db4 	.word	0x20000db4
 8006340:	20000db8 	.word	0x20000db8
 8006344:	e000ed04 	.word	0xe000ed04

08006348 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006348:	b480      	push	{r7}
 800634a:	b085      	sub	sp, #20
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006350:	4b0e      	ldr	r3, [pc, #56]	@ (800638c <prvGetNextExpireTime+0x44>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d101      	bne.n	800635e <prvGetNextExpireTime+0x16>
 800635a:	2201      	movs	r2, #1
 800635c:	e000      	b.n	8006360 <prvGetNextExpireTime+0x18>
 800635e:	2200      	movs	r2, #0
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d105      	bne.n	8006378 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800636c:	4b07      	ldr	r3, [pc, #28]	@ (800638c <prvGetNextExpireTime+0x44>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	60fb      	str	r3, [r7, #12]
 8006376:	e001      	b.n	800637c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006378:	2300      	movs	r3, #0
 800637a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800637c:	68fb      	ldr	r3, [r7, #12]
}
 800637e:	4618      	mov	r0, r3
 8006380:	3714      	adds	r7, #20
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr
 800638a:	bf00      	nop
 800638c:	20000db0 	.word	0x20000db0

08006390 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006398:	f7ff fa72 	bl	8005880 <xTaskGetTickCount>
 800639c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800639e:	4b0b      	ldr	r3, [pc, #44]	@ (80063cc <prvSampleTimeNow+0x3c>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68fa      	ldr	r2, [r7, #12]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d205      	bcs.n	80063b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80063a8:	f000 f93a 	bl	8006620 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	601a      	str	r2, [r3, #0]
 80063b2:	e002      	b.n	80063ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80063ba:	4a04      	ldr	r2, [pc, #16]	@ (80063cc <prvSampleTimeNow+0x3c>)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80063c0:	68fb      	ldr	r3, [r7, #12]
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3710      	adds	r7, #16
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	20000dc0 	.word	0x20000dc0

080063d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b086      	sub	sp, #24
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	607a      	str	r2, [r7, #4]
 80063dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80063de:	2300      	movs	r3, #0
 80063e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	68ba      	ldr	r2, [r7, #8]
 80063e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	68fa      	ldr	r2, [r7, #12]
 80063ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80063ee:	68ba      	ldr	r2, [r7, #8]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d812      	bhi.n	800641c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	1ad2      	subs	r2, r2, r3
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	699b      	ldr	r3, [r3, #24]
 8006400:	429a      	cmp	r2, r3
 8006402:	d302      	bcc.n	800640a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006404:	2301      	movs	r3, #1
 8006406:	617b      	str	r3, [r7, #20]
 8006408:	e01b      	b.n	8006442 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800640a:	4b10      	ldr	r3, [pc, #64]	@ (800644c <prvInsertTimerInActiveList+0x7c>)
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	3304      	adds	r3, #4
 8006412:	4619      	mov	r1, r3
 8006414:	4610      	mov	r0, r2
 8006416:	f7fe f9aa 	bl	800476e <vListInsert>
 800641a:	e012      	b.n	8006442 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	429a      	cmp	r2, r3
 8006422:	d206      	bcs.n	8006432 <prvInsertTimerInActiveList+0x62>
 8006424:	68ba      	ldr	r2, [r7, #8]
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	429a      	cmp	r2, r3
 800642a:	d302      	bcc.n	8006432 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800642c:	2301      	movs	r3, #1
 800642e:	617b      	str	r3, [r7, #20]
 8006430:	e007      	b.n	8006442 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006432:	4b07      	ldr	r3, [pc, #28]	@ (8006450 <prvInsertTimerInActiveList+0x80>)
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	3304      	adds	r3, #4
 800643a:	4619      	mov	r1, r3
 800643c:	4610      	mov	r0, r2
 800643e:	f7fe f996 	bl	800476e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006442:	697b      	ldr	r3, [r7, #20]
}
 8006444:	4618      	mov	r0, r3
 8006446:	3718      	adds	r7, #24
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}
 800644c:	20000db4 	.word	0x20000db4
 8006450:	20000db0 	.word	0x20000db0

08006454 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b08e      	sub	sp, #56	@ 0x38
 8006458:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800645a:	e0ce      	b.n	80065fa <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	da19      	bge.n	8006496 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006462:	1d3b      	adds	r3, r7, #4
 8006464:	3304      	adds	r3, #4
 8006466:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800646a:	2b00      	cmp	r3, #0
 800646c:	d10b      	bne.n	8006486 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800646e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006472:	f383 8811 	msr	BASEPRI, r3
 8006476:	f3bf 8f6f 	isb	sy
 800647a:	f3bf 8f4f 	dsb	sy
 800647e:	61fb      	str	r3, [r7, #28]
}
 8006480:	bf00      	nop
 8006482:	bf00      	nop
 8006484:	e7fd      	b.n	8006482 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800648c:	6850      	ldr	r0, [r2, #4]
 800648e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006490:	6892      	ldr	r2, [r2, #8]
 8006492:	4611      	mov	r1, r2
 8006494:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2b00      	cmp	r3, #0
 800649a:	f2c0 80ae 	blt.w	80065fa <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80064a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064a4:	695b      	ldr	r3, [r3, #20]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d004      	beq.n	80064b4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80064aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ac:	3304      	adds	r3, #4
 80064ae:	4618      	mov	r0, r3
 80064b0:	f7fe f996 	bl	80047e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80064b4:	463b      	mov	r3, r7
 80064b6:	4618      	mov	r0, r3
 80064b8:	f7ff ff6a 	bl	8006390 <prvSampleTimeNow>
 80064bc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2b09      	cmp	r3, #9
 80064c2:	f200 8097 	bhi.w	80065f4 <prvProcessReceivedCommands+0x1a0>
 80064c6:	a201      	add	r2, pc, #4	@ (adr r2, 80064cc <prvProcessReceivedCommands+0x78>)
 80064c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064cc:	080064f5 	.word	0x080064f5
 80064d0:	080064f5 	.word	0x080064f5
 80064d4:	080064f5 	.word	0x080064f5
 80064d8:	0800656b 	.word	0x0800656b
 80064dc:	0800657f 	.word	0x0800657f
 80064e0:	080065cb 	.word	0x080065cb
 80064e4:	080064f5 	.word	0x080064f5
 80064e8:	080064f5 	.word	0x080064f5
 80064ec:	0800656b 	.word	0x0800656b
 80064f0:	0800657f 	.word	0x0800657f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80064f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80064fa:	f043 0301 	orr.w	r3, r3, #1
 80064fe:	b2da      	uxtb	r2, r3
 8006500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006502:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006506:	68ba      	ldr	r2, [r7, #8]
 8006508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800650a:	699b      	ldr	r3, [r3, #24]
 800650c:	18d1      	adds	r1, r2, r3
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006512:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006514:	f7ff ff5c 	bl	80063d0 <prvInsertTimerInActiveList>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d06c      	beq.n	80065f8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800651e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006520:	6a1b      	ldr	r3, [r3, #32]
 8006522:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006524:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006528:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800652c:	f003 0304 	and.w	r3, r3, #4
 8006530:	2b00      	cmp	r3, #0
 8006532:	d061      	beq.n	80065f8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006534:	68ba      	ldr	r2, [r7, #8]
 8006536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006538:	699b      	ldr	r3, [r3, #24]
 800653a:	441a      	add	r2, r3
 800653c:	2300      	movs	r3, #0
 800653e:	9300      	str	r3, [sp, #0]
 8006540:	2300      	movs	r3, #0
 8006542:	2100      	movs	r1, #0
 8006544:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006546:	f7ff fe01 	bl	800614c <xTimerGenericCommand>
 800654a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800654c:	6a3b      	ldr	r3, [r7, #32]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d152      	bne.n	80065f8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006556:	f383 8811 	msr	BASEPRI, r3
 800655a:	f3bf 8f6f 	isb	sy
 800655e:	f3bf 8f4f 	dsb	sy
 8006562:	61bb      	str	r3, [r7, #24]
}
 8006564:	bf00      	nop
 8006566:	bf00      	nop
 8006568:	e7fd      	b.n	8006566 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800656a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800656c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006570:	f023 0301 	bic.w	r3, r3, #1
 8006574:	b2da      	uxtb	r2, r3
 8006576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006578:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800657c:	e03d      	b.n	80065fa <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800657e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006580:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006584:	f043 0301 	orr.w	r3, r3, #1
 8006588:	b2da      	uxtb	r2, r3
 800658a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800658c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006590:	68ba      	ldr	r2, [r7, #8]
 8006592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006594:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d10b      	bne.n	80065b6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800659e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065a2:	f383 8811 	msr	BASEPRI, r3
 80065a6:	f3bf 8f6f 	isb	sy
 80065aa:	f3bf 8f4f 	dsb	sy
 80065ae:	617b      	str	r3, [r7, #20]
}
 80065b0:	bf00      	nop
 80065b2:	bf00      	nop
 80065b4:	e7fd      	b.n	80065b2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80065b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065b8:	699a      	ldr	r2, [r3, #24]
 80065ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065bc:	18d1      	adds	r1, r2, r3
 80065be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065c4:	f7ff ff04 	bl	80063d0 <prvInsertTimerInActiveList>
					break;
 80065c8:	e017      	b.n	80065fa <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80065ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80065d0:	f003 0302 	and.w	r3, r3, #2
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d103      	bne.n	80065e0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80065d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065da:	f000 fbe5 	bl	8006da8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80065de:	e00c      	b.n	80065fa <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80065e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80065e6:	f023 0301 	bic.w	r3, r3, #1
 80065ea:	b2da      	uxtb	r2, r3
 80065ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80065f2:	e002      	b.n	80065fa <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80065f4:	bf00      	nop
 80065f6:	e000      	b.n	80065fa <prvProcessReceivedCommands+0x1a6>
					break;
 80065f8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80065fa:	4b08      	ldr	r3, [pc, #32]	@ (800661c <prvProcessReceivedCommands+0x1c8>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	1d39      	adds	r1, r7, #4
 8006600:	2200      	movs	r2, #0
 8006602:	4618      	mov	r0, r3
 8006604:	f7fe fbfc 	bl	8004e00 <xQueueReceive>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	f47f af26 	bne.w	800645c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006610:	bf00      	nop
 8006612:	bf00      	nop
 8006614:	3730      	adds	r7, #48	@ 0x30
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	20000db8 	.word	0x20000db8

08006620 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b088      	sub	sp, #32
 8006624:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006626:	e049      	b.n	80066bc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006628:	4b2e      	ldr	r3, [pc, #184]	@ (80066e4 <prvSwitchTimerLists+0xc4>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006632:	4b2c      	ldr	r3, [pc, #176]	@ (80066e4 <prvSwitchTimerLists+0xc4>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	3304      	adds	r3, #4
 8006640:	4618      	mov	r0, r3
 8006642:	f7fe f8cd 	bl	80047e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6a1b      	ldr	r3, [r3, #32]
 800664a:	68f8      	ldr	r0, [r7, #12]
 800664c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006654:	f003 0304 	and.w	r3, r3, #4
 8006658:	2b00      	cmp	r3, #0
 800665a:	d02f      	beq.n	80066bc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	699b      	ldr	r3, [r3, #24]
 8006660:	693a      	ldr	r2, [r7, #16]
 8006662:	4413      	add	r3, r2
 8006664:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006666:	68ba      	ldr	r2, [r7, #8]
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	429a      	cmp	r2, r3
 800666c:	d90e      	bls.n	800668c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	68ba      	ldr	r2, [r7, #8]
 8006672:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800667a:	4b1a      	ldr	r3, [pc, #104]	@ (80066e4 <prvSwitchTimerLists+0xc4>)
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	3304      	adds	r3, #4
 8006682:	4619      	mov	r1, r3
 8006684:	4610      	mov	r0, r2
 8006686:	f7fe f872 	bl	800476e <vListInsert>
 800668a:	e017      	b.n	80066bc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800668c:	2300      	movs	r3, #0
 800668e:	9300      	str	r3, [sp, #0]
 8006690:	2300      	movs	r3, #0
 8006692:	693a      	ldr	r2, [r7, #16]
 8006694:	2100      	movs	r1, #0
 8006696:	68f8      	ldr	r0, [r7, #12]
 8006698:	f7ff fd58 	bl	800614c <xTimerGenericCommand>
 800669c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d10b      	bne.n	80066bc <prvSwitchTimerLists+0x9c>
	__asm volatile
 80066a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066a8:	f383 8811 	msr	BASEPRI, r3
 80066ac:	f3bf 8f6f 	isb	sy
 80066b0:	f3bf 8f4f 	dsb	sy
 80066b4:	603b      	str	r3, [r7, #0]
}
 80066b6:	bf00      	nop
 80066b8:	bf00      	nop
 80066ba:	e7fd      	b.n	80066b8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80066bc:	4b09      	ldr	r3, [pc, #36]	@ (80066e4 <prvSwitchTimerLists+0xc4>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1b0      	bne.n	8006628 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80066c6:	4b07      	ldr	r3, [pc, #28]	@ (80066e4 <prvSwitchTimerLists+0xc4>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80066cc:	4b06      	ldr	r3, [pc, #24]	@ (80066e8 <prvSwitchTimerLists+0xc8>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a04      	ldr	r2, [pc, #16]	@ (80066e4 <prvSwitchTimerLists+0xc4>)
 80066d2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80066d4:	4a04      	ldr	r2, [pc, #16]	@ (80066e8 <prvSwitchTimerLists+0xc8>)
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	6013      	str	r3, [r2, #0]
}
 80066da:	bf00      	nop
 80066dc:	3718      	adds	r7, #24
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	20000db0 	.word	0x20000db0
 80066e8:	20000db4 	.word	0x20000db4

080066ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b082      	sub	sp, #8
 80066f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80066f2:	f000 f969 	bl	80069c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80066f6:	4b15      	ldr	r3, [pc, #84]	@ (800674c <prvCheckForValidListAndQueue+0x60>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d120      	bne.n	8006740 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80066fe:	4814      	ldr	r0, [pc, #80]	@ (8006750 <prvCheckForValidListAndQueue+0x64>)
 8006700:	f7fd ffe4 	bl	80046cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006704:	4813      	ldr	r0, [pc, #76]	@ (8006754 <prvCheckForValidListAndQueue+0x68>)
 8006706:	f7fd ffe1 	bl	80046cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800670a:	4b13      	ldr	r3, [pc, #76]	@ (8006758 <prvCheckForValidListAndQueue+0x6c>)
 800670c:	4a10      	ldr	r2, [pc, #64]	@ (8006750 <prvCheckForValidListAndQueue+0x64>)
 800670e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006710:	4b12      	ldr	r3, [pc, #72]	@ (800675c <prvCheckForValidListAndQueue+0x70>)
 8006712:	4a10      	ldr	r2, [pc, #64]	@ (8006754 <prvCheckForValidListAndQueue+0x68>)
 8006714:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006716:	2300      	movs	r3, #0
 8006718:	9300      	str	r3, [sp, #0]
 800671a:	4b11      	ldr	r3, [pc, #68]	@ (8006760 <prvCheckForValidListAndQueue+0x74>)
 800671c:	4a11      	ldr	r2, [pc, #68]	@ (8006764 <prvCheckForValidListAndQueue+0x78>)
 800671e:	2110      	movs	r1, #16
 8006720:	200a      	movs	r0, #10
 8006722:	f7fe f8f1 	bl	8004908 <xQueueGenericCreateStatic>
 8006726:	4603      	mov	r3, r0
 8006728:	4a08      	ldr	r2, [pc, #32]	@ (800674c <prvCheckForValidListAndQueue+0x60>)
 800672a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800672c:	4b07      	ldr	r3, [pc, #28]	@ (800674c <prvCheckForValidListAndQueue+0x60>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d005      	beq.n	8006740 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006734:	4b05      	ldr	r3, [pc, #20]	@ (800674c <prvCheckForValidListAndQueue+0x60>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	490b      	ldr	r1, [pc, #44]	@ (8006768 <prvCheckForValidListAndQueue+0x7c>)
 800673a:	4618      	mov	r0, r3
 800673c:	f7fe fd52 	bl	80051e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006740:	f000 f974 	bl	8006a2c <vPortExitCritical>
}
 8006744:	bf00      	nop
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	20000db8 	.word	0x20000db8
 8006750:	20000d88 	.word	0x20000d88
 8006754:	20000d9c 	.word	0x20000d9c
 8006758:	20000db0 	.word	0x20000db0
 800675c:	20000db4 	.word	0x20000db4
 8006760:	20000e64 	.word	0x20000e64
 8006764:	20000dc4 	.word	0x20000dc4
 8006768:	080070a8 	.word	0x080070a8

0800676c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800676c:	b480      	push	{r7}
 800676e:	b085      	sub	sp, #20
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	3b04      	subs	r3, #4
 800677c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006784:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	3b04      	subs	r3, #4
 800678a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	f023 0201 	bic.w	r2, r3, #1
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	3b04      	subs	r3, #4
 800679a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800679c:	4a0c      	ldr	r2, [pc, #48]	@ (80067d0 <pxPortInitialiseStack+0x64>)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	3b14      	subs	r3, #20
 80067a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	3b04      	subs	r3, #4
 80067b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f06f 0202 	mvn.w	r2, #2
 80067ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	3b20      	subs	r3, #32
 80067c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80067c2:	68fb      	ldr	r3, [r7, #12]
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3714      	adds	r7, #20
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr
 80067d0:	080067d5 	.word	0x080067d5

080067d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80067d4:	b480      	push	{r7}
 80067d6:	b085      	sub	sp, #20
 80067d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80067da:	2300      	movs	r3, #0
 80067dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80067de:	4b13      	ldr	r3, [pc, #76]	@ (800682c <prvTaskExitError+0x58>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067e6:	d00b      	beq.n	8006800 <prvTaskExitError+0x2c>
	__asm volatile
 80067e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ec:	f383 8811 	msr	BASEPRI, r3
 80067f0:	f3bf 8f6f 	isb	sy
 80067f4:	f3bf 8f4f 	dsb	sy
 80067f8:	60fb      	str	r3, [r7, #12]
}
 80067fa:	bf00      	nop
 80067fc:	bf00      	nop
 80067fe:	e7fd      	b.n	80067fc <prvTaskExitError+0x28>
	__asm volatile
 8006800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006804:	f383 8811 	msr	BASEPRI, r3
 8006808:	f3bf 8f6f 	isb	sy
 800680c:	f3bf 8f4f 	dsb	sy
 8006810:	60bb      	str	r3, [r7, #8]
}
 8006812:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006814:	bf00      	nop
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d0fc      	beq.n	8006816 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800681c:	bf00      	nop
 800681e:	bf00      	nop
 8006820:	3714      	adds	r7, #20
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr
 800682a:	bf00      	nop
 800682c:	20000014 	.word	0x20000014

08006830 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006830:	4b07      	ldr	r3, [pc, #28]	@ (8006850 <pxCurrentTCBConst2>)
 8006832:	6819      	ldr	r1, [r3, #0]
 8006834:	6808      	ldr	r0, [r1, #0]
 8006836:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800683a:	f380 8809 	msr	PSP, r0
 800683e:	f3bf 8f6f 	isb	sy
 8006842:	f04f 0000 	mov.w	r0, #0
 8006846:	f380 8811 	msr	BASEPRI, r0
 800684a:	4770      	bx	lr
 800684c:	f3af 8000 	nop.w

08006850 <pxCurrentTCBConst2>:
 8006850:	20000888 	.word	0x20000888
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006854:	bf00      	nop
 8006856:	bf00      	nop

08006858 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006858:	4808      	ldr	r0, [pc, #32]	@ (800687c <prvPortStartFirstTask+0x24>)
 800685a:	6800      	ldr	r0, [r0, #0]
 800685c:	6800      	ldr	r0, [r0, #0]
 800685e:	f380 8808 	msr	MSP, r0
 8006862:	f04f 0000 	mov.w	r0, #0
 8006866:	f380 8814 	msr	CONTROL, r0
 800686a:	b662      	cpsie	i
 800686c:	b661      	cpsie	f
 800686e:	f3bf 8f4f 	dsb	sy
 8006872:	f3bf 8f6f 	isb	sy
 8006876:	df00      	svc	0
 8006878:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800687a:	bf00      	nop
 800687c:	e000ed08 	.word	0xe000ed08

08006880 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b086      	sub	sp, #24
 8006884:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006886:	4b47      	ldr	r3, [pc, #284]	@ (80069a4 <xPortStartScheduler+0x124>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a47      	ldr	r2, [pc, #284]	@ (80069a8 <xPortStartScheduler+0x128>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d10b      	bne.n	80068a8 <xPortStartScheduler+0x28>
	__asm volatile
 8006890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006894:	f383 8811 	msr	BASEPRI, r3
 8006898:	f3bf 8f6f 	isb	sy
 800689c:	f3bf 8f4f 	dsb	sy
 80068a0:	613b      	str	r3, [r7, #16]
}
 80068a2:	bf00      	nop
 80068a4:	bf00      	nop
 80068a6:	e7fd      	b.n	80068a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80068a8:	4b3e      	ldr	r3, [pc, #248]	@ (80069a4 <xPortStartScheduler+0x124>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a3f      	ldr	r2, [pc, #252]	@ (80069ac <xPortStartScheduler+0x12c>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d10b      	bne.n	80068ca <xPortStartScheduler+0x4a>
	__asm volatile
 80068b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068b6:	f383 8811 	msr	BASEPRI, r3
 80068ba:	f3bf 8f6f 	isb	sy
 80068be:	f3bf 8f4f 	dsb	sy
 80068c2:	60fb      	str	r3, [r7, #12]
}
 80068c4:	bf00      	nop
 80068c6:	bf00      	nop
 80068c8:	e7fd      	b.n	80068c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80068ca:	4b39      	ldr	r3, [pc, #228]	@ (80069b0 <xPortStartScheduler+0x130>)
 80068cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	22ff      	movs	r2, #255	@ 0xff
 80068da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80068e4:	78fb      	ldrb	r3, [r7, #3]
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80068ec:	b2da      	uxtb	r2, r3
 80068ee:	4b31      	ldr	r3, [pc, #196]	@ (80069b4 <xPortStartScheduler+0x134>)
 80068f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80068f2:	4b31      	ldr	r3, [pc, #196]	@ (80069b8 <xPortStartScheduler+0x138>)
 80068f4:	2207      	movs	r2, #7
 80068f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068f8:	e009      	b.n	800690e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80068fa:	4b2f      	ldr	r3, [pc, #188]	@ (80069b8 <xPortStartScheduler+0x138>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	3b01      	subs	r3, #1
 8006900:	4a2d      	ldr	r2, [pc, #180]	@ (80069b8 <xPortStartScheduler+0x138>)
 8006902:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006904:	78fb      	ldrb	r3, [r7, #3]
 8006906:	b2db      	uxtb	r3, r3
 8006908:	005b      	lsls	r3, r3, #1
 800690a:	b2db      	uxtb	r3, r3
 800690c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800690e:	78fb      	ldrb	r3, [r7, #3]
 8006910:	b2db      	uxtb	r3, r3
 8006912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006916:	2b80      	cmp	r3, #128	@ 0x80
 8006918:	d0ef      	beq.n	80068fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800691a:	4b27      	ldr	r3, [pc, #156]	@ (80069b8 <xPortStartScheduler+0x138>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f1c3 0307 	rsb	r3, r3, #7
 8006922:	2b04      	cmp	r3, #4
 8006924:	d00b      	beq.n	800693e <xPortStartScheduler+0xbe>
	__asm volatile
 8006926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800692a:	f383 8811 	msr	BASEPRI, r3
 800692e:	f3bf 8f6f 	isb	sy
 8006932:	f3bf 8f4f 	dsb	sy
 8006936:	60bb      	str	r3, [r7, #8]
}
 8006938:	bf00      	nop
 800693a:	bf00      	nop
 800693c:	e7fd      	b.n	800693a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800693e:	4b1e      	ldr	r3, [pc, #120]	@ (80069b8 <xPortStartScheduler+0x138>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	021b      	lsls	r3, r3, #8
 8006944:	4a1c      	ldr	r2, [pc, #112]	@ (80069b8 <xPortStartScheduler+0x138>)
 8006946:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006948:	4b1b      	ldr	r3, [pc, #108]	@ (80069b8 <xPortStartScheduler+0x138>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006950:	4a19      	ldr	r2, [pc, #100]	@ (80069b8 <xPortStartScheduler+0x138>)
 8006952:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	b2da      	uxtb	r2, r3
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800695c:	4b17      	ldr	r3, [pc, #92]	@ (80069bc <xPortStartScheduler+0x13c>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a16      	ldr	r2, [pc, #88]	@ (80069bc <xPortStartScheduler+0x13c>)
 8006962:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006966:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006968:	4b14      	ldr	r3, [pc, #80]	@ (80069bc <xPortStartScheduler+0x13c>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a13      	ldr	r2, [pc, #76]	@ (80069bc <xPortStartScheduler+0x13c>)
 800696e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006972:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006974:	f000 f8da 	bl	8006b2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006978:	4b11      	ldr	r3, [pc, #68]	@ (80069c0 <xPortStartScheduler+0x140>)
 800697a:	2200      	movs	r2, #0
 800697c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800697e:	f000 f8f9 	bl	8006b74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006982:	4b10      	ldr	r3, [pc, #64]	@ (80069c4 <xPortStartScheduler+0x144>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a0f      	ldr	r2, [pc, #60]	@ (80069c4 <xPortStartScheduler+0x144>)
 8006988:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800698c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800698e:	f7ff ff63 	bl	8006858 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006992:	f7ff f83f 	bl	8005a14 <vTaskSwitchContext>
	prvTaskExitError();
 8006996:	f7ff ff1d 	bl	80067d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800699a:	2300      	movs	r3, #0
}
 800699c:	4618      	mov	r0, r3
 800699e:	3718      	adds	r7, #24
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}
 80069a4:	e000ed00 	.word	0xe000ed00
 80069a8:	410fc271 	.word	0x410fc271
 80069ac:	410fc270 	.word	0x410fc270
 80069b0:	e000e400 	.word	0xe000e400
 80069b4:	20000eb4 	.word	0x20000eb4
 80069b8:	20000eb8 	.word	0x20000eb8
 80069bc:	e000ed20 	.word	0xe000ed20
 80069c0:	20000014 	.word	0x20000014
 80069c4:	e000ef34 	.word	0xe000ef34

080069c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
	__asm volatile
 80069ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d2:	f383 8811 	msr	BASEPRI, r3
 80069d6:	f3bf 8f6f 	isb	sy
 80069da:	f3bf 8f4f 	dsb	sy
 80069de:	607b      	str	r3, [r7, #4]
}
 80069e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80069e2:	4b10      	ldr	r3, [pc, #64]	@ (8006a24 <vPortEnterCritical+0x5c>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	3301      	adds	r3, #1
 80069e8:	4a0e      	ldr	r2, [pc, #56]	@ (8006a24 <vPortEnterCritical+0x5c>)
 80069ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80069ec:	4b0d      	ldr	r3, [pc, #52]	@ (8006a24 <vPortEnterCritical+0x5c>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d110      	bne.n	8006a16 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80069f4:	4b0c      	ldr	r3, [pc, #48]	@ (8006a28 <vPortEnterCritical+0x60>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d00b      	beq.n	8006a16 <vPortEnterCritical+0x4e>
	__asm volatile
 80069fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a02:	f383 8811 	msr	BASEPRI, r3
 8006a06:	f3bf 8f6f 	isb	sy
 8006a0a:	f3bf 8f4f 	dsb	sy
 8006a0e:	603b      	str	r3, [r7, #0]
}
 8006a10:	bf00      	nop
 8006a12:	bf00      	nop
 8006a14:	e7fd      	b.n	8006a12 <vPortEnterCritical+0x4a>
	}
}
 8006a16:	bf00      	nop
 8006a18:	370c      	adds	r7, #12
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr
 8006a22:	bf00      	nop
 8006a24:	20000014 	.word	0x20000014
 8006a28:	e000ed04 	.word	0xe000ed04

08006a2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006a32:	4b12      	ldr	r3, [pc, #72]	@ (8006a7c <vPortExitCritical+0x50>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d10b      	bne.n	8006a52 <vPortExitCritical+0x26>
	__asm volatile
 8006a3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a3e:	f383 8811 	msr	BASEPRI, r3
 8006a42:	f3bf 8f6f 	isb	sy
 8006a46:	f3bf 8f4f 	dsb	sy
 8006a4a:	607b      	str	r3, [r7, #4]
}
 8006a4c:	bf00      	nop
 8006a4e:	bf00      	nop
 8006a50:	e7fd      	b.n	8006a4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006a52:	4b0a      	ldr	r3, [pc, #40]	@ (8006a7c <vPortExitCritical+0x50>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	3b01      	subs	r3, #1
 8006a58:	4a08      	ldr	r2, [pc, #32]	@ (8006a7c <vPortExitCritical+0x50>)
 8006a5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006a5c:	4b07      	ldr	r3, [pc, #28]	@ (8006a7c <vPortExitCritical+0x50>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d105      	bne.n	8006a70 <vPortExitCritical+0x44>
 8006a64:	2300      	movs	r3, #0
 8006a66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	f383 8811 	msr	BASEPRI, r3
}
 8006a6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006a70:	bf00      	nop
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr
 8006a7c:	20000014 	.word	0x20000014

08006a80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006a80:	f3ef 8009 	mrs	r0, PSP
 8006a84:	f3bf 8f6f 	isb	sy
 8006a88:	4b15      	ldr	r3, [pc, #84]	@ (8006ae0 <pxCurrentTCBConst>)
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	f01e 0f10 	tst.w	lr, #16
 8006a90:	bf08      	it	eq
 8006a92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006a96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a9a:	6010      	str	r0, [r2, #0]
 8006a9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006aa0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006aa4:	f380 8811 	msr	BASEPRI, r0
 8006aa8:	f3bf 8f4f 	dsb	sy
 8006aac:	f3bf 8f6f 	isb	sy
 8006ab0:	f7fe ffb0 	bl	8005a14 <vTaskSwitchContext>
 8006ab4:	f04f 0000 	mov.w	r0, #0
 8006ab8:	f380 8811 	msr	BASEPRI, r0
 8006abc:	bc09      	pop	{r0, r3}
 8006abe:	6819      	ldr	r1, [r3, #0]
 8006ac0:	6808      	ldr	r0, [r1, #0]
 8006ac2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ac6:	f01e 0f10 	tst.w	lr, #16
 8006aca:	bf08      	it	eq
 8006acc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006ad0:	f380 8809 	msr	PSP, r0
 8006ad4:	f3bf 8f6f 	isb	sy
 8006ad8:	4770      	bx	lr
 8006ada:	bf00      	nop
 8006adc:	f3af 8000 	nop.w

08006ae0 <pxCurrentTCBConst>:
 8006ae0:	20000888 	.word	0x20000888
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ae4:	bf00      	nop
 8006ae6:	bf00      	nop

08006ae8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b082      	sub	sp, #8
 8006aec:	af00      	add	r7, sp, #0
	__asm volatile
 8006aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006af2:	f383 8811 	msr	BASEPRI, r3
 8006af6:	f3bf 8f6f 	isb	sy
 8006afa:	f3bf 8f4f 	dsb	sy
 8006afe:	607b      	str	r3, [r7, #4]
}
 8006b00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006b02:	f7fe fecd 	bl	80058a0 <xTaskIncrementTick>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d003      	beq.n	8006b14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006b0c:	4b06      	ldr	r3, [pc, #24]	@ (8006b28 <xPortSysTickHandler+0x40>)
 8006b0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b12:	601a      	str	r2, [r3, #0]
 8006b14:	2300      	movs	r3, #0
 8006b16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	f383 8811 	msr	BASEPRI, r3
}
 8006b1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006b20:	bf00      	nop
 8006b22:	3708      	adds	r7, #8
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	e000ed04 	.word	0xe000ed04

08006b2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006b30:	4b0b      	ldr	r3, [pc, #44]	@ (8006b60 <vPortSetupTimerInterrupt+0x34>)
 8006b32:	2200      	movs	r2, #0
 8006b34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006b36:	4b0b      	ldr	r3, [pc, #44]	@ (8006b64 <vPortSetupTimerInterrupt+0x38>)
 8006b38:	2200      	movs	r2, #0
 8006b3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8006b68 <vPortSetupTimerInterrupt+0x3c>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a0a      	ldr	r2, [pc, #40]	@ (8006b6c <vPortSetupTimerInterrupt+0x40>)
 8006b42:	fba2 2303 	umull	r2, r3, r2, r3
 8006b46:	099b      	lsrs	r3, r3, #6
 8006b48:	4a09      	ldr	r2, [pc, #36]	@ (8006b70 <vPortSetupTimerInterrupt+0x44>)
 8006b4a:	3b01      	subs	r3, #1
 8006b4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006b4e:	4b04      	ldr	r3, [pc, #16]	@ (8006b60 <vPortSetupTimerInterrupt+0x34>)
 8006b50:	2207      	movs	r2, #7
 8006b52:	601a      	str	r2, [r3, #0]
}
 8006b54:	bf00      	nop
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	e000e010 	.word	0xe000e010
 8006b64:	e000e018 	.word	0xe000e018
 8006b68:	20000008 	.word	0x20000008
 8006b6c:	10624dd3 	.word	0x10624dd3
 8006b70:	e000e014 	.word	0xe000e014

08006b74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006b74:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006b84 <vPortEnableVFP+0x10>
 8006b78:	6801      	ldr	r1, [r0, #0]
 8006b7a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006b7e:	6001      	str	r1, [r0, #0]
 8006b80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006b82:	bf00      	nop
 8006b84:	e000ed88 	.word	0xe000ed88

08006b88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006b88:	b480      	push	{r7}
 8006b8a:	b085      	sub	sp, #20
 8006b8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006b8e:	f3ef 8305 	mrs	r3, IPSR
 8006b92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2b0f      	cmp	r3, #15
 8006b98:	d915      	bls.n	8006bc6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006b9a:	4a18      	ldr	r2, [pc, #96]	@ (8006bfc <vPortValidateInterruptPriority+0x74>)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006ba4:	4b16      	ldr	r3, [pc, #88]	@ (8006c00 <vPortValidateInterruptPriority+0x78>)
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	7afa      	ldrb	r2, [r7, #11]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d20b      	bcs.n	8006bc6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bb2:	f383 8811 	msr	BASEPRI, r3
 8006bb6:	f3bf 8f6f 	isb	sy
 8006bba:	f3bf 8f4f 	dsb	sy
 8006bbe:	607b      	str	r3, [r7, #4]
}
 8006bc0:	bf00      	nop
 8006bc2:	bf00      	nop
 8006bc4:	e7fd      	b.n	8006bc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006bc6:	4b0f      	ldr	r3, [pc, #60]	@ (8006c04 <vPortValidateInterruptPriority+0x7c>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006bce:	4b0e      	ldr	r3, [pc, #56]	@ (8006c08 <vPortValidateInterruptPriority+0x80>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d90b      	bls.n	8006bee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bda:	f383 8811 	msr	BASEPRI, r3
 8006bde:	f3bf 8f6f 	isb	sy
 8006be2:	f3bf 8f4f 	dsb	sy
 8006be6:	603b      	str	r3, [r7, #0]
}
 8006be8:	bf00      	nop
 8006bea:	bf00      	nop
 8006bec:	e7fd      	b.n	8006bea <vPortValidateInterruptPriority+0x62>
	}
 8006bee:	bf00      	nop
 8006bf0:	3714      	adds	r7, #20
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr
 8006bfa:	bf00      	nop
 8006bfc:	e000e3f0 	.word	0xe000e3f0
 8006c00:	20000eb4 	.word	0x20000eb4
 8006c04:	e000ed0c 	.word	0xe000ed0c
 8006c08:	20000eb8 	.word	0x20000eb8

08006c0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b08a      	sub	sp, #40	@ 0x28
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006c14:	2300      	movs	r3, #0
 8006c16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006c18:	f7fe fd86 	bl	8005728 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006c1c:	4b5c      	ldr	r3, [pc, #368]	@ (8006d90 <pvPortMalloc+0x184>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d101      	bne.n	8006c28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006c24:	f000 f924 	bl	8006e70 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006c28:	4b5a      	ldr	r3, [pc, #360]	@ (8006d94 <pvPortMalloc+0x188>)
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4013      	ands	r3, r2
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f040 8095 	bne.w	8006d60 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d01e      	beq.n	8006c7a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006c3c:	2208      	movs	r2, #8
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4413      	add	r3, r2
 8006c42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f003 0307 	and.w	r3, r3, #7
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d015      	beq.n	8006c7a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f023 0307 	bic.w	r3, r3, #7
 8006c54:	3308      	adds	r3, #8
 8006c56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f003 0307 	and.w	r3, r3, #7
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d00b      	beq.n	8006c7a <pvPortMalloc+0x6e>
	__asm volatile
 8006c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c66:	f383 8811 	msr	BASEPRI, r3
 8006c6a:	f3bf 8f6f 	isb	sy
 8006c6e:	f3bf 8f4f 	dsb	sy
 8006c72:	617b      	str	r3, [r7, #20]
}
 8006c74:	bf00      	nop
 8006c76:	bf00      	nop
 8006c78:	e7fd      	b.n	8006c76 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d06f      	beq.n	8006d60 <pvPortMalloc+0x154>
 8006c80:	4b45      	ldr	r3, [pc, #276]	@ (8006d98 <pvPortMalloc+0x18c>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d86a      	bhi.n	8006d60 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006c8a:	4b44      	ldr	r3, [pc, #272]	@ (8006d9c <pvPortMalloc+0x190>)
 8006c8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006c8e:	4b43      	ldr	r3, [pc, #268]	@ (8006d9c <pvPortMalloc+0x190>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c94:	e004      	b.n	8006ca0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d903      	bls.n	8006cb2 <pvPortMalloc+0xa6>
 8006caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d1f1      	bne.n	8006c96 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006cb2:	4b37      	ldr	r3, [pc, #220]	@ (8006d90 <pvPortMalloc+0x184>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d051      	beq.n	8006d60 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006cbc:	6a3b      	ldr	r3, [r7, #32]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2208      	movs	r2, #8
 8006cc2:	4413      	add	r3, r2
 8006cc4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	6a3b      	ldr	r3, [r7, #32]
 8006ccc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd0:	685a      	ldr	r2, [r3, #4]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	1ad2      	subs	r2, r2, r3
 8006cd6:	2308      	movs	r3, #8
 8006cd8:	005b      	lsls	r3, r3, #1
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d920      	bls.n	8006d20 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006cde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ce6:	69bb      	ldr	r3, [r7, #24]
 8006ce8:	f003 0307 	and.w	r3, r3, #7
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d00b      	beq.n	8006d08 <pvPortMalloc+0xfc>
	__asm volatile
 8006cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cf4:	f383 8811 	msr	BASEPRI, r3
 8006cf8:	f3bf 8f6f 	isb	sy
 8006cfc:	f3bf 8f4f 	dsb	sy
 8006d00:	613b      	str	r3, [r7, #16]
}
 8006d02:	bf00      	nop
 8006d04:	bf00      	nop
 8006d06:	e7fd      	b.n	8006d04 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d0a:	685a      	ldr	r2, [r3, #4]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	1ad2      	subs	r2, r2, r3
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006d1a:	69b8      	ldr	r0, [r7, #24]
 8006d1c:	f000 f90a 	bl	8006f34 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006d20:	4b1d      	ldr	r3, [pc, #116]	@ (8006d98 <pvPortMalloc+0x18c>)
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	1ad3      	subs	r3, r2, r3
 8006d2a:	4a1b      	ldr	r2, [pc, #108]	@ (8006d98 <pvPortMalloc+0x18c>)
 8006d2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006d2e:	4b1a      	ldr	r3, [pc, #104]	@ (8006d98 <pvPortMalloc+0x18c>)
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	4b1b      	ldr	r3, [pc, #108]	@ (8006da0 <pvPortMalloc+0x194>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d203      	bcs.n	8006d42 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006d3a:	4b17      	ldr	r3, [pc, #92]	@ (8006d98 <pvPortMalloc+0x18c>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a18      	ldr	r2, [pc, #96]	@ (8006da0 <pvPortMalloc+0x194>)
 8006d40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d44:	685a      	ldr	r2, [r3, #4]
 8006d46:	4b13      	ldr	r3, [pc, #76]	@ (8006d94 <pvPortMalloc+0x188>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	431a      	orrs	r2, r3
 8006d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d52:	2200      	movs	r2, #0
 8006d54:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006d56:	4b13      	ldr	r3, [pc, #76]	@ (8006da4 <pvPortMalloc+0x198>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	4a11      	ldr	r2, [pc, #68]	@ (8006da4 <pvPortMalloc+0x198>)
 8006d5e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006d60:	f7fe fcf0 	bl	8005744 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	f003 0307 	and.w	r3, r3, #7
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00b      	beq.n	8006d86 <pvPortMalloc+0x17a>
	__asm volatile
 8006d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d72:	f383 8811 	msr	BASEPRI, r3
 8006d76:	f3bf 8f6f 	isb	sy
 8006d7a:	f3bf 8f4f 	dsb	sy
 8006d7e:	60fb      	str	r3, [r7, #12]
}
 8006d80:	bf00      	nop
 8006d82:	bf00      	nop
 8006d84:	e7fd      	b.n	8006d82 <pvPortMalloc+0x176>
	return pvReturn;
 8006d86:	69fb      	ldr	r3, [r7, #28]
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3728      	adds	r7, #40	@ 0x28
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}
 8006d90:	20004ac4 	.word	0x20004ac4
 8006d94:	20004ad8 	.word	0x20004ad8
 8006d98:	20004ac8 	.word	0x20004ac8
 8006d9c:	20004abc 	.word	0x20004abc
 8006da0:	20004acc 	.word	0x20004acc
 8006da4:	20004ad0 	.word	0x20004ad0

08006da8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b086      	sub	sp, #24
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d04f      	beq.n	8006e5a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006dba:	2308      	movs	r3, #8
 8006dbc:	425b      	negs	r3, r3
 8006dbe:	697a      	ldr	r2, [r7, #20]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	685a      	ldr	r2, [r3, #4]
 8006dcc:	4b25      	ldr	r3, [pc, #148]	@ (8006e64 <vPortFree+0xbc>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4013      	ands	r3, r2
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d10b      	bne.n	8006dee <vPortFree+0x46>
	__asm volatile
 8006dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dda:	f383 8811 	msr	BASEPRI, r3
 8006dde:	f3bf 8f6f 	isb	sy
 8006de2:	f3bf 8f4f 	dsb	sy
 8006de6:	60fb      	str	r3, [r7, #12]
}
 8006de8:	bf00      	nop
 8006dea:	bf00      	nop
 8006dec:	e7fd      	b.n	8006dea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d00b      	beq.n	8006e0e <vPortFree+0x66>
	__asm volatile
 8006df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dfa:	f383 8811 	msr	BASEPRI, r3
 8006dfe:	f3bf 8f6f 	isb	sy
 8006e02:	f3bf 8f4f 	dsb	sy
 8006e06:	60bb      	str	r3, [r7, #8]
}
 8006e08:	bf00      	nop
 8006e0a:	bf00      	nop
 8006e0c:	e7fd      	b.n	8006e0a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	685a      	ldr	r2, [r3, #4]
 8006e12:	4b14      	ldr	r3, [pc, #80]	@ (8006e64 <vPortFree+0xbc>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4013      	ands	r3, r2
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d01e      	beq.n	8006e5a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d11a      	bne.n	8006e5a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	685a      	ldr	r2, [r3, #4]
 8006e28:	4b0e      	ldr	r3, [pc, #56]	@ (8006e64 <vPortFree+0xbc>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	43db      	mvns	r3, r3
 8006e2e:	401a      	ands	r2, r3
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006e34:	f7fe fc78 	bl	8005728 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	685a      	ldr	r2, [r3, #4]
 8006e3c:	4b0a      	ldr	r3, [pc, #40]	@ (8006e68 <vPortFree+0xc0>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4413      	add	r3, r2
 8006e42:	4a09      	ldr	r2, [pc, #36]	@ (8006e68 <vPortFree+0xc0>)
 8006e44:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006e46:	6938      	ldr	r0, [r7, #16]
 8006e48:	f000 f874 	bl	8006f34 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006e4c:	4b07      	ldr	r3, [pc, #28]	@ (8006e6c <vPortFree+0xc4>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	3301      	adds	r3, #1
 8006e52:	4a06      	ldr	r2, [pc, #24]	@ (8006e6c <vPortFree+0xc4>)
 8006e54:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006e56:	f7fe fc75 	bl	8005744 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006e5a:	bf00      	nop
 8006e5c:	3718      	adds	r7, #24
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	20004ad8 	.word	0x20004ad8
 8006e68:	20004ac8 	.word	0x20004ac8
 8006e6c:	20004ad4 	.word	0x20004ad4

08006e70 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006e70:	b480      	push	{r7}
 8006e72:	b085      	sub	sp, #20
 8006e74:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006e76:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006e7a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006e7c:	4b27      	ldr	r3, [pc, #156]	@ (8006f1c <prvHeapInit+0xac>)
 8006e7e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f003 0307 	and.w	r3, r3, #7
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00c      	beq.n	8006ea4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	3307      	adds	r3, #7
 8006e8e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f023 0307 	bic.w	r3, r3, #7
 8006e96:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006e98:	68ba      	ldr	r2, [r7, #8]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	1ad3      	subs	r3, r2, r3
 8006e9e:	4a1f      	ldr	r2, [pc, #124]	@ (8006f1c <prvHeapInit+0xac>)
 8006ea0:	4413      	add	r3, r2
 8006ea2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006ea8:	4a1d      	ldr	r2, [pc, #116]	@ (8006f20 <prvHeapInit+0xb0>)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006eae:	4b1c      	ldr	r3, [pc, #112]	@ (8006f20 <prvHeapInit+0xb0>)
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	68ba      	ldr	r2, [r7, #8]
 8006eb8:	4413      	add	r3, r2
 8006eba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006ebc:	2208      	movs	r2, #8
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	1a9b      	subs	r3, r3, r2
 8006ec2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f023 0307 	bic.w	r3, r3, #7
 8006eca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	4a15      	ldr	r2, [pc, #84]	@ (8006f24 <prvHeapInit+0xb4>)
 8006ed0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ed2:	4b14      	ldr	r3, [pc, #80]	@ (8006f24 <prvHeapInit+0xb4>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006eda:	4b12      	ldr	r3, [pc, #72]	@ (8006f24 <prvHeapInit+0xb4>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	68fa      	ldr	r2, [r7, #12]
 8006eea:	1ad2      	subs	r2, r2, r3
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8006f24 <prvHeapInit+0xb4>)
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	4a0a      	ldr	r2, [pc, #40]	@ (8006f28 <prvHeapInit+0xb8>)
 8006efe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	4a09      	ldr	r2, [pc, #36]	@ (8006f2c <prvHeapInit+0xbc>)
 8006f06:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006f08:	4b09      	ldr	r3, [pc, #36]	@ (8006f30 <prvHeapInit+0xc0>)
 8006f0a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006f0e:	601a      	str	r2, [r3, #0]
}
 8006f10:	bf00      	nop
 8006f12:	3714      	adds	r7, #20
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr
 8006f1c:	20000ebc 	.word	0x20000ebc
 8006f20:	20004abc 	.word	0x20004abc
 8006f24:	20004ac4 	.word	0x20004ac4
 8006f28:	20004acc 	.word	0x20004acc
 8006f2c:	20004ac8 	.word	0x20004ac8
 8006f30:	20004ad8 	.word	0x20004ad8

08006f34 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006f34:	b480      	push	{r7}
 8006f36:	b085      	sub	sp, #20
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006f3c:	4b28      	ldr	r3, [pc, #160]	@ (8006fe0 <prvInsertBlockIntoFreeList+0xac>)
 8006f3e:	60fb      	str	r3, [r7, #12]
 8006f40:	e002      	b.n	8006f48 <prvInsertBlockIntoFreeList+0x14>
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	60fb      	str	r3, [r7, #12]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d8f7      	bhi.n	8006f42 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	68ba      	ldr	r2, [r7, #8]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d108      	bne.n	8006f76 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	685a      	ldr	r2, [r3, #4]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	441a      	add	r2, r3
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	68ba      	ldr	r2, [r7, #8]
 8006f80:	441a      	add	r2, r3
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d118      	bne.n	8006fbc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	4b15      	ldr	r3, [pc, #84]	@ (8006fe4 <prvInsertBlockIntoFreeList+0xb0>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d00d      	beq.n	8006fb2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	685a      	ldr	r2, [r3, #4]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	441a      	add	r2, r3
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	601a      	str	r2, [r3, #0]
 8006fb0:	e008      	b.n	8006fc4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8006fe4 <prvInsertBlockIntoFreeList+0xb0>)
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	601a      	str	r2, [r3, #0]
 8006fba:	e003      	b.n	8006fc4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d002      	beq.n	8006fd2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006fd2:	bf00      	nop
 8006fd4:	3714      	adds	r7, #20
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop
 8006fe0:	20004abc 	.word	0x20004abc
 8006fe4:	20004ac4 	.word	0x20004ac4

08006fe8 <memset>:
 8006fe8:	4402      	add	r2, r0
 8006fea:	4603      	mov	r3, r0
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d100      	bne.n	8006ff2 <memset+0xa>
 8006ff0:	4770      	bx	lr
 8006ff2:	f803 1b01 	strb.w	r1, [r3], #1
 8006ff6:	e7f9      	b.n	8006fec <memset+0x4>

08006ff8 <__libc_init_array>:
 8006ff8:	b570      	push	{r4, r5, r6, lr}
 8006ffa:	4d0d      	ldr	r5, [pc, #52]	@ (8007030 <__libc_init_array+0x38>)
 8006ffc:	4c0d      	ldr	r4, [pc, #52]	@ (8007034 <__libc_init_array+0x3c>)
 8006ffe:	1b64      	subs	r4, r4, r5
 8007000:	10a4      	asrs	r4, r4, #2
 8007002:	2600      	movs	r6, #0
 8007004:	42a6      	cmp	r6, r4
 8007006:	d109      	bne.n	800701c <__libc_init_array+0x24>
 8007008:	4d0b      	ldr	r5, [pc, #44]	@ (8007038 <__libc_init_array+0x40>)
 800700a:	4c0c      	ldr	r4, [pc, #48]	@ (800703c <__libc_init_array+0x44>)
 800700c:	f000 f826 	bl	800705c <_init>
 8007010:	1b64      	subs	r4, r4, r5
 8007012:	10a4      	asrs	r4, r4, #2
 8007014:	2600      	movs	r6, #0
 8007016:	42a6      	cmp	r6, r4
 8007018:	d105      	bne.n	8007026 <__libc_init_array+0x2e>
 800701a:	bd70      	pop	{r4, r5, r6, pc}
 800701c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007020:	4798      	blx	r3
 8007022:	3601      	adds	r6, #1
 8007024:	e7ee      	b.n	8007004 <__libc_init_array+0xc>
 8007026:	f855 3b04 	ldr.w	r3, [r5], #4
 800702a:	4798      	blx	r3
 800702c:	3601      	adds	r6, #1
 800702e:	e7f2      	b.n	8007016 <__libc_init_array+0x1e>
 8007030:	08007138 	.word	0x08007138
 8007034:	08007138 	.word	0x08007138
 8007038:	08007138 	.word	0x08007138
 800703c:	0800713c 	.word	0x0800713c

08007040 <memcpy>:
 8007040:	440a      	add	r2, r1
 8007042:	4291      	cmp	r1, r2
 8007044:	f100 33ff 	add.w	r3, r0, #4294967295
 8007048:	d100      	bne.n	800704c <memcpy+0xc>
 800704a:	4770      	bx	lr
 800704c:	b510      	push	{r4, lr}
 800704e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007052:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007056:	4291      	cmp	r1, r2
 8007058:	d1f9      	bne.n	800704e <memcpy+0xe>
 800705a:	bd10      	pop	{r4, pc}

0800705c <_init>:
 800705c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800705e:	bf00      	nop
 8007060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007062:	bc08      	pop	{r3}
 8007064:	469e      	mov	lr, r3
 8007066:	4770      	bx	lr

08007068 <_fini>:
 8007068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800706a:	bf00      	nop
 800706c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800706e:	bc08      	pop	{r3}
 8007070:	469e      	mov	lr, r3
 8007072:	4770      	bx	lr
